// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostAlertSubRequest post alert sub request
// swagger:model PostAlertSubRequest
type PostAlertSubRequest struct {

	// the info of alert
	AlertInfo string `json:"alertInfo,omitempty"`

	// the ip address of alert, default is server's ip
	AlertIP string `json:"alertIp,omitempty"`

	// 1:critical, 2:major, 3:minor, 4:warning ,5:info; default: 5
	AlertLevel int64 `json:"alertLevel,omitempty"`

	// alert object that trigger alert
	AlertObj string `json:"alertObj,omitempty"`

	// alert title
	// Required: true
	AlertTitle *string `json:"alertTitle"`

	// receivers
	Receivers []*Receiver `json:"receivers"`

	// remark info
	RemarkInfo string `json:"remarkInfo,omitempty"`

	// sub system Id
	// Required: true
	SubSystemID *int64 `json:"subSystemId"`
}

// Validate validates this post alert sub request
func (m *PostAlertSubRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubSystemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostAlertSubRequest) validateAlertTitle(formats strfmt.Registry) error {

	if err := validate.Required("alertTitle", "body", m.AlertTitle); err != nil {
		return err
	}

	return nil
}

func (m *PostAlertSubRequest) validateReceivers(formats strfmt.Registry) error {

	if swag.IsZero(m.Receivers) { // not required
		return nil
	}

	for i := 0; i < len(m.Receivers); i++ {
		if swag.IsZero(m.Receivers[i]) { // not required
			continue
		}

		if m.Receivers[i] != nil {
			if err := m.Receivers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("receivers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostAlertSubRequest) validateSubSystemID(formats strfmt.Registry) error {

	if err := validate.Required("subSystemId", "body", m.SubSystemID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostAlertSubRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostAlertSubRequest) UnmarshalBinary(b []byte) error {
	var res PostAlertSubRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
