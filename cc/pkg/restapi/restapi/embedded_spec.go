// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API description in Markdown.",
    "title": "mlss-cc API",
    "version": "1.0.0"
  },
  "host": "gateway.mlss.cc",
  "paths": {
    "/cc/v1/LDAPlogin": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logins"
        ],
        "summary": "login .",
        "operationId": "LDAPLogin",
        "parameters": [
          {
            "description": "the login Request",
            "name": "loginRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "login.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "the url to login not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/alerts/training": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alerts"
        ],
        "summary": "job laert.",
        "operationId": "ReceiveTaskAlert",
        "parameters": [
          {
            "description": "The alert of job Request",
            "name": "jobRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/admin/namespaces/{namespace}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by namespace .",
        "operationId": "CheckNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/admin/namespaces/{namespace}/users/{username}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by namespace .",
        "operationId": "CheckNamespaceUser",
        "parameters": [
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/admin/users/{username}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username .",
        "operationId": "CheckUserGetNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/namespaces/{namespace}/notebooks/{notebook}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by namespace and notebook .",
        "operationId": "CheckCurrentUserNamespacedNotebook",
        "parameters": [
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "notebook.",
            "name": "notebook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace and notebook.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{adminUsername}/users/{username}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by adminUsername and username.",
        "operationId": "AdminUserCheck",
        "parameters": [
          {
            "type": "string",
            "description": "adminUsername.",
            "name": "adminUsername",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by adminUsername and username.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{username}/namespaces/{namespace}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username and namespace.",
        "operationId": "UserNamespaceCheck",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by username and namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{username}/namespaces/{namespace}/storages": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username and namespace and path.",
        "operationId": "UserStoragePathCheck",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path.",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by username and namespace and path.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to auth by username and namespace and path not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{username}/storages": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username and path.",
        "operationId": "UserStorageCheck",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path.",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by username and path.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/getrsapubkey": {
      "get": {
        "description": "get LDAP login's rsa public key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logins"
        ],
        "summary": "rsa pubkey",
        "operationId": "GetRsaPubKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "404": {
            "description": "the url is not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "GetAllGroups",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/PageGroupList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "AddGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/group/storage": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a storage list.",
        "operationId": "GetCurrentUserStoragePath",
        "responses": {
          "200": {
            "description": "Detailed GroupStorage and GroupStorage information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/groupNamespace/{namespaceId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "get GroupNamespace.",
        "operationId": "GetAllGroupNamespaceByNamespaceId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the namespaceId of GroupNamespace",
            "name": "namespaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/groupStorage/id/{id}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a GroupStorage.",
        "operationId": "DeleteStorageFromGroup",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of GroupStorage",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupStorage and GroupStorage information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/groupStorage/storage/{storageId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a GroupStorage.",
        "operationId": "GetAllGroupStorageByStorageId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the storageId of groupStorage",
            "name": "storageId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed groupStorage and groupStorage information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/id/{groupId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a group.",
        "operationId": "GetGroupByGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of group",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a group.",
        "operationId": "DeleteGroupById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of group",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/name/{groupName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a Group.",
        "operationId": "GetGroupByName",
        "parameters": [
          {
            "type": "string",
            "description": "the id of group",
            "name": "groupName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteGroupByName",
        "parameters": [
          {
            "type": "string",
            "description": "the name of group",
            "name": "groupName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/namespaces": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "add namespace to group.",
        "operationId": "AddNamespaceToGroup",
        "parameters": [
          {
            "description": "The groupNamespace Request",
            "name": "groupNamespace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/namespaces/id/{id}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "delete namespace from group.",
        "operationId": "DeleteGroupNamespace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of GroupNamespace",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/storages": {
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "UpdateGroupStorage",
        "parameters": [
          {
            "description": "The GroupStorage Request",
            "name": "groupStorage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "add storage to group.",
        "operationId": "AddStorageToGroup",
        "parameters": [
          {
            "description": "The groupStorage Request",
            "name": "groupStorage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupStorage and GroupStorage information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupStorage not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/userGroup/id/{id}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteUserFromGroup",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of userGroup",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/userGroup/user/{userId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a userGroup.",
        "operationId": "GetAllUserGroupByUserId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the userId of userGroup",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed userGroup and userGroup information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/userGroup/user/{userId}/group/{groupId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a userGroup.",
        "operationId": "GetUserGroupByUserIdAndGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the userId of userGroup",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of userGroup",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed userGroup and userGroup information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a userGroup.",
        "operationId": "DeleteUserGroupByUserIdAndGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the userId of userGroup",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of userGroup",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed userGroup and userGroup information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/users": {
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "UpdateUserGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "userGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "add user to group.",
        "operationId": "AddUserToGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "userGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/users/roles/{roleId}/namespaces/clusterName/{clusterName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "auth by roleId and clusterName .",
        "operationId": "GetCurrentUserNamespaceWithRole",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "roleId.",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "clusterName.",
            "name": "clusterName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by roleId and clusterName.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/{groupId}/namespace/{namespaceId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "get namespace by groupId and namespaceId.",
        "operationId": "GetNamespaceByGroupIdAndNamespace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of GroupNamespace",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "the namespaceId of GroupNamespace",
            "name": "namespaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/{groupId}/namespaces": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "get namespace by groupId.",
        "operationId": "GetNamespacesByGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of GroupNamespace",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/inter/auth": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inters"
        ],
        "summary": "auth interceptor .",
        "operationId": "AuthInterceptor",
        "responses": {
          "200": {
            "description": "user interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/inter/ip": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inters"
        ],
        "summary": "ip interceptor .",
        "operationId": "IpInterceptor",
        "responses": {
          "200": {
            "description": "user interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/inter/user": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inters"
        ],
        "summary": "user interceptor .",
        "operationId": "UserInterceptor",
        "responses": {
          "200": {
            "description": "user interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/keys": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keys"
        ],
        "summary": "ip interceptor .",
        "operationId": "AddKey",
        "parameters": [
          {
            "description": "The alert of job Request",
            "name": "keyPair",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyPairRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "keyPair interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add keyPair not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/keys/{name}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keys"
        ],
        "summary": "ip interceptor .",
        "operationId": "GetByName",
        "parameters": [
          {
            "type": "string",
            "description": "name.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "keyPair interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add keyPair not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keys"
        ],
        "summary": "ip interceptor .",
        "operationId": "DeleteByName",
        "parameters": [
          {
            "type": "string",
            "description": "name.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "keyPair interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add keyPair not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/login": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logins"
        ],
        "summary": "login .",
        "operationId": "UMLogin",
        "parameters": [
          {
            "type": "string",
            "description": "the username",
            "name": "username",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the password",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "the pwdEncoded",
            "name": "pwdEncoded",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "login.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "the url to login not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/logout": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logouts"
        ],
        "summary": "Returns a user.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "logout.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "the url to logout not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/namespaces": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a list of namespaces.",
        "operationId": "GetAllNamespaces",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/PageNamespaceList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allNamespaces not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "update namespace.",
        "operationId": "UpdateNamespace",
        "parameters": [
          {
            "description": "The namespace Request",
            "name": "namespace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to put namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "create a namespace.",
        "operationId": "AddNamespace",
        "parameters": [
          {
            "description": "The namespace Request",
            "name": "namespace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/namespaces/myNamespace": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a namespace.",
        "operationId": "GetMyNamespace",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "clusterName.",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get myUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/namespaces/namespace/{namespace}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a namespace.",
        "operationId": "GetNamespaceByName",
        "parameters": [
          {
            "type": "string",
            "description": "the namespace of namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a namespace.",
        "operationId": "DeleteNamespaceByName",
        "parameters": [
          {
            "type": "string",
            "description": "the namespace of namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/nodes/{nodeName}/labels/{label}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "delete labels.",
        "operationId": "RemoveNodeLabel",
        "parameters": [
          {
            "type": "string",
            "description": "node name.",
            "name": "nodeName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "label.",
            "name": "label",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/resources": {
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "update a namespace rq.",
        "operationId": "SetNamespaceRQ",
        "parameters": [
          {
            "description": "The namespace resourcesQuota Request",
            "name": "resourcesQuota",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/ResourcesQuota"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/resources/labels": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "get labels of nodes.",
        "operationId": "GetLabelsOfNode",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "get labels of nodes.",
        "operationId": "UpdateLabels",
        "parameters": [
          {
            "description": "The namespace resourcesQuota Request",
            "name": "resourcesQuota",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "add labels to nodes.",
        "operationId": "AddLabels",
        "parameters": [
          {
            "description": "add labels to nodes",
            "name": "labelsRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/resources/{nodeName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "get nodeInfo of nodes.",
        "operationId": "GetNodeByName",
        "parameters": [
          {
            "type": "string",
            "description": "nodeName.",
            "name": "nodeName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/roles": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "get roles.",
        "operationId": "GetRoles",
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "add role to db.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "description": "The role Request",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "add role to db.",
        "operationId": "AddRole",
        "parameters": [
          {
            "description": "The role Request",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/roles/id/{id}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "get roles.",
        "operationId": "GetRoleById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "role id.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/roles/name/{name}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "get roles.",
        "operationId": "GetRoleByName",
        "parameters": [
          {
            "type": "string",
            "description": "role name.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/sample": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Samples"
        ],
        "summary": "sample .",
        "operationId": "SampleGet",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "clusterName.",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Samples"
        ],
        "summary": "sample .",
        "operationId": "SamplePost",
        "parameters": [
          {
            "description": "The access Request",
            "name": "cluster",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/storages": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a list of Storages.",
        "operationId": "GetAllStorage",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/PageStorageList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allStorages not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "update Storage.",
        "operationId": "UpdateStorage",
        "parameters": [
          {
            "description": "The Storage Request",
            "name": "storage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to put Storage not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a list of Storages.",
        "operationId": "AddStorage",
        "parameters": [
          {
            "description": "The Storage Request",
            "name": "storage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allStorages not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/storages/id/{storageId}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a Storage.",
        "operationId": "DeleteStorageById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of Storage",
            "name": "storageId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/storages/path": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a Storage.",
        "operationId": "GetStorageByPath",
        "parameters": [
          {
            "type": "string",
            "description": "the path of Storage",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a Storage.",
        "operationId": "DeleteStorageByPath",
        "parameters": [
          {
            "type": "string",
            "description": "the id of Storage",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/PageUserList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "The user Request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "AddUser",
        "parameters": [
          {
            "description": "The user Request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/admin/{name}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "GetSAByName",
        "parameters": [
          {
            "type": "string",
            "description": "the name of SA",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/id/{userId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "GetUserByUserId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteUserById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/myUsers": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "GetMyUsers",
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get myUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/name/{userName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "GetUserByUserName",
        "parameters": [
          {
            "type": "string",
            "description": "the id of user",
            "name": "userName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "the id of user",
            "name": "userName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthResult": {
      "type": "object",
      "properties": {
        "auth": {
          "description": "the expTime",
          "type": "string"
        },
        "id": {
          "description": "the token",
          "type": "string"
        },
        "retCode": {
          "description": "the appid",
          "type": "integer",
          "format": "int64"
        },
        "tok": {
          "description": "the auth",
          "type": "string"
        }
      }
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "the code of response",
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "description": "the message of error",
          "type": "string"
        },
        "msg": {
          "description": "the message of error",
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "clusterName": {
          "description": "the clusterName of group",
          "type": "string"
        },
        "departmentId": {
          "description": "the departmentId of group",
          "type": "integer",
          "format": "int64"
        },
        "departmentName": {
          "description": "the departmentId of group",
          "type": "string"
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupType": {
          "description": "the type of group",
          "type": "string"
        },
        "id": {
          "description": "the id of group",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the groupName",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks user",
          "type": "string"
        },
        "subsystemId": {
          "description": "the systemId of group",
          "type": "integer",
          "format": "int64"
        },
        "subsystemName": {
          "description": "the systemName of group",
          "type": "string"
        }
      }
    },
    "GroupNamespace": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the name of namespace",
          "type": "string"
        },
        "namespaceId": {
          "description": "the namespaceId",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        }
      }
    },
    "GroupNamespaceRes": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "description": "the groupId",
          "type": "string"
        },
        "groupType": {
          "description": "the groupId",
          "type": "string"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the name of namespace",
          "type": "string"
        },
        "namespaceId": {
          "description": "the namespaceId",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        }
      }
    },
    "GroupStorage": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "the path of storage",
          "type": "string"
        },
        "permissions": {
          "description": "the permissions of storage",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "storageId": {
          "description": "the storageId",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "thr type of storage",
          "type": "string"
        }
      }
    },
    "GroupStorageRes": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "description": "the groupId",
          "type": "string"
        },
        "groupType": {
          "description": "the groupId",
          "type": "string"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "the path of storage",
          "type": "string"
        },
        "permissions": {
          "description": "the permissions of storage",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "storageId": {
          "description": "the storageId",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "thr type of storage",
          "type": "string"
        }
      }
    },
    "IMSAlert": {
      "type": "object",
      "properties": {
        "alert_info": {
          "description": "the alertInfo",
          "type": "string"
        },
        "alert_ip": {
          "description": "the alertIp",
          "type": "string"
        },
        "alert_level": {
          "description": "the alertLevel",
          "type": "integer",
          "format": "int64"
        },
        "alert_obj": {
          "description": "the alertObj",
          "type": "string"
        },
        "alert_receiver": {
          "description": "the alertReceiver",
          "type": "string"
        },
        "alert_title": {
          "description": "the alertTitle",
          "type": "string"
        },
        "alert_way": {
          "description": "the alertWay",
          "type": "string"
        },
        "remark_info": {
          "description": "the remarkInfo",
          "type": "string"
        },
        "sub_system_id": {
          "description": "the subSystemId",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JobRequest": {
      "type": "object",
      "properties": {
        "alertLevel": {
          "description": "the alertLevel",
          "type": "string"
        },
        "alertReason": {
          "description": "the alertReason",
          "type": "string"
        },
        "endTime": {
          "description": "the endTime",
          "type": "string"
        },
        "jobName": {
          "description": "the jobName",
          "type": "string"
        },
        "jobNamespace": {
          "description": "the jobNamespace",
          "type": "string"
        },
        "jobStatus": {
          "description": "the jobStatus",
          "type": "string"
        },
        "receiver": {
          "description": "the receiver",
          "type": "string"
        },
        "startTime": {
          "description": "the startTime",
          "type": "string"
        },
        "trainingID": {
          "description": "the trainingID",
          "type": "string"
        },
        "userID": {
          "description": "the userID",
          "type": "string"
        }
      }
    },
    "KeyPairRequest": {
      "type": "object",
      "properties": {
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the name",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks",
          "type": "string"
        }
      }
    },
    "Keypair": {
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "the apiKey",
          "type": "string"
        },
        "enableFlag": {
          "description": "the enableFlag",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the name",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks",
          "type": "string"
        },
        "secretKey": {
          "description": "the secretKey",
          "type": "string"
        }
      }
    },
    "LabelsRequest": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "the ip of node",
          "type": "string"
        },
        "lbBusType": {
          "description": "the lbBusType of nameSpace",
          "type": "string"
        },
        "lbGpuModel": {
          "description": "the lbGpuModel of nameSpace",
          "type": "string"
        },
        "namespace": {
          "description": "the nameSpace name",
          "type": "string"
        }
      }
    },
    "LabelsResponse": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "the ip of node",
          "type": "string"
        },
        "labels": {
          "description": "the labels of node",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "description": "Login Password",
          "type": "string"
        },
        "username": {
          "description": "Login Username",
          "type": "string"
        }
      }
    },
    "LoginResult": {
      "type": "object",
      "properties": {
        "actype": {
          "description": "the actype",
          "type": "integer",
          "format": "int64"
        },
        "code": {
          "description": "the token",
          "type": "integer",
          "format": "int64"
        },
        "dept": {
          "description": "the dept",
          "type": "string"
        },
        "desc": {
          "description": "the desc",
          "type": "string"
        },
        "email": {
          "description": "the email",
          "type": "string"
        },
        "id": {
          "description": "the userId",
          "type": "string"
        },
        "org": {
          "description": "the org",
          "type": "string"
        },
        "userName": {
          "description": "the userName",
          "type": "string"
        }
      }
    },
    "Namespace": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of namespace",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace name",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of namespace",
          "type": "string"
        }
      }
    },
    "NamespaceRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of namespace",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace name",
          "type": "string"
        },
        "platformNamespace": {
          "description": "the namespace platformNamespace",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of namespace",
          "type": "string"
        }
      }
    },
    "NamespaceResponse": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "hard": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "description": "the id of namespace",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace name",
          "type": "string"
        },
        "platformNamespace": {
          "description": "the namespace platformNamespace",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of namespace",
          "type": "string"
        }
      }
    },
    "PageGroupList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageGroupNamespaceResList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupNamespaceRes"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageGroupStorageResList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupStorageRes"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageLabelsResponseList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelsResponse"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageNamespaceList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamespaceResponse"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageStorageList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageUserGroupResList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupRes"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageUserList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "the enableFlag",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "method": {
          "description": "the name",
          "type": "string"
        },
        "name": {
          "description": "the name",
          "type": "string"
        },
        "operateTime": {
          "description": "the remarks",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks",
          "type": "string"
        },
        "url": {
          "description": "the remarks",
          "type": "string"
        }
      }
    },
    "ResourcesQuota": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "the cpu",
          "type": "string"
        },
        "gpu": {
          "description": "the gpu",
          "type": "string"
        },
        "memory": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "the id of GroupStorage",
          "type": "string"
        }
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "result": {
          "type": "object"
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of role",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the role",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of role",
          "type": "string"
        }
      }
    },
    "RolePermission": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "operateTime": {
          "description": "the remarks",
          "type": "string"
        },
        "permissionId": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "roleId": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SessionUser": {
      "type": "object",
      "properties": {
        "accountType": {
          "description": "the accountType",
          "type": "integer",
          "format": "int64"
        },
        "deptCode": {
          "description": "deptCode",
          "type": "string"
        },
        "email": {
          "description": "the email",
          "type": "string"
        },
        "expDate": {
          "description": "the expDate",
          "type": "string"
        },
        "isSuperadmin": {
          "description": "true or false",
          "type": "boolean"
        },
        "orgCode": {
          "description": "the orgCode",
          "type": "string"
        },
        "userId": {
          "description": "the userId",
          "type": "string"
        },
        "userName": {
          "description": "the userName",
          "type": "string"
        }
      }
    },
    "Storage": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of Storage",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "the path of storage",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks storage",
          "type": "string"
        },
        "type": {
          "description": "the type of storage",
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "gid": {
          "description": "the gid of user",
          "type": "integer",
          "format": "int64"
        },
        "guidCheck": {
          "description": "true or false",
          "type": "string"
        },
        "id": {
          "description": "the id of user",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the username",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks user",
          "type": "string"
        },
        "token": {
          "description": "the client_token of user",
          "type": "string"
        },
        "type": {
          "description": "the type of user, user or system",
          "type": "string"
        },
        "uid": {
          "description": "the uid of user",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "GroupId": {
          "description": "the GroupId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "RoleId": {
          "description": "the roleId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "userId": {
          "description": "the UserGroup",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserGroupRes": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the GroupId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "description": "the groupId",
          "type": "string"
        },
        "groupType": {
          "description": "the groupId",
          "type": "string"
        },
        "id": {
          "description": "the id of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "roleId": {
          "description": "the roleId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "roleName": {
          "description": "the roleName",
          "type": "string"
        },
        "userId": {
          "description": "the UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "description": "the username",
          "type": "string"
        }
      }
    },
    "UserList": {
      "type": "object",
      "properties": {
        "userList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "UserNamespaceAccessResponse": {
      "type": "object",
      "properties": {
        "accessible": {
          "description": "the accessible",
          "type": "boolean"
        },
        "namespace": {
          "description": "the namespace",
          "type": "string"
        },
        "username": {
          "description": "the username",
          "type": "string"
        }
      }
    },
    "UserNotebookAddressResponse": {
      "type": "object",
      "properties": {
        "notebookAddress": {
          "description": "the notebookAddress",
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "clusterName": {
          "description": "the clusterName of group",
          "type": "string"
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "gid": {
          "description": "the gid of user",
          "type": "integer",
          "format": "int64"
        },
        "guidCheck": {
          "description": "true or false",
          "type": "string"
        },
        "id": {
          "description": "the id of user",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the username",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks user",
          "type": "string"
        },
        "token": {
          "description": "the client_token of user",
          "type": "string"
        },
        "type": {
          "description": "the type of user, user or system",
          "type": "string"
        },
        "uid": {
          "description": "the uid of user",
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API description in Markdown.",
    "title": "mlss-cc API",
    "version": "1.0.0"
  },
  "host": "gateway.mlss.cc",
  "paths": {
    "/cc/v1/LDAPlogin": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logins"
        ],
        "summary": "login .",
        "operationId": "LDAPLogin",
        "parameters": [
          {
            "description": "the login Request",
            "name": "loginRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "login.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "the url to login not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/alerts/training": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alerts"
        ],
        "summary": "job laert.",
        "operationId": "ReceiveTaskAlert",
        "parameters": [
          {
            "description": "The alert of job Request",
            "name": "jobRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/admin/namespaces/{namespace}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by namespace .",
        "operationId": "CheckNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/admin/namespaces/{namespace}/users/{username}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by namespace .",
        "operationId": "CheckNamespaceUser",
        "parameters": [
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/admin/users/{username}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username .",
        "operationId": "CheckUserGetNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/namespaces/{namespace}/notebooks/{notebook}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by namespace and notebook .",
        "operationId": "CheckCurrentUserNamespacedNotebook",
        "parameters": [
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "notebook.",
            "name": "notebook",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by namespace and notebook.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{adminUsername}/users/{username}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by adminUsername and username.",
        "operationId": "AdminUserCheck",
        "parameters": [
          {
            "type": "string",
            "description": "adminUsername.",
            "name": "adminUsername",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by adminUsername and username.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{username}/namespaces/{namespace}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username and namespace.",
        "operationId": "UserNamespaceCheck",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by username and namespace.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{username}/namespaces/{namespace}/storages": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username and namespace and path.",
        "operationId": "UserStoragePathCheck",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path.",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by username and namespace and path.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to auth by username and namespace and path not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/auth/access/users/{username}/storages": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auths"
        ],
        "summary": "auth by username and path.",
        "operationId": "UserStorageCheck",
        "parameters": [
          {
            "type": "string",
            "description": "username.",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "path.",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by username and path.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/getrsapubkey": {
      "get": {
        "description": "get LDAP login's rsa public key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logins"
        ],
        "summary": "rsa pubkey",
        "operationId": "GetRsaPubKey",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "404": {
            "description": "the url is not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "GetAllGroups",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/PageGroupList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "AddGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/group/storage": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a storage list.",
        "operationId": "GetCurrentUserStoragePath",
        "responses": {
          "200": {
            "description": "Detailed GroupStorage and GroupStorage information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/groupNamespace/{namespaceId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "get GroupNamespace.",
        "operationId": "GetAllGroupNamespaceByNamespaceId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the namespaceId of GroupNamespace",
            "name": "namespaceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/groupStorage/id/{id}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a GroupStorage.",
        "operationId": "DeleteStorageFromGroup",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of GroupStorage",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupStorage and GroupStorage information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/groupStorage/storage/{storageId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a GroupStorage.",
        "operationId": "GetAllGroupStorageByStorageId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the storageId of groupStorage",
            "name": "storageId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed groupStorage and groupStorage information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/id/{groupId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a group.",
        "operationId": "GetGroupByGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of group",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a group.",
        "operationId": "DeleteGroupById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of group",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/name/{groupName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a Group.",
        "operationId": "GetGroupByName",
        "parameters": [
          {
            "type": "string",
            "description": "the id of group",
            "name": "groupName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteGroupByName",
        "parameters": [
          {
            "type": "string",
            "description": "the name of group",
            "name": "groupName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/namespaces": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "add namespace to group.",
        "operationId": "AddNamespaceToGroup",
        "parameters": [
          {
            "description": "The groupNamespace Request",
            "name": "groupNamespace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/namespaces/id/{id}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "delete namespace from group.",
        "operationId": "DeleteGroupNamespace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of GroupNamespace",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/storages": {
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "UpdateGroupStorage",
        "parameters": [
          {
            "description": "The GroupStorage Request",
            "name": "groupStorage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "add storage to group.",
        "operationId": "AddStorageToGroup",
        "parameters": [
          {
            "description": "The groupStorage Request",
            "name": "groupStorage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupStorage and GroupStorage information.",
            "schema": {
              "$ref": "#/definitions/GroupStorage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupStorage not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/userGroup/id/{id}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteUserFromGroup",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of userGroup",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Group and Group information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/userGroup/user/{userId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a userGroup.",
        "operationId": "GetAllUserGroupByUserId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the userId of userGroup",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed userGroup and userGroup information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/userGroup/user/{userId}/group/{groupId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a userGroup.",
        "operationId": "GetUserGroupByUserIdAndGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the userId of userGroup",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of userGroup",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed userGroup and userGroup information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a userGroup.",
        "operationId": "DeleteUserGroupByUserIdAndGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the userId of userGroup",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of userGroup",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed userGroup and userGroup information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/users": {
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "Returns a list of groups.",
        "operationId": "UpdateUserGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "userGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "add user to group.",
        "operationId": "AddUserToGroup",
        "parameters": [
          {
            "description": "The group Request",
            "name": "userGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed group and group information.",
            "schema": {
              "$ref": "#/definitions/UserGroup"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allGroups not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/users/roles/{roleId}/namespaces/clusterName/{clusterName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "auth by roleId and clusterName .",
        "operationId": "GetCurrentUserNamespaceWithRole",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "roleId.",
            "name": "roleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "clusterName.",
            "name": "clusterName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "auth by roleId and clusterName.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/{groupId}/namespace/{namespaceId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "get namespace by groupId and namespaceId.",
        "operationId": "GetNamespaceByGroupIdAndNamespace",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of GroupNamespace",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "the namespaceId of GroupNamespace",
            "name": "namespaceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/groups/{groupId}/namespaces": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Groups"
        ],
        "summary": "get namespace by groupId.",
        "operationId": "GetNamespacesByGroupId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the groupId of GroupNamespace",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed GroupNamespace and GroupNamespace information.",
            "schema": {
              "$ref": "#/definitions/GroupNamespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add GroupNamespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/inter/auth": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inters"
        ],
        "summary": "auth interceptor .",
        "operationId": "AuthInterceptor",
        "responses": {
          "200": {
            "description": "user interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/inter/ip": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inters"
        ],
        "summary": "ip interceptor .",
        "operationId": "IpInterceptor",
        "responses": {
          "200": {
            "description": "user interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/inter/user": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inters"
        ],
        "summary": "user interceptor .",
        "operationId": "UserInterceptor",
        "responses": {
          "200": {
            "description": "user interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/keys": {
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keys"
        ],
        "summary": "ip interceptor .",
        "operationId": "AddKey",
        "parameters": [
          {
            "description": "The alert of job Request",
            "name": "keyPair",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyPairRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "keyPair interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add keyPair not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/keys/{name}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keys"
        ],
        "summary": "ip interceptor .",
        "operationId": "GetByName",
        "parameters": [
          {
            "type": "string",
            "description": "name.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "keyPair interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add keyPair not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "keys"
        ],
        "summary": "ip interceptor .",
        "operationId": "DeleteByName",
        "parameters": [
          {
            "type": "string",
            "description": "name.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "keyPair interceptor.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add keyPair not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/login": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logins"
        ],
        "summary": "login .",
        "operationId": "UMLogin",
        "parameters": [
          {
            "type": "string",
            "description": "the username",
            "name": "username",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the password",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "the pwdEncoded",
            "name": "pwdEncoded",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "login.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "the url to login not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/logout": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Logouts"
        ],
        "summary": "Returns a user.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "logout.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "the url to logout not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/namespaces": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a list of namespaces.",
        "operationId": "GetAllNamespaces",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/PageNamespaceList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allNamespaces not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "update namespace.",
        "operationId": "UpdateNamespace",
        "parameters": [
          {
            "description": "The namespace Request",
            "name": "namespace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to put namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "create a namespace.",
        "operationId": "AddNamespace",
        "parameters": [
          {
            "description": "The namespace Request",
            "name": "namespace",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/namespaces/myNamespace": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a namespace.",
        "operationId": "GetMyNamespace",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "clusterName.",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get myUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/namespaces/namespace/{namespace}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a namespace.",
        "operationId": "GetNamespaceByName",
        "parameters": [
          {
            "type": "string",
            "description": "the namespace of namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Returns a namespace.",
        "operationId": "DeleteNamespaceByName",
        "parameters": [
          {
            "type": "string",
            "description": "the namespace of namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/NamespaceRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/nodes/{nodeName}/labels/{label}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "delete labels.",
        "operationId": "RemoveNodeLabel",
        "parameters": [
          {
            "type": "string",
            "description": "node name.",
            "name": "nodeName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "label.",
            "name": "label",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/resources": {
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "update a namespace rq.",
        "operationId": "SetNamespaceRQ",
        "parameters": [
          {
            "description": "The namespace resourcesQuota Request",
            "name": "resourcesQuota",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/ResourcesQuota"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/resources/labels": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "get labels of nodes.",
        "operationId": "GetLabelsOfNode",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "get labels of nodes.",
        "operationId": "UpdateLabels",
        "parameters": [
          {
            "description": "The namespace resourcesQuota Request",
            "name": "resourcesQuota",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "add labels to nodes.",
        "operationId": "AddLabels",
        "parameters": [
          {
            "description": "add labels to nodes",
            "name": "labelsRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LabelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/resources/{nodeName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resources"
        ],
        "summary": "get nodeInfo of nodes.",
        "operationId": "GetNodeByName",
        "parameters": [
          {
            "type": "string",
            "description": "nodeName.",
            "name": "nodeName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed namespace and namespace information.",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/roles": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "get roles.",
        "operationId": "GetRoles",
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "add role to db.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "description": "The role Request",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "add role to db.",
        "operationId": "AddRole",
        "parameters": [
          {
            "description": "The role Request",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/roles/id/{id}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "get roles.",
        "operationId": "GetRoleById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "role id.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/roles/name/{name}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "get roles.",
        "operationId": "GetRoleByName",
        "parameters": [
          {
            "type": "string",
            "description": "role name.",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Role and Role information.",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add namespace not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/sample": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Samples"
        ],
        "summary": "sample .",
        "operationId": "SampleGet",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "clusterName.",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Samples"
        ],
        "summary": "sample .",
        "operationId": "SamplePost",
        "parameters": [
          {
            "description": "The access Request",
            "name": "cluster",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed role and role information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to add role not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/storages": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a list of Storages.",
        "operationId": "GetAllStorage",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/PageStorageList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allStorages not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "update Storage.",
        "operationId": "UpdateStorage",
        "parameters": [
          {
            "description": "The Storage Request",
            "name": "storage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to put Storage not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a list of Storages.",
        "operationId": "AddStorage",
        "parameters": [
          {
            "description": "The Storage Request",
            "name": "storage",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allStorages not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/storages/id/{storageId}": {
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a Storage.",
        "operationId": "DeleteStorageById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of Storage",
            "name": "storageId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/storages/path": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a Storage.",
        "operationId": "GetStorageByPath",
        "parameters": [
          {
            "type": "string",
            "description": "the path of Storage",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storages"
        ],
        "summary": "Returns a Storage.",
        "operationId": "DeleteStorageByPath",
        "parameters": [
          {
            "type": "string",
            "description": "the id of Storage",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed Storage and Storage information.",
            "schema": {
              "$ref": "#/definitions/Storage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/PageUserList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Optional extended description in Markdown.",
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "The user Request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Optional extended description in Markdown.",
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "AddUser",
        "parameters": [
          {
            "description": "The user Request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get allUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/admin/{name}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "GetSAByName",
        "parameters": [
          {
            "type": "string",
            "description": "the name of SA",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/id/{userId}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "GetUserByUserId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteUserById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "the id of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/myUsers": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of users.",
        "operationId": "GetMyUsers",
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "url to get myUsers not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cc/v1/users/name/{userName}": {
      "get": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "GetUserByUserName",
        "parameters": [
          {
            "type": "string",
            "description": "the id of user",
            "name": "userName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Optional extended description in Markdown.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Returns a user.",
        "operationId": "DeleteUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "the id of user",
            "name": "userName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed User and User information.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthResult": {
      "type": "object",
      "properties": {
        "auth": {
          "description": "the expTime",
          "type": "string"
        },
        "id": {
          "description": "the token",
          "type": "string"
        },
        "retCode": {
          "description": "the appid",
          "type": "integer",
          "format": "int64"
        },
        "tok": {
          "description": "the auth",
          "type": "string"
        }
      }
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "the code of response",
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "description": "the message of error",
          "type": "string"
        },
        "msg": {
          "description": "the message of error",
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "clusterName": {
          "description": "the clusterName of group",
          "type": "string"
        },
        "departmentId": {
          "description": "the departmentId of group",
          "type": "integer",
          "format": "int64"
        },
        "departmentName": {
          "description": "the departmentId of group",
          "type": "string"
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupType": {
          "description": "the type of group",
          "type": "string"
        },
        "id": {
          "description": "the id of group",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the groupName",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks user",
          "type": "string"
        },
        "subsystemId": {
          "description": "the systemId of group",
          "type": "integer",
          "format": "int64"
        },
        "subsystemName": {
          "description": "the systemName of group",
          "type": "string"
        }
      }
    },
    "GroupNamespace": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the name of namespace",
          "type": "string"
        },
        "namespaceId": {
          "description": "the namespaceId",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        }
      }
    },
    "GroupNamespaceRes": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "description": "the groupId",
          "type": "string"
        },
        "groupType": {
          "description": "the groupId",
          "type": "string"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the name of namespace",
          "type": "string"
        },
        "namespaceId": {
          "description": "the namespaceId",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        }
      }
    },
    "GroupStorage": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "the path of storage",
          "type": "string"
        },
        "permissions": {
          "description": "the permissions of storage",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "storageId": {
          "description": "the storageId",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "thr type of storage",
          "type": "string"
        }
      }
    },
    "GroupStorageRes": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the groupId",
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "description": "the groupId",
          "type": "string"
        },
        "groupType": {
          "description": "the groupId",
          "type": "string"
        },
        "id": {
          "description": "the id of GroupStorage",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "the path of storage",
          "type": "string"
        },
        "permissions": {
          "description": "the permissions of storage",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "storageId": {
          "description": "the storageId",
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "description": "thr type of storage",
          "type": "string"
        }
      }
    },
    "IMSAlert": {
      "type": "object",
      "properties": {
        "alert_info": {
          "description": "the alertInfo",
          "type": "string"
        },
        "alert_ip": {
          "description": "the alertIp",
          "type": "string"
        },
        "alert_level": {
          "description": "the alertLevel",
          "type": "integer",
          "format": "int64"
        },
        "alert_obj": {
          "description": "the alertObj",
          "type": "string"
        },
        "alert_receiver": {
          "description": "the alertReceiver",
          "type": "string"
        },
        "alert_title": {
          "description": "the alertTitle",
          "type": "string"
        },
        "alert_way": {
          "description": "the alertWay",
          "type": "string"
        },
        "remark_info": {
          "description": "the remarkInfo",
          "type": "string"
        },
        "sub_system_id": {
          "description": "the subSystemId",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JobRequest": {
      "type": "object",
      "properties": {
        "alertLevel": {
          "description": "the alertLevel",
          "type": "string"
        },
        "alertReason": {
          "description": "the alertReason",
          "type": "string"
        },
        "endTime": {
          "description": "the endTime",
          "type": "string"
        },
        "jobName": {
          "description": "the jobName",
          "type": "string"
        },
        "jobNamespace": {
          "description": "the jobNamespace",
          "type": "string"
        },
        "jobStatus": {
          "description": "the jobStatus",
          "type": "string"
        },
        "receiver": {
          "description": "the receiver",
          "type": "string"
        },
        "startTime": {
          "description": "the startTime",
          "type": "string"
        },
        "trainingID": {
          "description": "the trainingID",
          "type": "string"
        },
        "userID": {
          "description": "the userID",
          "type": "string"
        }
      }
    },
    "KeyPairRequest": {
      "type": "object",
      "properties": {
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the name",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks",
          "type": "string"
        }
      }
    },
    "Keypair": {
      "type": "object",
      "properties": {
        "apiKey": {
          "description": "the apiKey",
          "type": "string"
        },
        "enableFlag": {
          "description": "the enableFlag",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the name",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks",
          "type": "string"
        },
        "secretKey": {
          "description": "the secretKey",
          "type": "string"
        }
      }
    },
    "LabelsRequest": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "the ip of node",
          "type": "string"
        },
        "lbBusType": {
          "description": "the lbBusType of nameSpace",
          "type": "string"
        },
        "lbGpuModel": {
          "description": "the lbGpuModel of nameSpace",
          "type": "string"
        },
        "namespace": {
          "description": "the nameSpace name",
          "type": "string"
        }
      }
    },
    "LabelsResponse": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "the ip of node",
          "type": "string"
        },
        "labels": {
          "description": "the labels of node",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "description": "Login Password",
          "type": "string"
        },
        "username": {
          "description": "Login Username",
          "type": "string"
        }
      }
    },
    "LoginResult": {
      "type": "object",
      "properties": {
        "actype": {
          "description": "the actype",
          "type": "integer",
          "format": "int64"
        },
        "code": {
          "description": "the token",
          "type": "integer",
          "format": "int64"
        },
        "dept": {
          "description": "the dept",
          "type": "string"
        },
        "desc": {
          "description": "the desc",
          "type": "string"
        },
        "email": {
          "description": "the email",
          "type": "string"
        },
        "id": {
          "description": "the userId",
          "type": "string"
        },
        "org": {
          "description": "the org",
          "type": "string"
        },
        "userName": {
          "description": "the userName",
          "type": "string"
        }
      }
    },
    "Namespace": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of namespace",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace name",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of namespace",
          "type": "string"
        }
      }
    },
    "NamespaceRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of namespace",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace name",
          "type": "string"
        },
        "platformNamespace": {
          "description": "the namespace platformNamespace",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of namespace",
          "type": "string"
        }
      }
    },
    "NamespaceResponse": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "hard": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "description": "the id of namespace",
          "type": "integer",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace name",
          "type": "string"
        },
        "platformNamespace": {
          "description": "the namespace platformNamespace",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of namespace",
          "type": "string"
        }
      }
    },
    "PageGroupList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageGroupNamespaceResList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupNamespaceRes"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageGroupStorageResList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupStorageRes"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageLabelsResponseList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelsResponse"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageNamespaceList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamespaceResponse"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageStorageList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Storage"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageUserGroupResList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupRes"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageUserList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "the enableFlag",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "method": {
          "description": "the name",
          "type": "string"
        },
        "name": {
          "description": "the name",
          "type": "string"
        },
        "operateTime": {
          "description": "the remarks",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks",
          "type": "string"
        },
        "url": {
          "description": "the remarks",
          "type": "string"
        }
      }
    },
    "ResourcesQuota": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "the cpu",
          "type": "string"
        },
        "gpu": {
          "description": "the gpu",
          "type": "string"
        },
        "memory": {
          "description": "the annotations of namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "description": "the id of GroupStorage",
          "type": "string"
        }
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "result": {
          "type": "object"
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of role",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the role",
          "type": "string"
        },
        "remarks": {
          "description": "the remarks of role",
          "type": "string"
        }
      }
    },
    "RolePermission": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "operateTime": {
          "description": "the remarks",
          "type": "string"
        },
        "permissionId": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        },
        "roleId": {
          "description": "the id",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SessionUser": {
      "type": "object",
      "properties": {
        "accountType": {
          "description": "the accountType",
          "type": "integer",
          "format": "int64"
        },
        "deptCode": {
          "description": "deptCode",
          "type": "string"
        },
        "email": {
          "description": "the email",
          "type": "string"
        },
        "expDate": {
          "description": "the expDate",
          "type": "string"
        },
        "isSuperadmin": {
          "description": "true or false",
          "type": "boolean"
        },
        "orgCode": {
          "description": "the orgCode",
          "type": "string"
        },
        "userId": {
          "description": "the userId",
          "type": "string"
        },
        "userName": {
          "description": "the userName",
          "type": "string"
        }
      }
    },
    "Storage": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of Storage",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "the path of storage",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks storage",
          "type": "string"
        },
        "type": {
          "description": "the type of storage",
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "gid": {
          "description": "the gid of user",
          "type": "integer",
          "format": "int64"
        },
        "guidCheck": {
          "description": "true or false",
          "type": "string"
        },
        "id": {
          "description": "the id of user",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the username",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks user",
          "type": "string"
        },
        "token": {
          "description": "the client_token of user",
          "type": "string"
        },
        "type": {
          "description": "the type of user, user or system",
          "type": "string"
        },
        "uid": {
          "description": "the uid of user",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserGroup": {
      "type": "object",
      "properties": {
        "GroupId": {
          "description": "the GroupId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "RoleId": {
          "description": "the roleId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "the id of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "userId": {
          "description": "the UserGroup",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserGroupRes": {
      "type": "object",
      "properties": {
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "description": "the GroupId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "groupName": {
          "description": "the groupId",
          "type": "string"
        },
        "groupType": {
          "description": "the groupId",
          "type": "string"
        },
        "id": {
          "description": "the id of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "remarks": {
          "description": "the remarks UserGroup",
          "type": "string"
        },
        "roleId": {
          "description": "the roleId of UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "roleName": {
          "description": "the roleName",
          "type": "string"
        },
        "userId": {
          "description": "the UserGroup",
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "description": "the username",
          "type": "string"
        }
      }
    },
    "UserList": {
      "type": "object",
      "properties": {
        "userList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "UserNamespaceAccessResponse": {
      "type": "object",
      "properties": {
        "accessible": {
          "description": "the accessible",
          "type": "boolean"
        },
        "namespace": {
          "description": "the namespace",
          "type": "string"
        },
        "username": {
          "description": "the username",
          "type": "string"
        }
      }
    },
    "UserNotebookAddressResponse": {
      "type": "object",
      "properties": {
        "notebookAddress": {
          "description": "the notebookAddress",
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "clusterName": {
          "description": "the clusterName of group",
          "type": "string"
        },
        "enableFlag": {
          "description": "Whether the data is valid",
          "type": "integer",
          "format": "int64"
        },
        "gid": {
          "description": "the gid of user",
          "type": "integer",
          "format": "int64"
        },
        "guidCheck": {
          "description": "true or false",
          "type": "string"
        },
        "id": {
          "description": "the id of user",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "the username",
          "type": "string"
        },
        "remarks": {
          "description": "the uid remarks user",
          "type": "string"
        },
        "token": {
          "description": "the client_token of user",
          "type": "string"
        },
        "type": {
          "description": "the type of user, user or system",
          "type": "string"
        },
        "uid": {
          "description": "the uid of user",
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}`))
}
