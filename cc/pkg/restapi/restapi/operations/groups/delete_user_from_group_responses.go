// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// DeleteUserFromGroupOKCode is the HTTP code returned for type DeleteUserFromGroupOK
const DeleteUserFromGroupOKCode int = 200

/*DeleteUserFromGroupOK Detailed Group and Group information.

swagger:response deleteUserFromGroupOK
*/
type DeleteUserFromGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserGroup `json:"body,omitempty"`
}

// NewDeleteUserFromGroupOK creates DeleteUserFromGroupOK with default headers values
func NewDeleteUserFromGroupOK() *DeleteUserFromGroupOK {

	return &DeleteUserFromGroupOK{}
}

// WithPayload adds the payload to the delete user from group o k response
func (o *DeleteUserFromGroupOK) WithPayload(payload *models.UserGroup) *DeleteUserFromGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user from group o k response
func (o *DeleteUserFromGroupOK) SetPayload(payload *models.UserGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserFromGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserFromGroupUnauthorizedCode is the HTTP code returned for type DeleteUserFromGroupUnauthorized
const DeleteUserFromGroupUnauthorizedCode int = 401

/*DeleteUserFromGroupUnauthorized Unauthorized

swagger:response deleteUserFromGroupUnauthorized
*/
type DeleteUserFromGroupUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteUserFromGroupUnauthorized creates DeleteUserFromGroupUnauthorized with default headers values
func NewDeleteUserFromGroupUnauthorized() *DeleteUserFromGroupUnauthorized {

	return &DeleteUserFromGroupUnauthorized{}
}

// WithPayload adds the payload to the delete user from group unauthorized response
func (o *DeleteUserFromGroupUnauthorized) WithPayload(payload *models.Error) *DeleteUserFromGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user from group unauthorized response
func (o *DeleteUserFromGroupUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserFromGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserFromGroupNotFoundCode is the HTTP code returned for type DeleteUserFromGroupNotFound
const DeleteUserFromGroupNotFoundCode int = 404

/*DeleteUserFromGroupNotFound Model with the given ID not found.

swagger:response deleteUserFromGroupNotFound
*/
type DeleteUserFromGroupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteUserFromGroupNotFound creates DeleteUserFromGroupNotFound with default headers values
func NewDeleteUserFromGroupNotFound() *DeleteUserFromGroupNotFound {

	return &DeleteUserFromGroupNotFound{}
}

// WithPayload adds the payload to the delete user from group not found response
func (o *DeleteUserFromGroupNotFound) WithPayload(payload *models.Error) *DeleteUserFromGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user from group not found response
func (o *DeleteUserFromGroupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserFromGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
