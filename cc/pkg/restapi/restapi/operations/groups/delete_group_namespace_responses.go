// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// DeleteGroupNamespaceOKCode is the HTTP code returned for type DeleteGroupNamespaceOK
const DeleteGroupNamespaceOKCode int = 200

/*DeleteGroupNamespaceOK Detailed GroupNamespace and GroupNamespace information.

swagger:response deleteGroupNamespaceOK
*/
type DeleteGroupNamespaceOK struct {

	/*
	  In: Body
	*/
	Payload *models.GroupNamespace `json:"body,omitempty"`
}

// NewDeleteGroupNamespaceOK creates DeleteGroupNamespaceOK with default headers values
func NewDeleteGroupNamespaceOK() *DeleteGroupNamespaceOK {

	return &DeleteGroupNamespaceOK{}
}

// WithPayload adds the payload to the delete group namespace o k response
func (o *DeleteGroupNamespaceOK) WithPayload(payload *models.GroupNamespace) *DeleteGroupNamespaceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete group namespace o k response
func (o *DeleteGroupNamespaceOK) SetPayload(payload *models.GroupNamespace) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteGroupNamespaceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteGroupNamespaceUnauthorizedCode is the HTTP code returned for type DeleteGroupNamespaceUnauthorized
const DeleteGroupNamespaceUnauthorizedCode int = 401

/*DeleteGroupNamespaceUnauthorized Unauthorized

swagger:response deleteGroupNamespaceUnauthorized
*/
type DeleteGroupNamespaceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteGroupNamespaceUnauthorized creates DeleteGroupNamespaceUnauthorized with default headers values
func NewDeleteGroupNamespaceUnauthorized() *DeleteGroupNamespaceUnauthorized {

	return &DeleteGroupNamespaceUnauthorized{}
}

// WithPayload adds the payload to the delete group namespace unauthorized response
func (o *DeleteGroupNamespaceUnauthorized) WithPayload(payload *models.Error) *DeleteGroupNamespaceUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete group namespace unauthorized response
func (o *DeleteGroupNamespaceUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteGroupNamespaceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteGroupNamespaceNotFoundCode is the HTTP code returned for type DeleteGroupNamespaceNotFound
const DeleteGroupNamespaceNotFoundCode int = 404

/*DeleteGroupNamespaceNotFound url to add GroupNamespace not found.

swagger:response deleteGroupNamespaceNotFound
*/
type DeleteGroupNamespaceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteGroupNamespaceNotFound creates DeleteGroupNamespaceNotFound with default headers values
func NewDeleteGroupNamespaceNotFound() *DeleteGroupNamespaceNotFound {

	return &DeleteGroupNamespaceNotFound{}
}

// WithPayload adds the payload to the delete group namespace not found response
func (o *DeleteGroupNamespaceNotFound) WithPayload(payload *models.Error) *DeleteGroupNamespaceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete group namespace not found response
func (o *DeleteGroupNamespaceNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteGroupNamespaceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
