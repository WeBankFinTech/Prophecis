// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// AddStorageToGroupOKCode is the HTTP code returned for type AddStorageToGroupOK
const AddStorageToGroupOKCode int = 200

/*AddStorageToGroupOK Detailed GroupStorage and GroupStorage information.

swagger:response addStorageToGroupOK
*/
type AddStorageToGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.GroupStorage `json:"body,omitempty"`
}

// NewAddStorageToGroupOK creates AddStorageToGroupOK with default headers values
func NewAddStorageToGroupOK() *AddStorageToGroupOK {

	return &AddStorageToGroupOK{}
}

// WithPayload adds the payload to the add storage to group o k response
func (o *AddStorageToGroupOK) WithPayload(payload *models.GroupStorage) *AddStorageToGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add storage to group o k response
func (o *AddStorageToGroupOK) SetPayload(payload *models.GroupStorage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddStorageToGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddStorageToGroupUnauthorizedCode is the HTTP code returned for type AddStorageToGroupUnauthorized
const AddStorageToGroupUnauthorizedCode int = 401

/*AddStorageToGroupUnauthorized Unauthorized

swagger:response addStorageToGroupUnauthorized
*/
type AddStorageToGroupUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddStorageToGroupUnauthorized creates AddStorageToGroupUnauthorized with default headers values
func NewAddStorageToGroupUnauthorized() *AddStorageToGroupUnauthorized {

	return &AddStorageToGroupUnauthorized{}
}

// WithPayload adds the payload to the add storage to group unauthorized response
func (o *AddStorageToGroupUnauthorized) WithPayload(payload *models.Error) *AddStorageToGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add storage to group unauthorized response
func (o *AddStorageToGroupUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddStorageToGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddStorageToGroupNotFoundCode is the HTTP code returned for type AddStorageToGroupNotFound
const AddStorageToGroupNotFoundCode int = 404

/*AddStorageToGroupNotFound url to add GroupStorage not found.

swagger:response addStorageToGroupNotFound
*/
type AddStorageToGroupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddStorageToGroupNotFound creates AddStorageToGroupNotFound with default headers values
func NewAddStorageToGroupNotFound() *AddStorageToGroupNotFound {

	return &AddStorageToGroupNotFound{}
}

// WithPayload adds the payload to the add storage to group not found response
func (o *AddStorageToGroupNotFound) WithPayload(payload *models.Error) *AddStorageToGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add storage to group not found response
func (o *AddStorageToGroupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddStorageToGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
