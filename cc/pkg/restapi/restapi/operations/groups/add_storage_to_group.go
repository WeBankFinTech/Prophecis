// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddStorageToGroupHandlerFunc turns a function with the right signature into a add storage to group handler
type AddStorageToGroupHandlerFunc func(AddStorageToGroupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddStorageToGroupHandlerFunc) Handle(params AddStorageToGroupParams) middleware.Responder {
	return fn(params)
}

// AddStorageToGroupHandler interface for that can handle valid add storage to group params
type AddStorageToGroupHandler interface {
	Handle(AddStorageToGroupParams) middleware.Responder
}

// NewAddStorageToGroup creates a new http.Handler for the add storage to group operation
func NewAddStorageToGroup(ctx *middleware.Context, handler AddStorageToGroupHandler) *AddStorageToGroup {
	return &AddStorageToGroup{Context: ctx, Handler: handler}
}

/*AddStorageToGroup swagger:route POST /cc/v1/groups/storages Groups addStorageToGroup

add storage to group.

Optional extended description in Markdown.

*/
type AddStorageToGroup struct {
	Context *middleware.Context
	Handler AddStorageToGroupHandler
}

func (o *AddStorageToGroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddStorageToGroupParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
