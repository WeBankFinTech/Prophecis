// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// GetCurrentUserNamespaceWithRoleOKCode is the HTTP code returned for type GetCurrentUserNamespaceWithRoleOK
const GetCurrentUserNamespaceWithRoleOKCode int = 200

/*GetCurrentUserNamespaceWithRoleOK auth by roleId and clusterName.

swagger:response getCurrentUserNamespaceWithRoleOK
*/
type GetCurrentUserNamespaceWithRoleOK struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewGetCurrentUserNamespaceWithRoleOK creates GetCurrentUserNamespaceWithRoleOK with default headers values
func NewGetCurrentUserNamespaceWithRoleOK() *GetCurrentUserNamespaceWithRoleOK {

	return &GetCurrentUserNamespaceWithRoleOK{}
}

// WithPayload adds the payload to the get current user namespace with role o k response
func (o *GetCurrentUserNamespaceWithRoleOK) WithPayload(payload *models.Result) *GetCurrentUserNamespaceWithRoleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current user namespace with role o k response
func (o *GetCurrentUserNamespaceWithRoleOK) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentUserNamespaceWithRoleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCurrentUserNamespaceWithRoleUnauthorizedCode is the HTTP code returned for type GetCurrentUserNamespaceWithRoleUnauthorized
const GetCurrentUserNamespaceWithRoleUnauthorizedCode int = 401

/*GetCurrentUserNamespaceWithRoleUnauthorized Unauthorized

swagger:response getCurrentUserNamespaceWithRoleUnauthorized
*/
type GetCurrentUserNamespaceWithRoleUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCurrentUserNamespaceWithRoleUnauthorized creates GetCurrentUserNamespaceWithRoleUnauthorized with default headers values
func NewGetCurrentUserNamespaceWithRoleUnauthorized() *GetCurrentUserNamespaceWithRoleUnauthorized {

	return &GetCurrentUserNamespaceWithRoleUnauthorized{}
}

// WithPayload adds the payload to the get current user namespace with role unauthorized response
func (o *GetCurrentUserNamespaceWithRoleUnauthorized) WithPayload(payload *models.Error) *GetCurrentUserNamespaceWithRoleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current user namespace with role unauthorized response
func (o *GetCurrentUserNamespaceWithRoleUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentUserNamespaceWithRoleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCurrentUserNamespaceWithRoleNotFoundCode is the HTTP code returned for type GetCurrentUserNamespaceWithRoleNotFound
const GetCurrentUserNamespaceWithRoleNotFoundCode int = 404

/*GetCurrentUserNamespaceWithRoleNotFound url to add namespace not found.

swagger:response getCurrentUserNamespaceWithRoleNotFound
*/
type GetCurrentUserNamespaceWithRoleNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCurrentUserNamespaceWithRoleNotFound creates GetCurrentUserNamespaceWithRoleNotFound with default headers values
func NewGetCurrentUserNamespaceWithRoleNotFound() *GetCurrentUserNamespaceWithRoleNotFound {

	return &GetCurrentUserNamespaceWithRoleNotFound{}
}

// WithPayload adds the payload to the get current user namespace with role not found response
func (o *GetCurrentUserNamespaceWithRoleNotFound) WithPayload(payload *models.Error) *GetCurrentUserNamespaceWithRoleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get current user namespace with role not found response
func (o *GetCurrentUserNamespaceWithRoleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCurrentUserNamespaceWithRoleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
