// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// GetAllGroupStorageByStorageIDOKCode is the HTTP code returned for type GetAllGroupStorageByStorageIDOK
const GetAllGroupStorageByStorageIDOKCode int = 200

/*GetAllGroupStorageByStorageIDOK Detailed groupStorage and groupStorage information.

swagger:response getAllGroupStorageByStorageIdOK
*/
type GetAllGroupStorageByStorageIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.GroupStorage `json:"body,omitempty"`
}

// NewGetAllGroupStorageByStorageIDOK creates GetAllGroupStorageByStorageIDOK with default headers values
func NewGetAllGroupStorageByStorageIDOK() *GetAllGroupStorageByStorageIDOK {

	return &GetAllGroupStorageByStorageIDOK{}
}

// WithPayload adds the payload to the get all group storage by storage Id o k response
func (o *GetAllGroupStorageByStorageIDOK) WithPayload(payload *models.GroupStorage) *GetAllGroupStorageByStorageIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all group storage by storage Id o k response
func (o *GetAllGroupStorageByStorageIDOK) SetPayload(payload *models.GroupStorage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllGroupStorageByStorageIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllGroupStorageByStorageIDUnauthorizedCode is the HTTP code returned for type GetAllGroupStorageByStorageIDUnauthorized
const GetAllGroupStorageByStorageIDUnauthorizedCode int = 401

/*GetAllGroupStorageByStorageIDUnauthorized Unauthorized

swagger:response getAllGroupStorageByStorageIdUnauthorized
*/
type GetAllGroupStorageByStorageIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllGroupStorageByStorageIDUnauthorized creates GetAllGroupStorageByStorageIDUnauthorized with default headers values
func NewGetAllGroupStorageByStorageIDUnauthorized() *GetAllGroupStorageByStorageIDUnauthorized {

	return &GetAllGroupStorageByStorageIDUnauthorized{}
}

// WithPayload adds the payload to the get all group storage by storage Id unauthorized response
func (o *GetAllGroupStorageByStorageIDUnauthorized) WithPayload(payload *models.Error) *GetAllGroupStorageByStorageIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all group storage by storage Id unauthorized response
func (o *GetAllGroupStorageByStorageIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllGroupStorageByStorageIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllGroupStorageByStorageIDNotFoundCode is the HTTP code returned for type GetAllGroupStorageByStorageIDNotFound
const GetAllGroupStorageByStorageIDNotFoundCode int = 404

/*GetAllGroupStorageByStorageIDNotFound Model with the given ID not found.

swagger:response getAllGroupStorageByStorageIdNotFound
*/
type GetAllGroupStorageByStorageIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllGroupStorageByStorageIDNotFound creates GetAllGroupStorageByStorageIDNotFound with default headers values
func NewGetAllGroupStorageByStorageIDNotFound() *GetAllGroupStorageByStorageIDNotFound {

	return &GetAllGroupStorageByStorageIDNotFound{}
}

// WithPayload adds the payload to the get all group storage by storage Id not found response
func (o *GetAllGroupStorageByStorageIDNotFound) WithPayload(payload *models.Error) *GetAllGroupStorageByStorageIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all group storage by storage Id not found response
func (o *GetAllGroupStorageByStorageIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllGroupStorageByStorageIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
