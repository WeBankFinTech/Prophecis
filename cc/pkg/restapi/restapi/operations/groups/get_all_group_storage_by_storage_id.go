// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllGroupStorageByStorageIDHandlerFunc turns a function with the right signature into a get all group storage by storage Id handler
type GetAllGroupStorageByStorageIDHandlerFunc func(GetAllGroupStorageByStorageIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllGroupStorageByStorageIDHandlerFunc) Handle(params GetAllGroupStorageByStorageIDParams) middleware.Responder {
	return fn(params)
}

// GetAllGroupStorageByStorageIDHandler interface for that can handle valid get all group storage by storage Id params
type GetAllGroupStorageByStorageIDHandler interface {
	Handle(GetAllGroupStorageByStorageIDParams) middleware.Responder
}

// NewGetAllGroupStorageByStorageID creates a new http.Handler for the get all group storage by storage Id operation
func NewGetAllGroupStorageByStorageID(ctx *middleware.Context, handler GetAllGroupStorageByStorageIDHandler) *GetAllGroupStorageByStorageID {
	return &GetAllGroupStorageByStorageID{Context: ctx, Handler: handler}
}

/*GetAllGroupStorageByStorageID swagger:route GET /cc/v1/groups/groupStorage/storage/{storageId} Groups getAllGroupStorageByStorageId

Returns a GroupStorage.

Optional extended description in Markdown.

*/
type GetAllGroupStorageByStorageID struct {
	Context *middleware.Context
	Handler GetAllGroupStorageByStorageIDHandler
}

func (o *GetAllGroupStorageByStorageID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllGroupStorageByStorageIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
