// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCurrentUserNamespaceWithRoleHandlerFunc turns a function with the right signature into a get current user namespace with role handler
type GetCurrentUserNamespaceWithRoleHandlerFunc func(GetCurrentUserNamespaceWithRoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCurrentUserNamespaceWithRoleHandlerFunc) Handle(params GetCurrentUserNamespaceWithRoleParams) middleware.Responder {
	return fn(params)
}

// GetCurrentUserNamespaceWithRoleHandler interface for that can handle valid get current user namespace with role params
type GetCurrentUserNamespaceWithRoleHandler interface {
	Handle(GetCurrentUserNamespaceWithRoleParams) middleware.Responder
}

// NewGetCurrentUserNamespaceWithRole creates a new http.Handler for the get current user namespace with role operation
func NewGetCurrentUserNamespaceWithRole(ctx *middleware.Context, handler GetCurrentUserNamespaceWithRoleHandler) *GetCurrentUserNamespaceWithRole {
	return &GetCurrentUserNamespaceWithRole{Context: ctx, Handler: handler}
}

/*GetCurrentUserNamespaceWithRole swagger:route GET /cc/v1/groups/users/roles/{roleId}/namespaces/clusterName/{clusterName} Groups getCurrentUserNamespaceWithRole

auth by roleId and clusterName .

Optional extended description in Markdown.

*/
type GetCurrentUserNamespaceWithRole struct {
	Context *middleware.Context
	Handler GetCurrentUserNamespaceWithRoleHandler
}

func (o *GetCurrentUserNamespaceWithRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCurrentUserNamespaceWithRoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
