// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// AddNamespaceToGroupOKCode is the HTTP code returned for type AddNamespaceToGroupOK
const AddNamespaceToGroupOKCode int = 200

/*AddNamespaceToGroupOK Detailed GroupNamespace and GroupNamespace information.

swagger:response addNamespaceToGroupOK
*/
type AddNamespaceToGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.GroupNamespace `json:"body,omitempty"`
}

// NewAddNamespaceToGroupOK creates AddNamespaceToGroupOK with default headers values
func NewAddNamespaceToGroupOK() *AddNamespaceToGroupOK {

	return &AddNamespaceToGroupOK{}
}

// WithPayload adds the payload to the add namespace to group o k response
func (o *AddNamespaceToGroupOK) WithPayload(payload *models.GroupNamespace) *AddNamespaceToGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add namespace to group o k response
func (o *AddNamespaceToGroupOK) SetPayload(payload *models.GroupNamespace) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddNamespaceToGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddNamespaceToGroupUnauthorizedCode is the HTTP code returned for type AddNamespaceToGroupUnauthorized
const AddNamespaceToGroupUnauthorizedCode int = 401

/*AddNamespaceToGroupUnauthorized Unauthorized

swagger:response addNamespaceToGroupUnauthorized
*/
type AddNamespaceToGroupUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddNamespaceToGroupUnauthorized creates AddNamespaceToGroupUnauthorized with default headers values
func NewAddNamespaceToGroupUnauthorized() *AddNamespaceToGroupUnauthorized {

	return &AddNamespaceToGroupUnauthorized{}
}

// WithPayload adds the payload to the add namespace to group unauthorized response
func (o *AddNamespaceToGroupUnauthorized) WithPayload(payload *models.Error) *AddNamespaceToGroupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add namespace to group unauthorized response
func (o *AddNamespaceToGroupUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddNamespaceToGroupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddNamespaceToGroupNotFoundCode is the HTTP code returned for type AddNamespaceToGroupNotFound
const AddNamespaceToGroupNotFoundCode int = 404

/*AddNamespaceToGroupNotFound url to add GroupNamespace not found.

swagger:response addNamespaceToGroupNotFound
*/
type AddNamespaceToGroupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddNamespaceToGroupNotFound creates AddNamespaceToGroupNotFound with default headers values
func NewAddNamespaceToGroupNotFound() *AddNamespaceToGroupNotFound {

	return &AddNamespaceToGroupNotFound{}
}

// WithPayload adds the payload to the add namespace to group not found response
func (o *AddNamespaceToGroupNotFound) WithPayload(payload *models.Error) *AddNamespaceToGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add namespace to group not found response
func (o *AddNamespaceToGroupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddNamespaceToGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
