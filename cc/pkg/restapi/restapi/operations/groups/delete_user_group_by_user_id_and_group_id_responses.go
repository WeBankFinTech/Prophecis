// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// DeleteUserGroupByUserIDAndGroupIDOKCode is the HTTP code returned for type DeleteUserGroupByUserIDAndGroupIDOK
const DeleteUserGroupByUserIDAndGroupIDOKCode int = 200

/*DeleteUserGroupByUserIDAndGroupIDOK Detailed userGroup and userGroup information.

swagger:response deleteUserGroupByUserIdAndGroupIdOK
*/
type DeleteUserGroupByUserIDAndGroupIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserGroup `json:"body,omitempty"`
}

// NewDeleteUserGroupByUserIDAndGroupIDOK creates DeleteUserGroupByUserIDAndGroupIDOK with default headers values
func NewDeleteUserGroupByUserIDAndGroupIDOK() *DeleteUserGroupByUserIDAndGroupIDOK {

	return &DeleteUserGroupByUserIDAndGroupIDOK{}
}

// WithPayload adds the payload to the delete user group by user Id and group Id o k response
func (o *DeleteUserGroupByUserIDAndGroupIDOK) WithPayload(payload *models.UserGroup) *DeleteUserGroupByUserIDAndGroupIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group by user Id and group Id o k response
func (o *DeleteUserGroupByUserIDAndGroupIDOK) SetPayload(payload *models.UserGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupByUserIDAndGroupIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserGroupByUserIDAndGroupIDUnauthorizedCode is the HTTP code returned for type DeleteUserGroupByUserIDAndGroupIDUnauthorized
const DeleteUserGroupByUserIDAndGroupIDUnauthorizedCode int = 401

/*DeleteUserGroupByUserIDAndGroupIDUnauthorized Unauthorized

swagger:response deleteUserGroupByUserIdAndGroupIdUnauthorized
*/
type DeleteUserGroupByUserIDAndGroupIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteUserGroupByUserIDAndGroupIDUnauthorized creates DeleteUserGroupByUserIDAndGroupIDUnauthorized with default headers values
func NewDeleteUserGroupByUserIDAndGroupIDUnauthorized() *DeleteUserGroupByUserIDAndGroupIDUnauthorized {

	return &DeleteUserGroupByUserIDAndGroupIDUnauthorized{}
}

// WithPayload adds the payload to the delete user group by user Id and group Id unauthorized response
func (o *DeleteUserGroupByUserIDAndGroupIDUnauthorized) WithPayload(payload *models.Error) *DeleteUserGroupByUserIDAndGroupIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group by user Id and group Id unauthorized response
func (o *DeleteUserGroupByUserIDAndGroupIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupByUserIDAndGroupIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserGroupByUserIDAndGroupIDNotFoundCode is the HTTP code returned for type DeleteUserGroupByUserIDAndGroupIDNotFound
const DeleteUserGroupByUserIDAndGroupIDNotFoundCode int = 404

/*DeleteUserGroupByUserIDAndGroupIDNotFound Model with the given ID not found.

swagger:response deleteUserGroupByUserIdAndGroupIdNotFound
*/
type DeleteUserGroupByUserIDAndGroupIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteUserGroupByUserIDAndGroupIDNotFound creates DeleteUserGroupByUserIDAndGroupIDNotFound with default headers values
func NewDeleteUserGroupByUserIDAndGroupIDNotFound() *DeleteUserGroupByUserIDAndGroupIDNotFound {

	return &DeleteUserGroupByUserIDAndGroupIDNotFound{}
}

// WithPayload adds the payload to the delete user group by user Id and group Id not found response
func (o *DeleteUserGroupByUserIDAndGroupIDNotFound) WithPayload(payload *models.Error) *DeleteUserGroupByUserIDAndGroupIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user group by user Id and group Id not found response
func (o *DeleteUserGroupByUserIDAndGroupIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserGroupByUserIDAndGroupIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
