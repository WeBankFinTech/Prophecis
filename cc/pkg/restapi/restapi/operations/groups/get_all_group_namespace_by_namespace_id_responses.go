// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// GetAllGroupNamespaceByNamespaceIDOKCode is the HTTP code returned for type GetAllGroupNamespaceByNamespaceIDOK
const GetAllGroupNamespaceByNamespaceIDOKCode int = 200

/*GetAllGroupNamespaceByNamespaceIDOK Detailed GroupNamespace and GroupNamespace information.

swagger:response getAllGroupNamespaceByNamespaceIdOK
*/
type GetAllGroupNamespaceByNamespaceIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.GroupNamespace `json:"body,omitempty"`
}

// NewGetAllGroupNamespaceByNamespaceIDOK creates GetAllGroupNamespaceByNamespaceIDOK with default headers values
func NewGetAllGroupNamespaceByNamespaceIDOK() *GetAllGroupNamespaceByNamespaceIDOK {

	return &GetAllGroupNamespaceByNamespaceIDOK{}
}

// WithPayload adds the payload to the get all group namespace by namespace Id o k response
func (o *GetAllGroupNamespaceByNamespaceIDOK) WithPayload(payload *models.GroupNamespace) *GetAllGroupNamespaceByNamespaceIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all group namespace by namespace Id o k response
func (o *GetAllGroupNamespaceByNamespaceIDOK) SetPayload(payload *models.GroupNamespace) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllGroupNamespaceByNamespaceIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllGroupNamespaceByNamespaceIDUnauthorizedCode is the HTTP code returned for type GetAllGroupNamespaceByNamespaceIDUnauthorized
const GetAllGroupNamespaceByNamespaceIDUnauthorizedCode int = 401

/*GetAllGroupNamespaceByNamespaceIDUnauthorized Unauthorized

swagger:response getAllGroupNamespaceByNamespaceIdUnauthorized
*/
type GetAllGroupNamespaceByNamespaceIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllGroupNamespaceByNamespaceIDUnauthorized creates GetAllGroupNamespaceByNamespaceIDUnauthorized with default headers values
func NewGetAllGroupNamespaceByNamespaceIDUnauthorized() *GetAllGroupNamespaceByNamespaceIDUnauthorized {

	return &GetAllGroupNamespaceByNamespaceIDUnauthorized{}
}

// WithPayload adds the payload to the get all group namespace by namespace Id unauthorized response
func (o *GetAllGroupNamespaceByNamespaceIDUnauthorized) WithPayload(payload *models.Error) *GetAllGroupNamespaceByNamespaceIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all group namespace by namespace Id unauthorized response
func (o *GetAllGroupNamespaceByNamespaceIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllGroupNamespaceByNamespaceIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllGroupNamespaceByNamespaceIDNotFoundCode is the HTTP code returned for type GetAllGroupNamespaceByNamespaceIDNotFound
const GetAllGroupNamespaceByNamespaceIDNotFoundCode int = 404

/*GetAllGroupNamespaceByNamespaceIDNotFound url to add GroupNamespace not found.

swagger:response getAllGroupNamespaceByNamespaceIdNotFound
*/
type GetAllGroupNamespaceByNamespaceIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllGroupNamespaceByNamespaceIDNotFound creates GetAllGroupNamespaceByNamespaceIDNotFound with default headers values
func NewGetAllGroupNamespaceByNamespaceIDNotFound() *GetAllGroupNamespaceByNamespaceIDNotFound {

	return &GetAllGroupNamespaceByNamespaceIDNotFound{}
}

// WithPayload adds the payload to the get all group namespace by namespace Id not found response
func (o *GetAllGroupNamespaceByNamespaceIDNotFound) WithPayload(payload *models.Error) *GetAllGroupNamespaceByNamespaceIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all group namespace by namespace Id not found response
func (o *GetAllGroupNamespaceByNamespaceIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllGroupNamespaceByNamespaceIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
