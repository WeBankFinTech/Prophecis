// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// GetUserGroupByUserIDAndGroupIDOKCode is the HTTP code returned for type GetUserGroupByUserIDAndGroupIDOK
const GetUserGroupByUserIDAndGroupIDOKCode int = 200

/*GetUserGroupByUserIDAndGroupIDOK Detailed userGroup and userGroup information.

swagger:response getUserGroupByUserIdAndGroupIdOK
*/
type GetUserGroupByUserIDAndGroupIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserGroup `json:"body,omitempty"`
}

// NewGetUserGroupByUserIDAndGroupIDOK creates GetUserGroupByUserIDAndGroupIDOK with default headers values
func NewGetUserGroupByUserIDAndGroupIDOK() *GetUserGroupByUserIDAndGroupIDOK {

	return &GetUserGroupByUserIDAndGroupIDOK{}
}

// WithPayload adds the payload to the get user group by user Id and group Id o k response
func (o *GetUserGroupByUserIDAndGroupIDOK) WithPayload(payload *models.UserGroup) *GetUserGroupByUserIDAndGroupIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group by user Id and group Id o k response
func (o *GetUserGroupByUserIDAndGroupIDOK) SetPayload(payload *models.UserGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupByUserIDAndGroupIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupByUserIDAndGroupIDUnauthorizedCode is the HTTP code returned for type GetUserGroupByUserIDAndGroupIDUnauthorized
const GetUserGroupByUserIDAndGroupIDUnauthorizedCode int = 401

/*GetUserGroupByUserIDAndGroupIDUnauthorized Unauthorized

swagger:response getUserGroupByUserIdAndGroupIdUnauthorized
*/
type GetUserGroupByUserIDAndGroupIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserGroupByUserIDAndGroupIDUnauthorized creates GetUserGroupByUserIDAndGroupIDUnauthorized with default headers values
func NewGetUserGroupByUserIDAndGroupIDUnauthorized() *GetUserGroupByUserIDAndGroupIDUnauthorized {

	return &GetUserGroupByUserIDAndGroupIDUnauthorized{}
}

// WithPayload adds the payload to the get user group by user Id and group Id unauthorized response
func (o *GetUserGroupByUserIDAndGroupIDUnauthorized) WithPayload(payload *models.Error) *GetUserGroupByUserIDAndGroupIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group by user Id and group Id unauthorized response
func (o *GetUserGroupByUserIDAndGroupIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupByUserIDAndGroupIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserGroupByUserIDAndGroupIDNotFoundCode is the HTTP code returned for type GetUserGroupByUserIDAndGroupIDNotFound
const GetUserGroupByUserIDAndGroupIDNotFoundCode int = 404

/*GetUserGroupByUserIDAndGroupIDNotFound Model with the given ID not found.

swagger:response getUserGroupByUserIdAndGroupIdNotFound
*/
type GetUserGroupByUserIDAndGroupIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserGroupByUserIDAndGroupIDNotFound creates GetUserGroupByUserIDAndGroupIDNotFound with default headers values
func NewGetUserGroupByUserIDAndGroupIDNotFound() *GetUserGroupByUserIDAndGroupIDNotFound {

	return &GetUserGroupByUserIDAndGroupIDNotFound{}
}

// WithPayload adds the payload to the get user group by user Id and group Id not found response
func (o *GetUserGroupByUserIDAndGroupIDNotFound) WithPayload(payload *models.Error) *GetUserGroupByUserIDAndGroupIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user group by user Id and group Id not found response
func (o *GetUserGroupByUserIDAndGroupIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserGroupByUserIDAndGroupIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
