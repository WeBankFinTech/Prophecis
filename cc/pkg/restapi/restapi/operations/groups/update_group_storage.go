// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateGroupStorageHandlerFunc turns a function with the right signature into a update group storage handler
type UpdateGroupStorageHandlerFunc func(UpdateGroupStorageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateGroupStorageHandlerFunc) Handle(params UpdateGroupStorageParams) middleware.Responder {
	return fn(params)
}

// UpdateGroupStorageHandler interface for that can handle valid update group storage params
type UpdateGroupStorageHandler interface {
	Handle(UpdateGroupStorageParams) middleware.Responder
}

// NewUpdateGroupStorage creates a new http.Handler for the update group storage operation
func NewUpdateGroupStorage(ctx *middleware.Context, handler UpdateGroupStorageHandler) *UpdateGroupStorage {
	return &UpdateGroupStorage{Context: ctx, Handler: handler}
}

/*UpdateGroupStorage swagger:route PUT /cc/v1/groups/storages Groups updateGroupStorage

Returns a list of groups.

Optional extended description in Markdown.

*/
type UpdateGroupStorage struct {
	Context *middleware.Context
	Handler UpdateGroupStorageHandler
}

func (o *UpdateGroupStorage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateGroupStorageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
