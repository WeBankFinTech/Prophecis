// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UMLoginHandlerFunc turns a function with the right signature into a u m login handler
type UMLoginHandlerFunc func(UMLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UMLoginHandlerFunc) Handle(params UMLoginParams) middleware.Responder {
	return fn(params)
}

// UMLoginHandler interface for that can handle valid u m login params
type UMLoginHandler interface {
	Handle(UMLoginParams) middleware.Responder
}

// NewUMLogin creates a new http.Handler for the u m login operation
func NewUMLogin(ctx *middleware.Context, handler UMLoginHandler) *UMLogin {
	return &UMLogin{Context: ctx, Handler: handler}
}

/*UMLogin swagger:route GET /cc/v1/login Logins uMLogin

login .

Optional extended description in Markdown.

*/
type UMLogin struct {
	Context *middleware.Context
	Handler UMLoginHandler
}

func (o *UMLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUMLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
