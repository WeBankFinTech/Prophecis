// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCheckResourceParams creates a new CheckResourceParams object
// no default values defined in spec.
func NewCheckResourceParams() CheckResourceParams {

	return CheckResourceParams{}
}

// CheckResourceParams contains all the bound params for the check resource operation
// typically these are obtained from a http.Request
//
// swagger:parameters checkResource
type CheckResourceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Cpu.
	  Required: true
	  In: query
	*/
	CPU string
	/*Gpu.
	  Required: true
	  In: query
	*/
	Gpu string
	/*Memory.
	  Required: true
	  In: query
	*/
	Memory string
	/*namespace.
	  Required: true
	  In: path
	*/
	Namespace string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCheckResourceParams() beforehand.
func (o *CheckResourceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCPU, qhkCPU, _ := qs.GetOK("cpu")
	if err := o.bindCPU(qCPU, qhkCPU, route.Formats); err != nil {
		res = append(res, err)
	}

	qGpu, qhkGpu, _ := qs.GetOK("gpu")
	if err := o.bindGpu(qGpu, qhkGpu, route.Formats); err != nil {
		res = append(res, err)
	}

	qMemory, qhkMemory, _ := qs.GetOK("memory")
	if err := o.bindMemory(qMemory, qhkMemory, route.Formats); err != nil {
		res = append(res, err)
	}

	rNamespace, rhkNamespace, _ := route.Params.GetOK("namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCPU binds and validates parameter CPU from query.
func (o *CheckResourceParams) bindCPU(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("cpu", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("cpu", "query", raw); err != nil {
		return err
	}

	o.CPU = raw

	return nil
}

// bindGpu binds and validates parameter Gpu from query.
func (o *CheckResourceParams) bindGpu(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("gpu", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("gpu", "query", raw); err != nil {
		return err
	}

	o.Gpu = raw

	return nil
}

// bindMemory binds and validates parameter Memory from query.
func (o *CheckResourceParams) bindMemory(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("memory", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("memory", "query", raw); err != nil {
		return err
	}

	o.Memory = raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from path.
func (o *CheckResourceParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Namespace = raw

	return nil
}
