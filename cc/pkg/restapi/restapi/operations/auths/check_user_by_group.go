// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CheckUserByGroupHandlerFunc turns a function with the right signature into a check user by group handler
type CheckUserByGroupHandlerFunc func(CheckUserByGroupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckUserByGroupHandlerFunc) Handle(params CheckUserByGroupParams) middleware.Responder {
	return fn(params)
}

// CheckUserByGroupHandler interface for that can handle valid check user by group params
type CheckUserByGroupHandler interface {
	Handle(CheckUserByGroupParams) middleware.Responder
}

// NewCheckUserByGroup creates a new http.Handler for the check user by group operation
func NewCheckUserByGroup(ctx *middleware.Context, handler CheckUserByGroupHandler) *CheckUserByGroup {
	return &CheckUserByGroup{Context: ctx, Handler: handler}
}

/*CheckUserByGroup swagger:route GET /cc/v1/auth/access/group/{userId} Auths checkUserByGroup

auth group by userId .

Optional extended description in Markdown.

*/
type CheckUserByGroup struct {
	Context *middleware.Context
	Handler CheckUserByGroupHandler
}

func (o *CheckUserByGroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckUserByGroupParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
