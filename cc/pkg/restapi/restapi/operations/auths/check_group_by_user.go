// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CheckGroupByUserHandlerFunc turns a function with the right signature into a check group by user handler
type CheckGroupByUserHandlerFunc func(CheckGroupByUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckGroupByUserHandlerFunc) Handle(params CheckGroupByUserParams) middleware.Responder {
	return fn(params)
}

// CheckGroupByUserHandler interface for that can handle valid check group by user params
type CheckGroupByUserHandler interface {
	Handle(CheckGroupByUserParams) middleware.Responder
}

// NewCheckGroupByUser creates a new http.Handler for the check group by user operation
func NewCheckGroupByUser(ctx *middleware.Context, handler CheckGroupByUserHandler) *CheckGroupByUser {
	return &CheckGroupByUser{Context: ctx, Handler: handler}
}

/*CheckGroupByUser swagger:route GET /cc/v1/auth/access/group/{userId} Auths checkGroupByUser

auth group by userId .

Optional extended description in Markdown.

*/
type CheckGroupByUser struct {
	Context *middleware.Context
	Handler CheckGroupByUserHandler
}

func (o *CheckGroupByUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckGroupByUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
