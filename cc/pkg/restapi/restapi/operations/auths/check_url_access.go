// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CheckURLAccessHandlerFunc turns a function with the right signature into a check URL access handler
type CheckURLAccessHandlerFunc func(CheckURLAccessParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckURLAccessHandlerFunc) Handle(params CheckURLAccessParams) middleware.Responder {
	return fn(params)
}

// CheckURLAccessHandler interface for that can handle valid check URL access params
type CheckURLAccessHandler interface {
	Handle(CheckURLAccessParams) middleware.Responder
}

// NewCheckURLAccess creates a new http.Handler for the check URL access operation
func NewCheckURLAccess(ctx *middleware.Context, handler CheckURLAccessHandler) *CheckURLAccess {
	return &CheckURLAccess{Context: ctx, Handler: handler}
}

/*CheckURLAccess swagger:route GET /cc/v1/auth/access Auths checkUrlAccess

Use in Model Perditct， Auth If User Access to this service

Use in Model Perditct， Auth If User Access to this service

*/
type CheckURLAccess struct {
	Context *middleware.Context
	Handler CheckURLAccessHandler
}

func (o *CheckURLAccess) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckURLAccessParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
