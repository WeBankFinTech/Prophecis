// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CheckCurrentUserNamespacedNotebookHandlerFunc turns a function with the right signature into a check current user namespaced notebook handler
type CheckCurrentUserNamespacedNotebookHandlerFunc func(CheckCurrentUserNamespacedNotebookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckCurrentUserNamespacedNotebookHandlerFunc) Handle(params CheckCurrentUserNamespacedNotebookParams) middleware.Responder {
	return fn(params)
}

// CheckCurrentUserNamespacedNotebookHandler interface for that can handle valid check current user namespaced notebook params
type CheckCurrentUserNamespacedNotebookHandler interface {
	Handle(CheckCurrentUserNamespacedNotebookParams) middleware.Responder
}

// NewCheckCurrentUserNamespacedNotebook creates a new http.Handler for the check current user namespaced notebook operation
func NewCheckCurrentUserNamespacedNotebook(ctx *middleware.Context, handler CheckCurrentUserNamespacedNotebookHandler) *CheckCurrentUserNamespacedNotebook {
	return &CheckCurrentUserNamespacedNotebook{Context: ctx, Handler: handler}
}

/*CheckCurrentUserNamespacedNotebook swagger:route GET /cc/v1/auth/access/namespaces/{namespace}/notebooks/{notebook} Auths checkCurrentUserNamespacedNotebook

auth by namespace and notebook .

Optional extended description in Markdown.

*/
type CheckCurrentUserNamespacedNotebook struct {
	Context *middleware.Context
	Handler CheckCurrentUserNamespacedNotebookHandler
}

func (o *CheckCurrentUserNamespacedNotebook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckCurrentUserNamespacedNotebookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
