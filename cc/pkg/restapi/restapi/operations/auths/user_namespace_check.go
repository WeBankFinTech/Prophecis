// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserNamespaceCheckHandlerFunc turns a function with the right signature into a user namespace check handler
type UserNamespaceCheckHandlerFunc func(UserNamespaceCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserNamespaceCheckHandlerFunc) Handle(params UserNamespaceCheckParams) middleware.Responder {
	return fn(params)
}

// UserNamespaceCheckHandler interface for that can handle valid user namespace check params
type UserNamespaceCheckHandler interface {
	Handle(UserNamespaceCheckParams) middleware.Responder
}

// NewUserNamespaceCheck creates a new http.Handler for the user namespace check operation
func NewUserNamespaceCheck(ctx *middleware.Context, handler UserNamespaceCheckHandler) *UserNamespaceCheck {
	return &UserNamespaceCheck{Context: ctx, Handler: handler}
}

/*UserNamespaceCheck swagger:route GET /cc/v1/auth/access/users/{username}/namespaces/{namespace} Auths userNamespaceCheck

auth by username and namespace.

Optional extended description in Markdown.

*/
type UserNamespaceCheck struct {
	Context *middleware.Context
	Handler UserNamespaceCheckHandler
}

func (o *UserNamespaceCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserNamespaceCheckParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
