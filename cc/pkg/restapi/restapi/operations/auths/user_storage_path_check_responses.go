// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// UserStoragePathCheckOKCode is the HTTP code returned for type UserStoragePathCheckOK
const UserStoragePathCheckOKCode int = 200

/*UserStoragePathCheckOK auth by username and namespace and path.

swagger:response userStoragePathCheckOK
*/
type UserStoragePathCheckOK struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewUserStoragePathCheckOK creates UserStoragePathCheckOK with default headers values
func NewUserStoragePathCheckOK() *UserStoragePathCheckOK {

	return &UserStoragePathCheckOK{}
}

// WithPayload adds the payload to the user storage path check o k response
func (o *UserStoragePathCheckOK) WithPayload(payload *models.Result) *UserStoragePathCheckOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user storage path check o k response
func (o *UserStoragePathCheckOK) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStoragePathCheckOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserStoragePathCheckUnauthorizedCode is the HTTP code returned for type UserStoragePathCheckUnauthorized
const UserStoragePathCheckUnauthorizedCode int = 401

/*UserStoragePathCheckUnauthorized Unauthorized

swagger:response userStoragePathCheckUnauthorized
*/
type UserStoragePathCheckUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUserStoragePathCheckUnauthorized creates UserStoragePathCheckUnauthorized with default headers values
func NewUserStoragePathCheckUnauthorized() *UserStoragePathCheckUnauthorized {

	return &UserStoragePathCheckUnauthorized{}
}

// WithPayload adds the payload to the user storage path check unauthorized response
func (o *UserStoragePathCheckUnauthorized) WithPayload(payload *models.Error) *UserStoragePathCheckUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user storage path check unauthorized response
func (o *UserStoragePathCheckUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStoragePathCheckUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserStoragePathCheckNotFoundCode is the HTTP code returned for type UserStoragePathCheckNotFound
const UserStoragePathCheckNotFoundCode int = 404

/*UserStoragePathCheckNotFound url to auth by username and namespace and path not found.

swagger:response userStoragePathCheckNotFound
*/
type UserStoragePathCheckNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUserStoragePathCheckNotFound creates UserStoragePathCheckNotFound with default headers values
func NewUserStoragePathCheckNotFound() *UserStoragePathCheckNotFound {

	return &UserStoragePathCheckNotFound{}
}

// WithPayload adds the payload to the user storage path check not found response
func (o *UserStoragePathCheckNotFound) WithPayload(payload *models.Error) *UserStoragePathCheckNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user storage path check not found response
func (o *UserStoragePathCheckNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStoragePathCheckNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
