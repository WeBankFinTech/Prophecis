// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// CheckCurrentUserNamespacedNotebookOKCode is the HTTP code returned for type CheckCurrentUserNamespacedNotebookOK
const CheckCurrentUserNamespacedNotebookOKCode int = 200

/*CheckCurrentUserNamespacedNotebookOK auth by namespace and notebook.

swagger:response checkCurrentUserNamespacedNotebookOK
*/
type CheckCurrentUserNamespacedNotebookOK struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewCheckCurrentUserNamespacedNotebookOK creates CheckCurrentUserNamespacedNotebookOK with default headers values
func NewCheckCurrentUserNamespacedNotebookOK() *CheckCurrentUserNamespacedNotebookOK {

	return &CheckCurrentUserNamespacedNotebookOK{}
}

// WithPayload adds the payload to the check current user namespaced notebook o k response
func (o *CheckCurrentUserNamespacedNotebookOK) WithPayload(payload *models.Result) *CheckCurrentUserNamespacedNotebookOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check current user namespaced notebook o k response
func (o *CheckCurrentUserNamespacedNotebookOK) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCurrentUserNamespacedNotebookOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCurrentUserNamespacedNotebookUnauthorizedCode is the HTTP code returned for type CheckCurrentUserNamespacedNotebookUnauthorized
const CheckCurrentUserNamespacedNotebookUnauthorizedCode int = 401

/*CheckCurrentUserNamespacedNotebookUnauthorized Unauthorized

swagger:response checkCurrentUserNamespacedNotebookUnauthorized
*/
type CheckCurrentUserNamespacedNotebookUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCheckCurrentUserNamespacedNotebookUnauthorized creates CheckCurrentUserNamespacedNotebookUnauthorized with default headers values
func NewCheckCurrentUserNamespacedNotebookUnauthorized() *CheckCurrentUserNamespacedNotebookUnauthorized {

	return &CheckCurrentUserNamespacedNotebookUnauthorized{}
}

// WithPayload adds the payload to the check current user namespaced notebook unauthorized response
func (o *CheckCurrentUserNamespacedNotebookUnauthorized) WithPayload(payload *models.Error) *CheckCurrentUserNamespacedNotebookUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check current user namespaced notebook unauthorized response
func (o *CheckCurrentUserNamespacedNotebookUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCurrentUserNamespacedNotebookUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckCurrentUserNamespacedNotebookNotFoundCode is the HTTP code returned for type CheckCurrentUserNamespacedNotebookNotFound
const CheckCurrentUserNamespacedNotebookNotFoundCode int = 404

/*CheckCurrentUserNamespacedNotebookNotFound url to add namespace not found.

swagger:response checkCurrentUserNamespacedNotebookNotFound
*/
type CheckCurrentUserNamespacedNotebookNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCheckCurrentUserNamespacedNotebookNotFound creates CheckCurrentUserNamespacedNotebookNotFound with default headers values
func NewCheckCurrentUserNamespacedNotebookNotFound() *CheckCurrentUserNamespacedNotebookNotFound {

	return &CheckCurrentUserNamespacedNotebookNotFound{}
}

// WithPayload adds the payload to the check current user namespaced notebook not found response
func (o *CheckCurrentUserNamespacedNotebookNotFound) WithPayload(payload *models.Error) *CheckCurrentUserNamespacedNotebookNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check current user namespaced notebook not found response
func (o *CheckCurrentUserNamespacedNotebookNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckCurrentUserNamespacedNotebookNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
