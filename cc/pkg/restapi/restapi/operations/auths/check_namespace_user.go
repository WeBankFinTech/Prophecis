// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CheckNamespaceUserHandlerFunc turns a function with the right signature into a check namespace user handler
type CheckNamespaceUserHandlerFunc func(CheckNamespaceUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckNamespaceUserHandlerFunc) Handle(params CheckNamespaceUserParams) middleware.Responder {
	return fn(params)
}

// CheckNamespaceUserHandler interface for that can handle valid check namespace user params
type CheckNamespaceUserHandler interface {
	Handle(CheckNamespaceUserParams) middleware.Responder
}

// NewCheckNamespaceUser creates a new http.Handler for the check namespace user operation
func NewCheckNamespaceUser(ctx *middleware.Context, handler CheckNamespaceUserHandler) *CheckNamespaceUser {
	return &CheckNamespaceUser{Context: ctx, Handler: handler}
}

/*CheckNamespaceUser swagger:route GET /cc/v1/auth/access/admin/namespaces/{namespace}/users/{username} Auths checkNamespaceUser

auth by namespace .

Optional extended description in Markdown.

*/
type CheckNamespaceUser struct {
	Context *middleware.Context
	Handler CheckNamespaceUserHandler
}

func (o *CheckNamespaceUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckNamespaceUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
