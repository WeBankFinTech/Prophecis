// Code generated by go-swagger; DO NOT EDIT.

package auths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// CheckUserGetNamespaceOKCode is the HTTP code returned for type CheckUserGetNamespaceOK
const CheckUserGetNamespaceOKCode int = 200

/*CheckUserGetNamespaceOK auth by namespace.

swagger:response checkUserGetNamespaceOK
*/
type CheckUserGetNamespaceOK struct {

	/*
	  In: Body
	*/
	Payload *models.Result `json:"body,omitempty"`
}

// NewCheckUserGetNamespaceOK creates CheckUserGetNamespaceOK with default headers values
func NewCheckUserGetNamespaceOK() *CheckUserGetNamespaceOK {

	return &CheckUserGetNamespaceOK{}
}

// WithPayload adds the payload to the check user get namespace o k response
func (o *CheckUserGetNamespaceOK) WithPayload(payload *models.Result) *CheckUserGetNamespaceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check user get namespace o k response
func (o *CheckUserGetNamespaceOK) SetPayload(payload *models.Result) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckUserGetNamespaceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckUserGetNamespaceUnauthorizedCode is the HTTP code returned for type CheckUserGetNamespaceUnauthorized
const CheckUserGetNamespaceUnauthorizedCode int = 401

/*CheckUserGetNamespaceUnauthorized Unauthorized

swagger:response checkUserGetNamespaceUnauthorized
*/
type CheckUserGetNamespaceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCheckUserGetNamespaceUnauthorized creates CheckUserGetNamespaceUnauthorized with default headers values
func NewCheckUserGetNamespaceUnauthorized() *CheckUserGetNamespaceUnauthorized {

	return &CheckUserGetNamespaceUnauthorized{}
}

// WithPayload adds the payload to the check user get namespace unauthorized response
func (o *CheckUserGetNamespaceUnauthorized) WithPayload(payload *models.Error) *CheckUserGetNamespaceUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check user get namespace unauthorized response
func (o *CheckUserGetNamespaceUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckUserGetNamespaceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckUserGetNamespaceNotFoundCode is the HTTP code returned for type CheckUserGetNamespaceNotFound
const CheckUserGetNamespaceNotFoundCode int = 404

/*CheckUserGetNamespaceNotFound url to add namespace not found.

swagger:response checkUserGetNamespaceNotFound
*/
type CheckUserGetNamespaceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCheckUserGetNamespaceNotFound creates CheckUserGetNamespaceNotFound with default headers values
func NewCheckUserGetNamespaceNotFound() *CheckUserGetNamespaceNotFound {

	return &CheckUserGetNamespaceNotFound{}
}

// WithPayload adds the payload to the check user get namespace not found response
func (o *CheckUserGetNamespaceNotFound) WithPayload(payload *models.Error) *CheckUserGetNamespaceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check user get namespace not found response
func (o *CheckUserGetNamespaceNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckUserGetNamespaceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
