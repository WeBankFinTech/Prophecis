// Code generated by go-swagger; DO NOT EDIT.

package inters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IPInterceptorHandlerFunc turns a function with the right signature into a Ip interceptor handler
type IPInterceptorHandlerFunc func(IPInterceptorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IPInterceptorHandlerFunc) Handle(params IPInterceptorParams) middleware.Responder {
	return fn(params)
}

// IPInterceptorHandler interface for that can handle valid Ip interceptor params
type IPInterceptorHandler interface {
	Handle(IPInterceptorParams) middleware.Responder
}

// NewIPInterceptor creates a new http.Handler for the Ip interceptor operation
func NewIPInterceptor(ctx *middleware.Context, handler IPInterceptorHandler) *IPInterceptor {
	return &IPInterceptor{Context: ctx, Handler: handler}
}

/*IPInterceptor swagger:route GET /cc/v1/inter/ip Inters ipInterceptor

ip interceptor .

Optional extended description in Markdown.

*/
type IPInterceptor struct {
	Context *middleware.Context
	Handler IPInterceptorHandler
}

func (o *IPInterceptor) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIPInterceptorParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
