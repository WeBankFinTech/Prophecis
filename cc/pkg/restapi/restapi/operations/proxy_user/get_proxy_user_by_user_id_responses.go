// Code generated by go-swagger; DO NOT EDIT.

package proxy_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// GetProxyUserByUserIDOKCode is the HTTP code returned for type GetProxyUserByUserIDOK
const GetProxyUserByUserIDOKCode int = 200

/*GetProxyUserByUserIDOK Proxy User Entity.

swagger:response getProxyUserByUserIdOK
*/
type GetProxyUserByUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.ProxyUser `json:"body,omitempty"`
}

// NewGetProxyUserByUserIDOK creates GetProxyUserByUserIDOK with default headers values
func NewGetProxyUserByUserIDOK() *GetProxyUserByUserIDOK {

	return &GetProxyUserByUserIDOK{}
}

// WithPayload adds the payload to the get proxy user by user Id o k response
func (o *GetProxyUserByUserIDOK) WithPayload(payload *models.ProxyUser) *GetProxyUserByUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get proxy user by user Id o k response
func (o *GetProxyUserByUserIDOK) SetPayload(payload *models.ProxyUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProxyUserByUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProxyUserByUserIDUnauthorizedCode is the HTTP code returned for type GetProxyUserByUserIDUnauthorized
const GetProxyUserByUserIDUnauthorizedCode int = 401

/*GetProxyUserByUserIDUnauthorized Unauthorized

swagger:response getProxyUserByUserIdUnauthorized
*/
type GetProxyUserByUserIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProxyUserByUserIDUnauthorized creates GetProxyUserByUserIDUnauthorized with default headers values
func NewGetProxyUserByUserIDUnauthorized() *GetProxyUserByUserIDUnauthorized {

	return &GetProxyUserByUserIDUnauthorized{}
}

// WithPayload adds the payload to the get proxy user by user Id unauthorized response
func (o *GetProxyUserByUserIDUnauthorized) WithPayload(payload *models.Error) *GetProxyUserByUserIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get proxy user by user Id unauthorized response
func (o *GetProxyUserByUserIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProxyUserByUserIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProxyUserByUserIDNotFoundCode is the HTTP code returned for type GetProxyUserByUserIDNotFound
const GetProxyUserByUserIDNotFoundCode int = 404

/*GetProxyUserByUserIDNotFound url to add keyPair not found.

swagger:response getProxyUserByUserIdNotFound
*/
type GetProxyUserByUserIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProxyUserByUserIDNotFound creates GetProxyUserByUserIDNotFound with default headers values
func NewGetProxyUserByUserIDNotFound() *GetProxyUserByUserIDNotFound {

	return &GetProxyUserByUserIDNotFound{}
}

// WithPayload adds the payload to the get proxy user by user Id not found response
func (o *GetProxyUserByUserIDNotFound) WithPayload(payload *models.Error) *GetProxyUserByUserIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get proxy user by user Id not found response
func (o *GetProxyUserByUserIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProxyUserByUserIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
