// Code generated by go-swagger; DO NOT EDIT.

package proxy_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateProxyUserHandlerFunc turns a function with the right signature into a update proxy user handler
type UpdateProxyUserHandlerFunc func(UpdateProxyUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateProxyUserHandlerFunc) Handle(params UpdateProxyUserParams) middleware.Responder {
	return fn(params)
}

// UpdateProxyUserHandler interface for that can handle valid update proxy user params
type UpdateProxyUserHandler interface {
	Handle(UpdateProxyUserParams) middleware.Responder
}

// NewUpdateProxyUser creates a new http.Handler for the update proxy user operation
func NewUpdateProxyUser(ctx *middleware.Context, handler UpdateProxyUserHandler) *UpdateProxyUser {
	return &UpdateProxyUser{Context: ctx, Handler: handler}
}

/*UpdateProxyUser swagger:route PUT /cc/v1/proxyUser/{id} proxyUser updateProxyUser

delete ProxyUser.

Optional extended description in Markdown.

*/
type UpdateProxyUser struct {
	Context *middleware.Context
	Handler UpdateProxyUserHandler
}

func (o *UpdateProxyUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateProxyUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
