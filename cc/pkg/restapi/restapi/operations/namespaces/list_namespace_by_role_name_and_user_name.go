// Code generated by go-swagger; DO NOT EDIT.

package namespaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListNamespaceByRoleNameAndUserNameHandlerFunc turns a function with the right signature into a list namespace by role name and user name handler
type ListNamespaceByRoleNameAndUserNameHandlerFunc func(ListNamespaceByRoleNameAndUserNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListNamespaceByRoleNameAndUserNameHandlerFunc) Handle(params ListNamespaceByRoleNameAndUserNameParams) middleware.Responder {
	return fn(params)
}

// ListNamespaceByRoleNameAndUserNameHandler interface for that can handle valid list namespace by role name and user name params
type ListNamespaceByRoleNameAndUserNameHandler interface {
	Handle(ListNamespaceByRoleNameAndUserNameParams) middleware.Responder
}

// NewListNamespaceByRoleNameAndUserName creates a new http.Handler for the list namespace by role name and user name operation
func NewListNamespaceByRoleNameAndUserName(ctx *middleware.Context, handler ListNamespaceByRoleNameAndUserNameHandler) *ListNamespaceByRoleNameAndUserName {
	return &ListNamespaceByRoleNameAndUserName{Context: ctx, Handler: handler}
}

/*ListNamespaceByRoleNameAndUserName swagger:route GET /cc/v1/namespaces/role/{roleName}/user/{userName} Namespaces listNamespaceByRoleNameAndUserName

Returns a namespace list.

Optional extended description in Markdown.

*/
type ListNamespaceByRoleNameAndUserName struct {
	Context *middleware.Context
	Handler ListNamespaceByRoleNameAndUserNameHandler
}

func (o *ListNamespaceByRoleNameAndUserName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListNamespaceByRoleNameAndUserNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
