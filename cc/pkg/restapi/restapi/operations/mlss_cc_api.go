// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"mlss-controlcenter-go/pkg/restapi/restapi/operations/alerts"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/auths"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/groups"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/inters"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/keys"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/logins"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/logouts"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/namespaces"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/resources"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/roles"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/samples"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/storages"
	"mlss-controlcenter-go/pkg/restapi/restapi/operations/users"
)

// NewMlssCcAPI creates a new MlssCc instance
func NewMlssCcAPI(spec *loads.Document) *MlssCcAPI {
	return &MlssCcAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		GroupsAddGroupHandler: groups.AddGroupHandlerFunc(func(params groups.AddGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsAddGroup has not yet been implemented")
		}),
		KeysAddKeyHandler: keys.AddKeyHandlerFunc(func(params keys.AddKeyParams) middleware.Responder {
			return middleware.NotImplemented("operation KeysAddKey has not yet been implemented")
		}),
		ResourcesAddLabelsHandler: resources.AddLabelsHandlerFunc(func(params resources.AddLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation ResourcesAddLabels has not yet been implemented")
		}),
		NamespacesAddNamespaceHandler: namespaces.AddNamespaceHandlerFunc(func(params namespaces.AddNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesAddNamespace has not yet been implemented")
		}),
		GroupsAddNamespaceToGroupHandler: groups.AddNamespaceToGroupHandlerFunc(func(params groups.AddNamespaceToGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsAddNamespaceToGroup has not yet been implemented")
		}),
		RolesAddRoleHandler: roles.AddRoleHandlerFunc(func(params roles.AddRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation RolesAddRole has not yet been implemented")
		}),
		StoragesAddStorageHandler: storages.AddStorageHandlerFunc(func(params storages.AddStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StoragesAddStorage has not yet been implemented")
		}),
		GroupsAddStorageToGroupHandler: groups.AddStorageToGroupHandlerFunc(func(params groups.AddStorageToGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsAddStorageToGroup has not yet been implemented")
		}),
		UsersAddUserHandler: users.AddUserHandlerFunc(func(params users.AddUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersAddUser has not yet been implemented")
		}),
		GroupsAddUserToGroupHandler: groups.AddUserToGroupHandlerFunc(func(params groups.AddUserToGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsAddUserToGroup has not yet been implemented")
		}),
		AuthsAdminUserCheckHandler: auths.AdminUserCheckHandlerFunc(func(params auths.AdminUserCheckParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsAdminUserCheck has not yet been implemented")
		}),
		IntersAuthInterceptorHandler: inters.AuthInterceptorHandlerFunc(func(params inters.AuthInterceptorParams) middleware.Responder {
			return middleware.NotImplemented("operation IntersAuthInterceptor has not yet been implemented")
		}),
		AuthsCheckCurrentUserNamespacedNotebookHandler: auths.CheckCurrentUserNamespacedNotebookHandlerFunc(func(params auths.CheckCurrentUserNamespacedNotebookParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsCheckCurrentUserNamespacedNotebook has not yet been implemented")
		}),
		AuthsCheckNamespaceHandler: auths.CheckNamespaceHandlerFunc(func(params auths.CheckNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsCheckNamespace has not yet been implemented")
		}),
		AuthsCheckNamespaceUserHandler: auths.CheckNamespaceUserHandlerFunc(func(params auths.CheckNamespaceUserParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsCheckNamespaceUser has not yet been implemented")
		}),
		AuthsCheckUserGetNamespaceHandler: auths.CheckUserGetNamespaceHandlerFunc(func(params auths.CheckUserGetNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsCheckUserGetNamespace has not yet been implemented")
		}),
		KeysDeleteByNameHandler: keys.DeleteByNameHandlerFunc(func(params keys.DeleteByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation KeysDeleteByName has not yet been implemented")
		}),
		GroupsDeleteGroupByIDHandler: groups.DeleteGroupByIDHandlerFunc(func(params groups.DeleteGroupByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteGroupByID has not yet been implemented")
		}),
		GroupsDeleteGroupByNameHandler: groups.DeleteGroupByNameHandlerFunc(func(params groups.DeleteGroupByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteGroupByName has not yet been implemented")
		}),
		GroupsDeleteGroupNamespaceHandler: groups.DeleteGroupNamespaceHandlerFunc(func(params groups.DeleteGroupNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteGroupNamespace has not yet been implemented")
		}),
		NamespacesDeleteNamespaceByNameHandler: namespaces.DeleteNamespaceByNameHandlerFunc(func(params namespaces.DeleteNamespaceByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesDeleteNamespaceByName has not yet been implemented")
		}),
		StoragesDeleteStorageByIDHandler: storages.DeleteStorageByIDHandlerFunc(func(params storages.DeleteStorageByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation StoragesDeleteStorageByID has not yet been implemented")
		}),
		StoragesDeleteStorageByPathHandler: storages.DeleteStorageByPathHandlerFunc(func(params storages.DeleteStorageByPathParams) middleware.Responder {
			return middleware.NotImplemented("operation StoragesDeleteStorageByPath has not yet been implemented")
		}),
		GroupsDeleteStorageFromGroupHandler: groups.DeleteStorageFromGroupHandlerFunc(func(params groups.DeleteStorageFromGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteStorageFromGroup has not yet been implemented")
		}),
		UsersDeleteUserByIDHandler: users.DeleteUserByIDHandlerFunc(func(params users.DeleteUserByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersDeleteUserByID has not yet been implemented")
		}),
		UsersDeleteUserByNameHandler: users.DeleteUserByNameHandlerFunc(func(params users.DeleteUserByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersDeleteUserByName has not yet been implemented")
		}),
		GroupsDeleteUserFromGroupHandler: groups.DeleteUserFromGroupHandlerFunc(func(params groups.DeleteUserFromGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteUserFromGroup has not yet been implemented")
		}),
		GroupsDeleteUserGroupByUserIDAndGroupIDHandler: groups.DeleteUserGroupByUserIDAndGroupIDHandlerFunc(func(params groups.DeleteUserGroupByUserIDAndGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteUserGroupByUserIDAndGroupID has not yet been implemented")
		}),
		GroupsGetAllGroupNamespaceByNamespaceIDHandler: groups.GetAllGroupNamespaceByNamespaceIDHandlerFunc(func(params groups.GetAllGroupNamespaceByNamespaceIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetAllGroupNamespaceByNamespaceID has not yet been implemented")
		}),
		GroupsGetAllGroupStorageByStorageIDHandler: groups.GetAllGroupStorageByStorageIDHandlerFunc(func(params groups.GetAllGroupStorageByStorageIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetAllGroupStorageByStorageID has not yet been implemented")
		}),
		GroupsGetAllGroupsHandler: groups.GetAllGroupsHandlerFunc(func(params groups.GetAllGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetAllGroups has not yet been implemented")
		}),
		NamespacesGetAllNamespacesHandler: namespaces.GetAllNamespacesHandlerFunc(func(params namespaces.GetAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesGetAllNamespaces has not yet been implemented")
		}),
		StoragesGetAllStorageHandler: storages.GetAllStorageHandlerFunc(func(params storages.GetAllStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StoragesGetAllStorage has not yet been implemented")
		}),
		GroupsGetAllUserGroupByUserIDHandler: groups.GetAllUserGroupByUserIDHandlerFunc(func(params groups.GetAllUserGroupByUserIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetAllUserGroupByUserID has not yet been implemented")
		}),
		UsersGetAllUsersHandler: users.GetAllUsersHandlerFunc(func(params users.GetAllUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetAllUsers has not yet been implemented")
		}),
		KeysGetByNameHandler: keys.GetByNameHandlerFunc(func(params keys.GetByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation KeysGetByName has not yet been implemented")
		}),
		GroupsGetCurrentUserNamespaceWithRoleHandler: groups.GetCurrentUserNamespaceWithRoleHandlerFunc(func(params groups.GetCurrentUserNamespaceWithRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetCurrentUserNamespaceWithRole has not yet been implemented")
		}),
		GroupsGetCurrentUserStoragePathHandler: groups.GetCurrentUserStoragePathHandlerFunc(func(params groups.GetCurrentUserStoragePathParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetCurrentUserStoragePath has not yet been implemented")
		}),
		GroupsGetGroupByGroupIDHandler: groups.GetGroupByGroupIDHandlerFunc(func(params groups.GetGroupByGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroupByGroupID has not yet been implemented")
		}),
		GroupsGetGroupByNameHandler: groups.GetGroupByNameHandlerFunc(func(params groups.GetGroupByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroupByName has not yet been implemented")
		}),
		ResourcesGetLabelsOfNodeHandler: resources.GetLabelsOfNodeHandlerFunc(func(params resources.GetLabelsOfNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation ResourcesGetLabelsOfNode has not yet been implemented")
		}),
		NamespacesGetMyNamespaceHandler: namespaces.GetMyNamespaceHandlerFunc(func(params namespaces.GetMyNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesGetMyNamespace has not yet been implemented")
		}),
		UsersGetMyUsersHandler: users.GetMyUsersHandlerFunc(func(params users.GetMyUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetMyUsers has not yet been implemented")
		}),
		GroupsGetNamespaceByGroupIDAndNamespaceHandler: groups.GetNamespaceByGroupIDAndNamespaceHandlerFunc(func(params groups.GetNamespaceByGroupIDAndNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetNamespaceByGroupIDAndNamespace has not yet been implemented")
		}),
		NamespacesGetNamespaceByNameHandler: namespaces.GetNamespaceByNameHandlerFunc(func(params namespaces.GetNamespaceByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesGetNamespaceByName has not yet been implemented")
		}),
		GroupsGetNamespacesByGroupIDHandler: groups.GetNamespacesByGroupIDHandlerFunc(func(params groups.GetNamespacesByGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetNamespacesByGroupID has not yet been implemented")
		}),
		ResourcesGetNodeByNameHandler: resources.GetNodeByNameHandlerFunc(func(params resources.GetNodeByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation ResourcesGetNodeByName has not yet been implemented")
		}),
		RolesGetRoleByIDHandler: roles.GetRoleByIDHandlerFunc(func(params roles.GetRoleByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RolesGetRoleByID has not yet been implemented")
		}),
		RolesGetRoleByNameHandler: roles.GetRoleByNameHandlerFunc(func(params roles.GetRoleByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation RolesGetRoleByName has not yet been implemented")
		}),
		RolesGetRolesHandler: roles.GetRolesHandlerFunc(func(params roles.GetRolesParams) middleware.Responder {
			return middleware.NotImplemented("operation RolesGetRoles has not yet been implemented")
		}),
		LoginsGetRsaPubKeyHandler: logins.GetRsaPubKeyHandlerFunc(func(params logins.GetRsaPubKeyParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginsGetRsaPubKey has not yet been implemented")
		}),
		UsersGetSAByNameHandler: users.GetSAByNameHandlerFunc(func(params users.GetSAByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetSAByName has not yet been implemented")
		}),
		StoragesGetStorageByPathHandler: storages.GetStorageByPathHandlerFunc(func(params storages.GetStorageByPathParams) middleware.Responder {
			return middleware.NotImplemented("operation StoragesGetStorageByPath has not yet been implemented")
		}),
		UsersGetUserByUserIDHandler: users.GetUserByUserIDHandlerFunc(func(params users.GetUserByUserIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUserByUserID has not yet been implemented")
		}),
		UsersGetUserByUserNameHandler: users.GetUserByUserNameHandlerFunc(func(params users.GetUserByUserNameParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUserByUserName has not yet been implemented")
		}),
		GroupsGetUserGroupByUserIDAndGroupIDHandler: groups.GetUserGroupByUserIDAndGroupIDHandlerFunc(func(params groups.GetUserGroupByUserIDAndGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetUserGroupByUserIDAndGroupID has not yet been implemented")
		}),
		IntersIPInterceptorHandler: inters.IPInterceptorHandlerFunc(func(params inters.IPInterceptorParams) middleware.Responder {
			return middleware.NotImplemented("operation IntersIPInterceptor has not yet been implemented")
		}),
		LoginsLDAPLoginHandler: logins.LDAPLoginHandlerFunc(func(params logins.LDAPLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginsLDAPLogin has not yet been implemented")
		}),
		LogoutsLogoutHandler: logouts.LogoutHandlerFunc(func(params logouts.LogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation LogoutsLogout has not yet been implemented")
		}),
		AlertsReceiveTaskAlertHandler: alerts.ReceiveTaskAlertHandlerFunc(func(params alerts.ReceiveTaskAlertParams) middleware.Responder {
			return middleware.NotImplemented("operation AlertsReceiveTaskAlert has not yet been implemented")
		}),
		ResourcesRemoveNodeLabelHandler: resources.RemoveNodeLabelHandlerFunc(func(params resources.RemoveNodeLabelParams) middleware.Responder {
			return middleware.NotImplemented("operation ResourcesRemoveNodeLabel has not yet been implemented")
		}),
		SamplesSampleGetHandler: samples.SampleGetHandlerFunc(func(params samples.SampleGetParams) middleware.Responder {
			return middleware.NotImplemented("operation SamplesSampleGet has not yet been implemented")
		}),
		SamplesSamplePostHandler: samples.SamplePostHandlerFunc(func(params samples.SamplePostParams) middleware.Responder {
			return middleware.NotImplemented("operation SamplesSamplePost has not yet been implemented")
		}),
		ResourcesSetNamespaceRQHandler: resources.SetNamespaceRQHandlerFunc(func(params resources.SetNamespaceRQParams) middleware.Responder {
			return middleware.NotImplemented("operation ResourcesSetNamespaceRQ has not yet been implemented")
		}),
		LoginsUMLoginHandler: logins.UMLoginHandlerFunc(func(params logins.UMLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation LoginsUMLogin has not yet been implemented")
		}),
		GroupsUpdateGroupHandler: groups.UpdateGroupHandlerFunc(func(params groups.UpdateGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsUpdateGroup has not yet been implemented")
		}),
		GroupsUpdateGroupStorageHandler: groups.UpdateGroupStorageHandlerFunc(func(params groups.UpdateGroupStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsUpdateGroupStorage has not yet been implemented")
		}),
		ResourcesUpdateLabelsHandler: resources.UpdateLabelsHandlerFunc(func(params resources.UpdateLabelsParams) middleware.Responder {
			return middleware.NotImplemented("operation ResourcesUpdateLabels has not yet been implemented")
		}),
		NamespacesUpdateNamespaceHandler: namespaces.UpdateNamespaceHandlerFunc(func(params namespaces.UpdateNamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesUpdateNamespace has not yet been implemented")
		}),
		RolesUpdateRoleHandler: roles.UpdateRoleHandlerFunc(func(params roles.UpdateRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation RolesUpdateRole has not yet been implemented")
		}),
		StoragesUpdateStorageHandler: storages.UpdateStorageHandlerFunc(func(params storages.UpdateStorageParams) middleware.Responder {
			return middleware.NotImplemented("operation StoragesUpdateStorage has not yet been implemented")
		}),
		UsersUpdateUserHandler: users.UpdateUserHandlerFunc(func(params users.UpdateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersUpdateUser has not yet been implemented")
		}),
		GroupsUpdateUserGroupHandler: groups.UpdateUserGroupHandlerFunc(func(params groups.UpdateUserGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsUpdateUserGroup has not yet been implemented")
		}),
		IntersUserInterceptorHandler: inters.UserInterceptorHandlerFunc(func(params inters.UserInterceptorParams) middleware.Responder {
			return middleware.NotImplemented("operation IntersUserInterceptor has not yet been implemented")
		}),
		AuthsUserNamespaceCheckHandler: auths.UserNamespaceCheckHandlerFunc(func(params auths.UserNamespaceCheckParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsUserNamespaceCheck has not yet been implemented")
		}),
		AuthsUserStorageCheckHandler: auths.UserStorageCheckHandlerFunc(func(params auths.UserStorageCheckParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsUserStorageCheck has not yet been implemented")
		}),
		AuthsUserStoragePathCheckHandler: auths.UserStoragePathCheckHandlerFunc(func(params auths.UserStoragePathCheckParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthsUserStoragePathCheck has not yet been implemented")
		}),
	}
}

/*MlssCcAPI API description in Markdown. */
type MlssCcAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// GroupsAddGroupHandler sets the operation handler for the add group operation
	GroupsAddGroupHandler groups.AddGroupHandler
	// KeysAddKeyHandler sets the operation handler for the add key operation
	KeysAddKeyHandler keys.AddKeyHandler
	// ResourcesAddLabelsHandler sets the operation handler for the add labels operation
	ResourcesAddLabelsHandler resources.AddLabelsHandler
	// NamespacesAddNamespaceHandler sets the operation handler for the add namespace operation
	NamespacesAddNamespaceHandler namespaces.AddNamespaceHandler
	// GroupsAddNamespaceToGroupHandler sets the operation handler for the add namespace to group operation
	GroupsAddNamespaceToGroupHandler groups.AddNamespaceToGroupHandler
	// RolesAddRoleHandler sets the operation handler for the add role operation
	RolesAddRoleHandler roles.AddRoleHandler
	// StoragesAddStorageHandler sets the operation handler for the add storage operation
	StoragesAddStorageHandler storages.AddStorageHandler
	// GroupsAddStorageToGroupHandler sets the operation handler for the add storage to group operation
	GroupsAddStorageToGroupHandler groups.AddStorageToGroupHandler
	// UsersAddUserHandler sets the operation handler for the add user operation
	UsersAddUserHandler users.AddUserHandler
	// GroupsAddUserToGroupHandler sets the operation handler for the add user to group operation
	GroupsAddUserToGroupHandler groups.AddUserToGroupHandler
	// AuthsAdminUserCheckHandler sets the operation handler for the admin user check operation
	AuthsAdminUserCheckHandler auths.AdminUserCheckHandler
	// IntersAuthInterceptorHandler sets the operation handler for the auth interceptor operation
	IntersAuthInterceptorHandler inters.AuthInterceptorHandler
	// AuthsCheckCurrentUserNamespacedNotebookHandler sets the operation handler for the check current user namespaced notebook operation
	AuthsCheckCurrentUserNamespacedNotebookHandler auths.CheckCurrentUserNamespacedNotebookHandler
	// AuthsCheckNamespaceHandler sets the operation handler for the check namespace operation
	AuthsCheckNamespaceHandler auths.CheckNamespaceHandler
	// AuthsCheckNamespaceUserHandler sets the operation handler for the check namespace user operation
	AuthsCheckNamespaceUserHandler auths.CheckNamespaceUserHandler
	// AuthsCheckUserGetNamespaceHandler sets the operation handler for the check user get namespace operation
	AuthsCheckUserGetNamespaceHandler auths.CheckUserGetNamespaceHandler
	// KeysDeleteByNameHandler sets the operation handler for the delete by name operation
	KeysDeleteByNameHandler keys.DeleteByNameHandler
	// GroupsDeleteGroupByIDHandler sets the operation handler for the delete group by Id operation
	GroupsDeleteGroupByIDHandler groups.DeleteGroupByIDHandler
	// GroupsDeleteGroupByNameHandler sets the operation handler for the delete group by name operation
	GroupsDeleteGroupByNameHandler groups.DeleteGroupByNameHandler
	// GroupsDeleteGroupNamespaceHandler sets the operation handler for the delete group namespace operation
	GroupsDeleteGroupNamespaceHandler groups.DeleteGroupNamespaceHandler
	// NamespacesDeleteNamespaceByNameHandler sets the operation handler for the delete namespace by name operation
	NamespacesDeleteNamespaceByNameHandler namespaces.DeleteNamespaceByNameHandler
	// StoragesDeleteStorageByIDHandler sets the operation handler for the delete storage by Id operation
	StoragesDeleteStorageByIDHandler storages.DeleteStorageByIDHandler
	// StoragesDeleteStorageByPathHandler sets the operation handler for the delete storage by path operation
	StoragesDeleteStorageByPathHandler storages.DeleteStorageByPathHandler
	// GroupsDeleteStorageFromGroupHandler sets the operation handler for the delete storage from group operation
	GroupsDeleteStorageFromGroupHandler groups.DeleteStorageFromGroupHandler
	// UsersDeleteUserByIDHandler sets the operation handler for the delete user by Id operation
	UsersDeleteUserByIDHandler users.DeleteUserByIDHandler
	// UsersDeleteUserByNameHandler sets the operation handler for the delete user by name operation
	UsersDeleteUserByNameHandler users.DeleteUserByNameHandler
	// GroupsDeleteUserFromGroupHandler sets the operation handler for the delete user from group operation
	GroupsDeleteUserFromGroupHandler groups.DeleteUserFromGroupHandler
	// GroupsDeleteUserGroupByUserIDAndGroupIDHandler sets the operation handler for the delete user group by user Id and group Id operation
	GroupsDeleteUserGroupByUserIDAndGroupIDHandler groups.DeleteUserGroupByUserIDAndGroupIDHandler
	// GroupsGetAllGroupNamespaceByNamespaceIDHandler sets the operation handler for the get all group namespace by namespace Id operation
	GroupsGetAllGroupNamespaceByNamespaceIDHandler groups.GetAllGroupNamespaceByNamespaceIDHandler
	// GroupsGetAllGroupStorageByStorageIDHandler sets the operation handler for the get all group storage by storage Id operation
	GroupsGetAllGroupStorageByStorageIDHandler groups.GetAllGroupStorageByStorageIDHandler
	// GroupsGetAllGroupsHandler sets the operation handler for the get all groups operation
	GroupsGetAllGroupsHandler groups.GetAllGroupsHandler
	// NamespacesGetAllNamespacesHandler sets the operation handler for the get all namespaces operation
	NamespacesGetAllNamespacesHandler namespaces.GetAllNamespacesHandler
	// StoragesGetAllStorageHandler sets the operation handler for the get all storage operation
	StoragesGetAllStorageHandler storages.GetAllStorageHandler
	// GroupsGetAllUserGroupByUserIDHandler sets the operation handler for the get all user group by user Id operation
	GroupsGetAllUserGroupByUserIDHandler groups.GetAllUserGroupByUserIDHandler
	// UsersGetAllUsersHandler sets the operation handler for the get all users operation
	UsersGetAllUsersHandler users.GetAllUsersHandler
	// KeysGetByNameHandler sets the operation handler for the get by name operation
	KeysGetByNameHandler keys.GetByNameHandler
	// GroupsGetCurrentUserNamespaceWithRoleHandler sets the operation handler for the get current user namespace with role operation
	GroupsGetCurrentUserNamespaceWithRoleHandler groups.GetCurrentUserNamespaceWithRoleHandler
	// GroupsGetCurrentUserStoragePathHandler sets the operation handler for the get current user storage path operation
	GroupsGetCurrentUserStoragePathHandler groups.GetCurrentUserStoragePathHandler
	// GroupsGetGroupByGroupIDHandler sets the operation handler for the get group by group Id operation
	GroupsGetGroupByGroupIDHandler groups.GetGroupByGroupIDHandler
	// GroupsGetGroupByNameHandler sets the operation handler for the get group by name operation
	GroupsGetGroupByNameHandler groups.GetGroupByNameHandler
	// ResourcesGetLabelsOfNodeHandler sets the operation handler for the get labels of node operation
	ResourcesGetLabelsOfNodeHandler resources.GetLabelsOfNodeHandler
	// NamespacesGetMyNamespaceHandler sets the operation handler for the get my namespace operation
	NamespacesGetMyNamespaceHandler namespaces.GetMyNamespaceHandler
	// UsersGetMyUsersHandler sets the operation handler for the get my users operation
	UsersGetMyUsersHandler users.GetMyUsersHandler
	// GroupsGetNamespaceByGroupIDAndNamespaceHandler sets the operation handler for the get namespace by group Id and namespace operation
	GroupsGetNamespaceByGroupIDAndNamespaceHandler groups.GetNamespaceByGroupIDAndNamespaceHandler
	// NamespacesGetNamespaceByNameHandler sets the operation handler for the get namespace by name operation
	NamespacesGetNamespaceByNameHandler namespaces.GetNamespaceByNameHandler
	// GroupsGetNamespacesByGroupIDHandler sets the operation handler for the get namespaces by group Id operation
	GroupsGetNamespacesByGroupIDHandler groups.GetNamespacesByGroupIDHandler
	// ResourcesGetNodeByNameHandler sets the operation handler for the get node by name operation
	ResourcesGetNodeByNameHandler resources.GetNodeByNameHandler
	// RolesGetRoleByIDHandler sets the operation handler for the get role by Id operation
	RolesGetRoleByIDHandler roles.GetRoleByIDHandler
	// RolesGetRoleByNameHandler sets the operation handler for the get role by name operation
	RolesGetRoleByNameHandler roles.GetRoleByNameHandler
	// RolesGetRolesHandler sets the operation handler for the get roles operation
	RolesGetRolesHandler roles.GetRolesHandler
	// LoginsGetRsaPubKeyHandler sets the operation handler for the get rsa pub key operation
	LoginsGetRsaPubKeyHandler logins.GetRsaPubKeyHandler
	// UsersGetSAByNameHandler sets the operation handler for the get s a by name operation
	UsersGetSAByNameHandler users.GetSAByNameHandler
	// StoragesGetStorageByPathHandler sets the operation handler for the get storage by path operation
	StoragesGetStorageByPathHandler storages.GetStorageByPathHandler
	// UsersGetUserByUserIDHandler sets the operation handler for the get user by user Id operation
	UsersGetUserByUserIDHandler users.GetUserByUserIDHandler
	// UsersGetUserByUserNameHandler sets the operation handler for the get user by user name operation
	UsersGetUserByUserNameHandler users.GetUserByUserNameHandler
	// GroupsGetUserGroupByUserIDAndGroupIDHandler sets the operation handler for the get user group by user Id and group Id operation
	GroupsGetUserGroupByUserIDAndGroupIDHandler groups.GetUserGroupByUserIDAndGroupIDHandler
	// IntersIPInterceptorHandler sets the operation handler for the Ip interceptor operation
	IntersIPInterceptorHandler inters.IPInterceptorHandler
	// LoginsLDAPLoginHandler sets the operation handler for the l d a p login operation
	LoginsLDAPLoginHandler logins.LDAPLoginHandler
	// LogoutsLogoutHandler sets the operation handler for the logout operation
	LogoutsLogoutHandler logouts.LogoutHandler
	// AlertsReceiveTaskAlertHandler sets the operation handler for the receive task alert operation
	AlertsReceiveTaskAlertHandler alerts.ReceiveTaskAlertHandler
	// ResourcesRemoveNodeLabelHandler sets the operation handler for the remove node label operation
	ResourcesRemoveNodeLabelHandler resources.RemoveNodeLabelHandler
	// SamplesSampleGetHandler sets the operation handler for the sample get operation
	SamplesSampleGetHandler samples.SampleGetHandler
	// SamplesSamplePostHandler sets the operation handler for the sample post operation
	SamplesSamplePostHandler samples.SamplePostHandler
	// ResourcesSetNamespaceRQHandler sets the operation handler for the set namespace r q operation
	ResourcesSetNamespaceRQHandler resources.SetNamespaceRQHandler
	// LoginsUMLoginHandler sets the operation handler for the u m login operation
	LoginsUMLoginHandler logins.UMLoginHandler
	// GroupsUpdateGroupHandler sets the operation handler for the update group operation
	GroupsUpdateGroupHandler groups.UpdateGroupHandler
	// GroupsUpdateGroupStorageHandler sets the operation handler for the update group storage operation
	GroupsUpdateGroupStorageHandler groups.UpdateGroupStorageHandler
	// ResourcesUpdateLabelsHandler sets the operation handler for the update labels operation
	ResourcesUpdateLabelsHandler resources.UpdateLabelsHandler
	// NamespacesUpdateNamespaceHandler sets the operation handler for the update namespace operation
	NamespacesUpdateNamespaceHandler namespaces.UpdateNamespaceHandler
	// RolesUpdateRoleHandler sets the operation handler for the update role operation
	RolesUpdateRoleHandler roles.UpdateRoleHandler
	// StoragesUpdateStorageHandler sets the operation handler for the update storage operation
	StoragesUpdateStorageHandler storages.UpdateStorageHandler
	// UsersUpdateUserHandler sets the operation handler for the update user operation
	UsersUpdateUserHandler users.UpdateUserHandler
	// GroupsUpdateUserGroupHandler sets the operation handler for the update user group operation
	GroupsUpdateUserGroupHandler groups.UpdateUserGroupHandler
	// IntersUserInterceptorHandler sets the operation handler for the user interceptor operation
	IntersUserInterceptorHandler inters.UserInterceptorHandler
	// AuthsUserNamespaceCheckHandler sets the operation handler for the user namespace check operation
	AuthsUserNamespaceCheckHandler auths.UserNamespaceCheckHandler
	// AuthsUserStorageCheckHandler sets the operation handler for the user storage check operation
	AuthsUserStorageCheckHandler auths.UserStorageCheckHandler
	// AuthsUserStoragePathCheckHandler sets the operation handler for the user storage path check operation
	AuthsUserStoragePathCheckHandler auths.UserStoragePathCheckHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MlssCcAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MlssCcAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MlssCcAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MlssCcAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MlssCcAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MlssCcAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MlssCcAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MlssCcAPI
func (o *MlssCcAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GroupsAddGroupHandler == nil {
		unregistered = append(unregistered, "groups.AddGroupHandler")
	}

	if o.KeysAddKeyHandler == nil {
		unregistered = append(unregistered, "keys.AddKeyHandler")
	}

	if o.ResourcesAddLabelsHandler == nil {
		unregistered = append(unregistered, "resources.AddLabelsHandler")
	}

	if o.NamespacesAddNamespaceHandler == nil {
		unregistered = append(unregistered, "namespaces.AddNamespaceHandler")
	}

	if o.GroupsAddNamespaceToGroupHandler == nil {
		unregistered = append(unregistered, "groups.AddNamespaceToGroupHandler")
	}

	if o.RolesAddRoleHandler == nil {
		unregistered = append(unregistered, "roles.AddRoleHandler")
	}

	if o.StoragesAddStorageHandler == nil {
		unregistered = append(unregistered, "storages.AddStorageHandler")
	}

	if o.GroupsAddStorageToGroupHandler == nil {
		unregistered = append(unregistered, "groups.AddStorageToGroupHandler")
	}

	if o.UsersAddUserHandler == nil {
		unregistered = append(unregistered, "users.AddUserHandler")
	}

	if o.GroupsAddUserToGroupHandler == nil {
		unregistered = append(unregistered, "groups.AddUserToGroupHandler")
	}

	if o.AuthsAdminUserCheckHandler == nil {
		unregistered = append(unregistered, "auths.AdminUserCheckHandler")
	}

	if o.IntersAuthInterceptorHandler == nil {
		unregistered = append(unregistered, "inters.AuthInterceptorHandler")
	}

	if o.AuthsCheckCurrentUserNamespacedNotebookHandler == nil {
		unregistered = append(unregistered, "auths.CheckCurrentUserNamespacedNotebookHandler")
	}

	if o.AuthsCheckNamespaceHandler == nil {
		unregistered = append(unregistered, "auths.CheckNamespaceHandler")
	}

	if o.AuthsCheckNamespaceUserHandler == nil {
		unregistered = append(unregistered, "auths.CheckNamespaceUserHandler")
	}

	if o.AuthsCheckUserGetNamespaceHandler == nil {
		unregistered = append(unregistered, "auths.CheckUserGetNamespaceHandler")
	}

	if o.KeysDeleteByNameHandler == nil {
		unregistered = append(unregistered, "keys.DeleteByNameHandler")
	}

	if o.GroupsDeleteGroupByIDHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupByIDHandler")
	}

	if o.GroupsDeleteGroupByNameHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupByNameHandler")
	}

	if o.GroupsDeleteGroupNamespaceHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupNamespaceHandler")
	}

	if o.NamespacesDeleteNamespaceByNameHandler == nil {
		unregistered = append(unregistered, "namespaces.DeleteNamespaceByNameHandler")
	}

	if o.StoragesDeleteStorageByIDHandler == nil {
		unregistered = append(unregistered, "storages.DeleteStorageByIDHandler")
	}

	if o.StoragesDeleteStorageByPathHandler == nil {
		unregistered = append(unregistered, "storages.DeleteStorageByPathHandler")
	}

	if o.GroupsDeleteStorageFromGroupHandler == nil {
		unregistered = append(unregistered, "groups.DeleteStorageFromGroupHandler")
	}

	if o.UsersDeleteUserByIDHandler == nil {
		unregistered = append(unregistered, "users.DeleteUserByIDHandler")
	}

	if o.UsersDeleteUserByNameHandler == nil {
		unregistered = append(unregistered, "users.DeleteUserByNameHandler")
	}

	if o.GroupsDeleteUserFromGroupHandler == nil {
		unregistered = append(unregistered, "groups.DeleteUserFromGroupHandler")
	}

	if o.GroupsDeleteUserGroupByUserIDAndGroupIDHandler == nil {
		unregistered = append(unregistered, "groups.DeleteUserGroupByUserIDAndGroupIDHandler")
	}

	if o.GroupsGetAllGroupNamespaceByNamespaceIDHandler == nil {
		unregistered = append(unregistered, "groups.GetAllGroupNamespaceByNamespaceIDHandler")
	}

	if o.GroupsGetAllGroupStorageByStorageIDHandler == nil {
		unregistered = append(unregistered, "groups.GetAllGroupStorageByStorageIDHandler")
	}

	if o.GroupsGetAllGroupsHandler == nil {
		unregistered = append(unregistered, "groups.GetAllGroupsHandler")
	}

	if o.NamespacesGetAllNamespacesHandler == nil {
		unregistered = append(unregistered, "namespaces.GetAllNamespacesHandler")
	}

	if o.StoragesGetAllStorageHandler == nil {
		unregistered = append(unregistered, "storages.GetAllStorageHandler")
	}

	if o.GroupsGetAllUserGroupByUserIDHandler == nil {
		unregistered = append(unregistered, "groups.GetAllUserGroupByUserIDHandler")
	}

	if o.UsersGetAllUsersHandler == nil {
		unregistered = append(unregistered, "users.GetAllUsersHandler")
	}

	if o.KeysGetByNameHandler == nil {
		unregistered = append(unregistered, "keys.GetByNameHandler")
	}

	if o.GroupsGetCurrentUserNamespaceWithRoleHandler == nil {
		unregistered = append(unregistered, "groups.GetCurrentUserNamespaceWithRoleHandler")
	}

	if o.GroupsGetCurrentUserStoragePathHandler == nil {
		unregistered = append(unregistered, "groups.GetCurrentUserStoragePathHandler")
	}

	if o.GroupsGetGroupByGroupIDHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupByGroupIDHandler")
	}

	if o.GroupsGetGroupByNameHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupByNameHandler")
	}

	if o.ResourcesGetLabelsOfNodeHandler == nil {
		unregistered = append(unregistered, "resources.GetLabelsOfNodeHandler")
	}

	if o.NamespacesGetMyNamespaceHandler == nil {
		unregistered = append(unregistered, "namespaces.GetMyNamespaceHandler")
	}

	if o.UsersGetMyUsersHandler == nil {
		unregistered = append(unregistered, "users.GetMyUsersHandler")
	}

	if o.GroupsGetNamespaceByGroupIDAndNamespaceHandler == nil {
		unregistered = append(unregistered, "groups.GetNamespaceByGroupIDAndNamespaceHandler")
	}

	if o.NamespacesGetNamespaceByNameHandler == nil {
		unregistered = append(unregistered, "namespaces.GetNamespaceByNameHandler")
	}

	if o.GroupsGetNamespacesByGroupIDHandler == nil {
		unregistered = append(unregistered, "groups.GetNamespacesByGroupIDHandler")
	}

	if o.ResourcesGetNodeByNameHandler == nil {
		unregistered = append(unregistered, "resources.GetNodeByNameHandler")
	}

	if o.RolesGetRoleByIDHandler == nil {
		unregistered = append(unregistered, "roles.GetRoleByIDHandler")
	}

	if o.RolesGetRoleByNameHandler == nil {
		unregistered = append(unregistered, "roles.GetRoleByNameHandler")
	}

	if o.RolesGetRolesHandler == nil {
		unregistered = append(unregistered, "roles.GetRolesHandler")
	}

	if o.LoginsGetRsaPubKeyHandler == nil {
		unregistered = append(unregistered, "logins.GetRsaPubKeyHandler")
	}

	if o.UsersGetSAByNameHandler == nil {
		unregistered = append(unregistered, "users.GetSAByNameHandler")
	}

	if o.StoragesGetStorageByPathHandler == nil {
		unregistered = append(unregistered, "storages.GetStorageByPathHandler")
	}

	if o.UsersGetUserByUserIDHandler == nil {
		unregistered = append(unregistered, "users.GetUserByUserIDHandler")
	}

	if o.UsersGetUserByUserNameHandler == nil {
		unregistered = append(unregistered, "users.GetUserByUserNameHandler")
	}

	if o.GroupsGetUserGroupByUserIDAndGroupIDHandler == nil {
		unregistered = append(unregistered, "groups.GetUserGroupByUserIDAndGroupIDHandler")
	}

	if o.IntersIPInterceptorHandler == nil {
		unregistered = append(unregistered, "inters.IPInterceptorHandler")
	}

	if o.LoginsLDAPLoginHandler == nil {
		unregistered = append(unregistered, "logins.LDAPLoginHandler")
	}

	if o.LogoutsLogoutHandler == nil {
		unregistered = append(unregistered, "logouts.LogoutHandler")
	}

	if o.AlertsReceiveTaskAlertHandler == nil {
		unregistered = append(unregistered, "alerts.ReceiveTaskAlertHandler")
	}

	if o.ResourcesRemoveNodeLabelHandler == nil {
		unregistered = append(unregistered, "resources.RemoveNodeLabelHandler")
	}

	if o.SamplesSampleGetHandler == nil {
		unregistered = append(unregistered, "samples.SampleGetHandler")
	}

	if o.SamplesSamplePostHandler == nil {
		unregistered = append(unregistered, "samples.SamplePostHandler")
	}

	if o.ResourcesSetNamespaceRQHandler == nil {
		unregistered = append(unregistered, "resources.SetNamespaceRQHandler")
	}

	if o.LoginsUMLoginHandler == nil {
		unregistered = append(unregistered, "logins.UMLoginHandler")
	}

	if o.GroupsUpdateGroupHandler == nil {
		unregistered = append(unregistered, "groups.UpdateGroupHandler")
	}

	if o.GroupsUpdateGroupStorageHandler == nil {
		unregistered = append(unregistered, "groups.UpdateGroupStorageHandler")
	}

	if o.ResourcesUpdateLabelsHandler == nil {
		unregistered = append(unregistered, "resources.UpdateLabelsHandler")
	}

	if o.NamespacesUpdateNamespaceHandler == nil {
		unregistered = append(unregistered, "namespaces.UpdateNamespaceHandler")
	}

	if o.RolesUpdateRoleHandler == nil {
		unregistered = append(unregistered, "roles.UpdateRoleHandler")
	}

	if o.StoragesUpdateStorageHandler == nil {
		unregistered = append(unregistered, "storages.UpdateStorageHandler")
	}

	if o.UsersUpdateUserHandler == nil {
		unregistered = append(unregistered, "users.UpdateUserHandler")
	}

	if o.GroupsUpdateUserGroupHandler == nil {
		unregistered = append(unregistered, "groups.UpdateUserGroupHandler")
	}

	if o.IntersUserInterceptorHandler == nil {
		unregistered = append(unregistered, "inters.UserInterceptorHandler")
	}

	if o.AuthsUserNamespaceCheckHandler == nil {
		unregistered = append(unregistered, "auths.UserNamespaceCheckHandler")
	}

	if o.AuthsUserStorageCheckHandler == nil {
		unregistered = append(unregistered, "auths.UserStorageCheckHandler")
	}

	if o.AuthsUserStoragePathCheckHandler == nil {
		unregistered = append(unregistered, "auths.UserStoragePathCheckHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MlssCcAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MlssCcAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *MlssCcAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *MlssCcAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MlssCcAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MlssCcAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mlss cc API
func (o *MlssCcAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MlssCcAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/groups"] = groups.NewAddGroup(o.context, o.GroupsAddGroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/keys"] = keys.NewAddKey(o.context, o.KeysAddKeyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/resources/labels"] = resources.NewAddLabels(o.context, o.ResourcesAddLabelsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/namespaces"] = namespaces.NewAddNamespace(o.context, o.NamespacesAddNamespaceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/groups/namespaces"] = groups.NewAddNamespaceToGroup(o.context, o.GroupsAddNamespaceToGroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/roles"] = roles.NewAddRole(o.context, o.RolesAddRoleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/storages"] = storages.NewAddStorage(o.context, o.StoragesAddStorageHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/groups/storages"] = groups.NewAddStorageToGroup(o.context, o.GroupsAddStorageToGroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/users"] = users.NewAddUser(o.context, o.UsersAddUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/groups/users"] = groups.NewAddUserToGroup(o.context, o.GroupsAddUserToGroupHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/users/{adminUsername}/users/{username}"] = auths.NewAdminUserCheck(o.context, o.AuthsAdminUserCheckHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/inter/auth"] = inters.NewAuthInterceptor(o.context, o.IntersAuthInterceptorHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/namespaces/{namespace}/notebooks/{notebook}"] = auths.NewCheckCurrentUserNamespacedNotebook(o.context, o.AuthsCheckCurrentUserNamespacedNotebookHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/admin/namespaces/{namespace}"] = auths.NewCheckNamespace(o.context, o.AuthsCheckNamespaceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/admin/namespaces/{namespace}/users/{username}"] = auths.NewCheckNamespaceUser(o.context, o.AuthsCheckNamespaceUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/admin/users/{username}"] = auths.NewCheckUserGetNamespace(o.context, o.AuthsCheckUserGetNamespaceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/keys/{name}"] = keys.NewDeleteByName(o.context, o.KeysDeleteByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/groups/id/{groupId}"] = groups.NewDeleteGroupByID(o.context, o.GroupsDeleteGroupByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/groups/name/{groupName}"] = groups.NewDeleteGroupByName(o.context, o.GroupsDeleteGroupByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/groups/namespaces/id/{id}"] = groups.NewDeleteGroupNamespace(o.context, o.GroupsDeleteGroupNamespaceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/namespaces/namespace/{namespace}"] = namespaces.NewDeleteNamespaceByName(o.context, o.NamespacesDeleteNamespaceByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/storages/id/{storageId}"] = storages.NewDeleteStorageByID(o.context, o.StoragesDeleteStorageByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/storages/path"] = storages.NewDeleteStorageByPath(o.context, o.StoragesDeleteStorageByPathHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/groups/groupStorage/id/{id}"] = groups.NewDeleteStorageFromGroup(o.context, o.GroupsDeleteStorageFromGroupHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/users/id/{userId}"] = users.NewDeleteUserByID(o.context, o.UsersDeleteUserByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/users/name/{userName}"] = users.NewDeleteUserByName(o.context, o.UsersDeleteUserByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/groups/userGroup/id/{id}"] = groups.NewDeleteUserFromGroup(o.context, o.GroupsDeleteUserFromGroupHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/groups/userGroup/user/{userId}/group/{groupId}"] = groups.NewDeleteUserGroupByUserIDAndGroupID(o.context, o.GroupsDeleteUserGroupByUserIDAndGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/groupNamespace/{namespaceId}"] = groups.NewGetAllGroupNamespaceByNamespaceID(o.context, o.GroupsGetAllGroupNamespaceByNamespaceIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/groupStorage/storage/{storageId}"] = groups.NewGetAllGroupStorageByStorageID(o.context, o.GroupsGetAllGroupStorageByStorageIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups"] = groups.NewGetAllGroups(o.context, o.GroupsGetAllGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/namespaces"] = namespaces.NewGetAllNamespaces(o.context, o.NamespacesGetAllNamespacesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/storages"] = storages.NewGetAllStorage(o.context, o.StoragesGetAllStorageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/userGroup/user/{userId}"] = groups.NewGetAllUserGroupByUserID(o.context, o.GroupsGetAllUserGroupByUserIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/users"] = users.NewGetAllUsers(o.context, o.UsersGetAllUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/keys/{name}"] = keys.NewGetByName(o.context, o.KeysGetByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/users/roles/{roleId}/namespaces/clusterName/{clusterName}"] = groups.NewGetCurrentUserNamespaceWithRole(o.context, o.GroupsGetCurrentUserNamespaceWithRoleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/group/storage"] = groups.NewGetCurrentUserStoragePath(o.context, o.GroupsGetCurrentUserStoragePathHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/id/{groupId}"] = groups.NewGetGroupByGroupID(o.context, o.GroupsGetGroupByGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/name/{groupName}"] = groups.NewGetGroupByName(o.context, o.GroupsGetGroupByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/resources/labels"] = resources.NewGetLabelsOfNode(o.context, o.ResourcesGetLabelsOfNodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/namespaces/myNamespace"] = namespaces.NewGetMyNamespace(o.context, o.NamespacesGetMyNamespaceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/users/myUsers"] = users.NewGetMyUsers(o.context, o.UsersGetMyUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/{groupId}/namespace/{namespaceId}"] = groups.NewGetNamespaceByGroupIDAndNamespace(o.context, o.GroupsGetNamespaceByGroupIDAndNamespaceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/namespaces/namespace/{namespace}"] = namespaces.NewGetNamespaceByName(o.context, o.NamespacesGetNamespaceByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/{groupId}/namespaces"] = groups.NewGetNamespacesByGroupID(o.context, o.GroupsGetNamespacesByGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/resources/{nodeName}"] = resources.NewGetNodeByName(o.context, o.ResourcesGetNodeByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/roles/id/{id}"] = roles.NewGetRoleByID(o.context, o.RolesGetRoleByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/roles/name/{name}"] = roles.NewGetRoleByName(o.context, o.RolesGetRoleByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/roles"] = roles.NewGetRoles(o.context, o.RolesGetRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/getrsapubkey"] = logins.NewGetRsaPubKey(o.context, o.LoginsGetRsaPubKeyHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/users/admin/{name}"] = users.NewGetSAByName(o.context, o.UsersGetSAByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/storages/path"] = storages.NewGetStorageByPath(o.context, o.StoragesGetStorageByPathHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/users/id/{userId}"] = users.NewGetUserByUserID(o.context, o.UsersGetUserByUserIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/users/name/{userName}"] = users.NewGetUserByUserName(o.context, o.UsersGetUserByUserNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/groups/userGroup/user/{userId}/group/{groupId}"] = groups.NewGetUserGroupByUserIDAndGroupID(o.context, o.GroupsGetUserGroupByUserIDAndGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/inter/ip"] = inters.NewIPInterceptor(o.context, o.IntersIPInterceptorHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/LDAPlogin"] = logins.NewLDAPLogin(o.context, o.LoginsLDAPLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/logout"] = logouts.NewLogout(o.context, o.LogoutsLogoutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/alerts/training"] = alerts.NewReceiveTaskAlert(o.context, o.AlertsReceiveTaskAlertHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/cc/v1/nodes/{nodeName}/labels/{label}"] = resources.NewRemoveNodeLabel(o.context, o.ResourcesRemoveNodeLabelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/sample"] = samples.NewSampleGet(o.context, o.SamplesSampleGetHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cc/v1/sample"] = samples.NewSamplePost(o.context, o.SamplesSamplePostHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/resources"] = resources.NewSetNamespaceRQ(o.context, o.ResourcesSetNamespaceRQHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/login"] = logins.NewUMLogin(o.context, o.LoginsUMLoginHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/groups"] = groups.NewUpdateGroup(o.context, o.GroupsUpdateGroupHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/groups/storages"] = groups.NewUpdateGroupStorage(o.context, o.GroupsUpdateGroupStorageHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/resources/labels"] = resources.NewUpdateLabels(o.context, o.ResourcesUpdateLabelsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/namespaces"] = namespaces.NewUpdateNamespace(o.context, o.NamespacesUpdateNamespaceHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/roles"] = roles.NewUpdateRole(o.context, o.RolesUpdateRoleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/storages"] = storages.NewUpdateStorage(o.context, o.StoragesUpdateStorageHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/users"] = users.NewUpdateUser(o.context, o.UsersUpdateUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/cc/v1/groups/users"] = groups.NewUpdateUserGroup(o.context, o.GroupsUpdateUserGroupHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/inter/user"] = inters.NewUserInterceptor(o.context, o.IntersUserInterceptorHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/users/{username}/namespaces/{namespace}"] = auths.NewUserNamespaceCheck(o.context, o.AuthsUserNamespaceCheckHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/users/{username}/storages"] = auths.NewUserStorageCheck(o.context, o.AuthsUserStorageCheckHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cc/v1/auth/access/users/{username}/namespaces/{namespace}/storages"] = auths.NewUserStoragePathCheck(o.context, o.AuthsUserStoragePathCheckHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MlssCcAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MlssCcAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MlssCcAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MlssCcAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
