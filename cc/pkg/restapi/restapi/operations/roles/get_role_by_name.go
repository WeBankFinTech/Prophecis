// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRoleByNameHandlerFunc turns a function with the right signature into a get role by name handler
type GetRoleByNameHandlerFunc func(GetRoleByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRoleByNameHandlerFunc) Handle(params GetRoleByNameParams) middleware.Responder {
	return fn(params)
}

// GetRoleByNameHandler interface for that can handle valid get role by name params
type GetRoleByNameHandler interface {
	Handle(GetRoleByNameParams) middleware.Responder
}

// NewGetRoleByName creates a new http.Handler for the get role by name operation
func NewGetRoleByName(ctx *middleware.Context, handler GetRoleByNameHandler) *GetRoleByName {
	return &GetRoleByName{Context: ctx, Handler: handler}
}

/*GetRoleByName swagger:route GET /cc/v1/roles/name/{name} Roles getRoleByName

get roles.

Optional extended description in Markdown.

*/
type GetRoleByName struct {
	Context *middleware.Context
	Handler GetRoleByNameHandler
}

func (o *GetRoleByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRoleByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
