// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserByUserIDHandlerFunc turns a function with the right signature into a get user by user Id handler
type GetUserByUserIDHandlerFunc func(GetUserByUserIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserByUserIDHandlerFunc) Handle(params GetUserByUserIDParams) middleware.Responder {
	return fn(params)
}

// GetUserByUserIDHandler interface for that can handle valid get user by user Id params
type GetUserByUserIDHandler interface {
	Handle(GetUserByUserIDParams) middleware.Responder
}

// NewGetUserByUserID creates a new http.Handler for the get user by user Id operation
func NewGetUserByUserID(ctx *middleware.Context, handler GetUserByUserIDHandler) *GetUserByUserID {
	return &GetUserByUserID{Context: ctx, Handler: handler}
}

/*GetUserByUserID swagger:route GET /cc/v1/users/id/{userId} Users getUserByUserId

Returns a user.

Optional extended description in Markdown.

*/
type GetUserByUserID struct {
	Context *middleware.Context
	Handler GetUserByUserIDHandler
}

func (o *GetUserByUserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserByUserIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
