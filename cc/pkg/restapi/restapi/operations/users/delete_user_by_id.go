// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteUserByIDHandlerFunc turns a function with the right signature into a delete user by Id handler
type DeleteUserByIDHandlerFunc func(DeleteUserByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteUserByIDHandlerFunc) Handle(params DeleteUserByIDParams) middleware.Responder {
	return fn(params)
}

// DeleteUserByIDHandler interface for that can handle valid delete user by Id params
type DeleteUserByIDHandler interface {
	Handle(DeleteUserByIDParams) middleware.Responder
}

// NewDeleteUserByID creates a new http.Handler for the delete user by Id operation
func NewDeleteUserByID(ctx *middleware.Context, handler DeleteUserByIDHandler) *DeleteUserByID {
	return &DeleteUserByID{Context: ctx, Handler: handler}
}

/*DeleteUserByID swagger:route DELETE /cc/v1/users/id/{userId} Users deleteUserById

Returns a user.

Optional extended description in Markdown.

*/
type DeleteUserByID struct {
	Context *middleware.Context
	Handler DeleteUserByIDHandler
}

func (o *DeleteUserByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteUserByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
