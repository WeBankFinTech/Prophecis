// Code generated by go-swagger; DO NOT EDIT.

package storages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-controlcenter-go/pkg/models"
)

// DeleteStorageByPathOKCode is the HTTP code returned for type DeleteStorageByPathOK
const DeleteStorageByPathOKCode int = 200

/*DeleteStorageByPathOK Detailed Storage and Storage information.

swagger:response deleteStorageByPathOK
*/
type DeleteStorageByPathOK struct {

	/*
	  In: Body
	*/
	Payload *models.Storage `json:"body,omitempty"`
}

// NewDeleteStorageByPathOK creates DeleteStorageByPathOK with default headers values
func NewDeleteStorageByPathOK() *DeleteStorageByPathOK {

	return &DeleteStorageByPathOK{}
}

// WithPayload adds the payload to the delete storage by path o k response
func (o *DeleteStorageByPathOK) WithPayload(payload *models.Storage) *DeleteStorageByPathOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete storage by path o k response
func (o *DeleteStorageByPathOK) SetPayload(payload *models.Storage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStorageByPathOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteStorageByPathUnauthorizedCode is the HTTP code returned for type DeleteStorageByPathUnauthorized
const DeleteStorageByPathUnauthorizedCode int = 401

/*DeleteStorageByPathUnauthorized Unauthorized

swagger:response deleteStorageByPathUnauthorized
*/
type DeleteStorageByPathUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStorageByPathUnauthorized creates DeleteStorageByPathUnauthorized with default headers values
func NewDeleteStorageByPathUnauthorized() *DeleteStorageByPathUnauthorized {

	return &DeleteStorageByPathUnauthorized{}
}

// WithPayload adds the payload to the delete storage by path unauthorized response
func (o *DeleteStorageByPathUnauthorized) WithPayload(payload *models.Error) *DeleteStorageByPathUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete storage by path unauthorized response
func (o *DeleteStorageByPathUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStorageByPathUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteStorageByPathNotFoundCode is the HTTP code returned for type DeleteStorageByPathNotFound
const DeleteStorageByPathNotFoundCode int = 404

/*DeleteStorageByPathNotFound Model with the given ID not found.

swagger:response deleteStorageByPathNotFound
*/
type DeleteStorageByPathNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteStorageByPathNotFound creates DeleteStorageByPathNotFound with default headers values
func NewDeleteStorageByPathNotFound() *DeleteStorageByPathNotFound {

	return &DeleteStorageByPathNotFound{}
}

// WithPayload adds the payload to the delete storage by path not found response
func (o *DeleteStorageByPathNotFound) WithPayload(payload *models.Error) *DeleteStorageByPathNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete storage by path not found response
func (o *DeleteStorageByPathNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteStorageByPathNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
