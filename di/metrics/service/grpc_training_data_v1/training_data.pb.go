//
// Copyright 2017-2018 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: training_data.proto

package grpc_training_data_v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Any_DataType int32

const (
	Any_STRING     Any_DataType = 0
	Any_JSONSTRING Any_DataType = 1
	Any_INT        Any_DataType = 2
	Any_FLOAT      Any_DataType = 3
)

// Enum value maps for Any_DataType.
var (
	Any_DataType_name = map[int32]string{
		0: "STRING",
		1: "JSONSTRING",
		2: "INT",
		3: "FLOAT",
	}
	Any_DataType_value = map[string]int32{
		"STRING":     0,
		"JSONSTRING": 1,
		"INT":        2,
		"FLOAT":      3,
	}
)

func (x Any_DataType) Enum() *Any_DataType {
	p := new(Any_DataType)
	*p = x
	return p
}

func (x Any_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Any_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_training_data_proto_enumTypes[0].Descriptor()
}

func (Any_DataType) Type() protoreflect.EnumType {
	return &file_training_data_proto_enumTypes[0]
}

func (x Any_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Any_DataType.Descriptor instead.
func (Any_DataType) EnumDescriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{4, 0}
}

type Query_SearchType int32

const (
	Query_TERM   Query_SearchType = 0
	Query_NESTED Query_SearchType = 1
	Query_MATCH  Query_SearchType = 2
	Query_ALL    Query_SearchType = 3
)

// Enum value maps for Query_SearchType.
var (
	Query_SearchType_name = map[int32]string{
		0: "TERM",
		1: "NESTED",
		2: "MATCH",
		3: "ALL",
	}
	Query_SearchType_value = map[string]int32{
		"TERM":   0,
		"NESTED": 1,
		"MATCH":  2,
		"ALL":    3,
	}
)

func (x Query_SearchType) Enum() *Query_SearchType {
	p := new(Query_SearchType)
	*p = x
	return p
}

func (x Query_SearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_SearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_training_data_proto_enumTypes[1].Descriptor()
}

func (Query_SearchType) Type() protoreflect.EnumType {
	return &file_training_data_proto_enumTypes[1]
}

func (x Query_SearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_SearchType.Descriptor instead.
func (Query_SearchType) EnumDescriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{7, 0}
}

type MetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id identifying the training job
	TrainingId string `protobuf:"bytes,1,opt,name=training_id,json=trainingId,proto3" json:"training_id,omitempty"`
	// Unique id identifying the user
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Time that the metric occured: representing the number of millisecond since midnight January 1, 1970.
	Time int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	// Sequential index
	Rindex int64 `protobuf:"varint,4,opt,name=rindex,proto3" json:"rindex,omitempty"`
	// Optional subid
	Subid string `protobuf:"bytes,5,opt,name=subid,proto3" json:"subid,omitempty"`
}

func (x *MetaInfo) Reset() {
	*x = MetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInfo) ProtoMessage() {}

func (x *MetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInfo.ProtoReflect.Descriptor instead.
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{0}
}

func (x *MetaInfo) GetTrainingId() string {
	if x != nil {
		return x.TrainingId
	}
	return ""
}

func (x *MetaInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MetaInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MetaInfo) GetRindex() int64 {
	if x != nil {
		return x.Rindex
	}
	return 0
}

func (x *MetaInfo) GetSubid() string {
	if x != nil {
		return x.Subid
	}
	return ""
}

type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *MetaInfo `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Line string    `protobuf:"bytes,2,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{1}
}

func (x *LogLine) GetMeta() *MetaInfo {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LogLine) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

type LogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log        []string `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
	IsLastLine bool     `protobuf:"varint,2,opt,name=isLastLine,proto3" json:"isLastLine,omitempty"`
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{2}
}

func (x *LogResponse) GetLog() []string {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *LogResponse) GetIsLastLine() bool {
	if x != nil {
		return x.IsLastLine
	}
	return false
}

type LogLineBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force   bool       `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	LogLine []*LogLine `protobuf:"bytes,2,rep,name=logLine,proto3" json:"logLine,omitempty"`
}

func (x *LogLineBatch) Reset() {
	*x = LogLineBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLineBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLineBatch) ProtoMessage() {}

func (x *LogLineBatch) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLineBatch.ProtoReflect.Descriptor instead.
func (*LogLineBatch) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{3}
}

func (x *LogLineBatch) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *LogLineBatch) GetLogLine() []*LogLine {
	if x != nil {
		return x.LogLine
	}
	return nil
}

type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Any_DataType `protobuf:"varint,1,opt,name=type,proto3,enum=grpc.training.data.v1.Any_DataType" json:"type,omitempty"`
	Value string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Any) Reset() {
	*x = Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{4}
}

func (x *Any) GetType() Any_DataType {
	if x != nil {
		return x.Type
	}
	return Any_STRING
}

func (x *Any) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *MetaInfo `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Repeated, order-dependent list of temporal keys
	// Example: {"iteration": 209}
	Etimes map[string]*Any `protobuf:"bytes,2,rep,name=etimes,proto3" json:"etimes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Group label, such as test, train, or validate
	Grouplabel string `protobuf:"bytes,3,opt,name=grouplabel,proto3" json:"grouplabel,omitempty"`
	/// {"cross_entropy": 0.4430539906024933,	"accuracy": 0.8999999761581421}
	Values map[string]*Any `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EMetrics) Reset() {
	*x = EMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMetrics) ProtoMessage() {}

func (x *EMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMetrics.ProtoReflect.Descriptor instead.
func (*EMetrics) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{5}
}

func (x *EMetrics) GetMeta() *MetaInfo {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EMetrics) GetEtimes() map[string]*Any {
	if x != nil {
		return x.Etimes
	}
	return nil
}

func (x *EMetrics) GetGrouplabel() string {
	if x != nil {
		return x.Grouplabel
	}
	return ""
}

func (x *EMetrics) GetValues() map[string]*Any {
	if x != nil {
		return x.Values
	}
	return nil
}

type EMetricsBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force    bool        `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	Emetrics []*EMetrics `protobuf:"bytes,2,rep,name=emetrics,proto3" json:"emetrics,omitempty"`
}

func (x *EMetricsBatch) Reset() {
	*x = EMetricsBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMetricsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMetricsBatch) ProtoMessage() {}

func (x *EMetricsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMetricsBatch.ProtoReflect.Descriptor instead.
func (*EMetricsBatch) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{6}
}

func (x *EMetricsBatch) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *EMetricsBatch) GetEmetrics() []*EMetrics {
	if x != nil {
		return x.Emetrics
	}
	return nil
}

// Playing with semi-generalized query request.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchType Query_SearchType `protobuf:"varint,1,opt,name=searchType,proto3,enum=grpc.training.data.v1.Query_SearchType" json:"searchType,omitempty"`
	// The following three options are exclusive
	Meta  *MetaInfo `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	Since string    `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"` // representing the number of milliseconds since midnight January 1, 1970.
	// Only get this many records
	Pagesize int32 `protobuf:"varint,5,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	// The starting position.  If positive or zero, count from beginning, if negative, count from end.
	Pos            int64  `protobuf:"varint,6,opt,name=pos,proto3" json:"pos,omitempty"`
	StartToEndLine string `protobuf:"bytes,7,opt,name=startToEndLine,proto3" json:"startToEndLine,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{7}
}

func (x *Query) GetSearchType() Query_SearchType {
	if x != nil {
		return x.SearchType
	}
	return Query_TERM
}

func (x *Query) GetMeta() *MetaInfo {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Query) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *Query) GetPagesize() int32 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

func (x *Query) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Query) GetStartToEndLine() string {
	if x != nil {
		return x.StartToEndLine
	}
	return ""
}

type DeleteQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The following two options are exclusive
	TrainingId string `protobuf:"bytes,1,opt,name=training_id,json=trainingId,proto3" json:"training_id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteQuery) Reset() {
	*x = DeleteQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuery) ProtoMessage() {}

func (x *DeleteQuery) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuery.ProtoReflect.Descriptor instead.
func (*DeleteQuery) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteQuery) GetTrainingId() string {
	if x != nil {
		return x.TrainingId
	}
	return ""
}

func (x *DeleteQuery) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// ***
type AddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddResponse) Reset() {
	*x = AddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponse) ProtoMessage() {}

func (x *AddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponse.ProtoReflect.Descriptor instead.
func (*AddResponse) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{9}
}

func (x *AddResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{11}
}

func (x *HelloResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_training_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_training_data_proto_rawDescGZIP(), []int{12}
}

var File_training_data_proto protoreflect.FileDescriptor

var file_training_data_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x22, 0x86, 0x01, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x75, 0x62, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x5e, 0x0a, 0x0c, 0x4c, 0x6f,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x03, 0x41,
	0x6e, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x53, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x22, 0x97, 0x03,
	0x0a, 0x08, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x06, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x45, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x45, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x0d, 0x45, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x08, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x6f, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x22,
	0x36, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x45, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x47, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x27, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0xb8, 0x07, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x54, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_training_data_proto_rawDescOnce sync.Once
	file_training_data_proto_rawDescData = file_training_data_proto_rawDesc
)

func file_training_data_proto_rawDescGZIP() []byte {
	file_training_data_proto_rawDescOnce.Do(func() {
		file_training_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_training_data_proto_rawDescData)
	})
	return file_training_data_proto_rawDescData
}

var file_training_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_training_data_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_training_data_proto_goTypes = []interface{}{
	(Any_DataType)(0),      // 0: grpc.training.data.v1.Any.DataType
	(Query_SearchType)(0),  // 1: grpc.training.data.v1.Query.SearchType
	(*MetaInfo)(nil),       // 2: grpc.training.data.v1.MetaInfo
	(*LogLine)(nil),        // 3: grpc.training.data.v1.LogLine
	(*LogResponse)(nil),    // 4: grpc.training.data.v1.LogResponse
	(*LogLineBatch)(nil),   // 5: grpc.training.data.v1.LogLineBatch
	(*Any)(nil),            // 6: grpc.training.data.v1.Any
	(*EMetrics)(nil),       // 7: grpc.training.data.v1.EMetrics
	(*EMetricsBatch)(nil),  // 8: grpc.training.data.v1.EMetricsBatch
	(*Query)(nil),          // 9: grpc.training.data.v1.Query
	(*DeleteQuery)(nil),    // 10: grpc.training.data.v1.DeleteQuery
	(*AddResponse)(nil),    // 11: grpc.training.data.v1.AddResponse
	(*DeleteResponse)(nil), // 12: grpc.training.data.v1.DeleteResponse
	(*HelloResponse)(nil),  // 13: grpc.training.data.v1.HelloResponse
	(*Empty)(nil),          // 14: grpc.training.data.v1.Empty
	nil,                    // 15: grpc.training.data.v1.EMetrics.EtimesEntry
	nil,                    // 16: grpc.training.data.v1.EMetrics.ValuesEntry
}
var file_training_data_proto_depIdxs = []int32{
	2,  // 0: grpc.training.data.v1.LogLine.meta:type_name -> grpc.training.data.v1.MetaInfo
	3,  // 1: grpc.training.data.v1.LogLineBatch.logLine:type_name -> grpc.training.data.v1.LogLine
	0,  // 2: grpc.training.data.v1.Any.type:type_name -> grpc.training.data.v1.Any.DataType
	2,  // 3: grpc.training.data.v1.EMetrics.meta:type_name -> grpc.training.data.v1.MetaInfo
	15, // 4: grpc.training.data.v1.EMetrics.etimes:type_name -> grpc.training.data.v1.EMetrics.EtimesEntry
	16, // 5: grpc.training.data.v1.EMetrics.values:type_name -> grpc.training.data.v1.EMetrics.ValuesEntry
	7,  // 6: grpc.training.data.v1.EMetricsBatch.emetrics:type_name -> grpc.training.data.v1.EMetrics
	1,  // 7: grpc.training.data.v1.Query.searchType:type_name -> grpc.training.data.v1.Query.SearchType
	2,  // 8: grpc.training.data.v1.Query.meta:type_name -> grpc.training.data.v1.MetaInfo
	6,  // 9: grpc.training.data.v1.EMetrics.EtimesEntry.value:type_name -> grpc.training.data.v1.Any
	6,  // 10: grpc.training.data.v1.EMetrics.ValuesEntry.value:type_name -> grpc.training.data.v1.Any
	9,  // 11: grpc.training.data.v1.TrainingData.GetLogs:input_type -> grpc.training.data.v1.Query
	9,  // 12: grpc.training.data.v1.TrainingData.GetLog:input_type -> grpc.training.data.v1.Query
	9,  // 13: grpc.training.data.v1.TrainingData.GetEMetrics:input_type -> grpc.training.data.v1.Query
	7,  // 14: grpc.training.data.v1.TrainingData.AddEMetrics:input_type -> grpc.training.data.v1.EMetrics
	3,  // 15: grpc.training.data.v1.TrainingData.AddLogLine:input_type -> grpc.training.data.v1.LogLine
	8,  // 16: grpc.training.data.v1.TrainingData.AddEMetricsBatch:input_type -> grpc.training.data.v1.EMetricsBatch
	5,  // 17: grpc.training.data.v1.TrainingData.AddLogLineBatch:input_type -> grpc.training.data.v1.LogLineBatch
	9,  // 18: grpc.training.data.v1.TrainingData.DeleteEMetrics:input_type -> grpc.training.data.v1.Query
	9,  // 19: grpc.training.data.v1.TrainingData.DeleteLogLines:input_type -> grpc.training.data.v1.Query
	9,  // 20: grpc.training.data.v1.TrainingData.DeleteJob:input_type -> grpc.training.data.v1.Query
	14, // 21: grpc.training.data.v1.TrainingData.Hello:input_type -> grpc.training.data.v1.Empty
	3,  // 22: grpc.training.data.v1.TrainingData.GetLogs:output_type -> grpc.training.data.v1.LogLine
	4,  // 23: grpc.training.data.v1.TrainingData.GetLog:output_type -> grpc.training.data.v1.LogResponse
	7,  // 24: grpc.training.data.v1.TrainingData.GetEMetrics:output_type -> grpc.training.data.v1.EMetrics
	11, // 25: grpc.training.data.v1.TrainingData.AddEMetrics:output_type -> grpc.training.data.v1.AddResponse
	11, // 26: grpc.training.data.v1.TrainingData.AddLogLine:output_type -> grpc.training.data.v1.AddResponse
	11, // 27: grpc.training.data.v1.TrainingData.AddEMetricsBatch:output_type -> grpc.training.data.v1.AddResponse
	11, // 28: grpc.training.data.v1.TrainingData.AddLogLineBatch:output_type -> grpc.training.data.v1.AddResponse
	12, // 29: grpc.training.data.v1.TrainingData.DeleteEMetrics:output_type -> grpc.training.data.v1.DeleteResponse
	12, // 30: grpc.training.data.v1.TrainingData.DeleteLogLines:output_type -> grpc.training.data.v1.DeleteResponse
	12, // 31: grpc.training.data.v1.TrainingData.DeleteJob:output_type -> grpc.training.data.v1.DeleteResponse
	13, // 32: grpc.training.data.v1.TrainingData.Hello:output_type -> grpc.training.data.v1.HelloResponse
	22, // [22:33] is the sub-list for method output_type
	11, // [11:22] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_training_data_proto_init() }
func file_training_data_proto_init() {
	if File_training_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_training_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLineBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMetricsBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_training_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_training_data_proto_goTypes,
		DependencyIndexes: file_training_data_proto_depIdxs,
		EnumInfos:         file_training_data_proto_enumTypes,
		MessageInfos:      file_training_data_proto_msgTypes,
	}.Build()
	File_training_data_proto = out.File
	file_training_data_proto_rawDesc = nil
	file_training_data_proto_goTypes = nil
	file_training_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrainingDataClient is the client API for TrainingData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainingDataClient interface {
	// Get loglines, based on query
	GetLogs(ctx context.Context, in *Query, opts ...grpc.CallOption) (TrainingData_GetLogsClient, error)
	//Get loglines, response
	GetLog(ctx context.Context, in *Query, opts ...grpc.CallOption) (*LogResponse, error)
	// Get evaluation metrics records, based on query
	GetEMetrics(ctx context.Context, in *Query, opts ...grpc.CallOption) (TrainingData_GetEMetricsClient, error)
	// Add evaluation metrics record
	AddEMetrics(ctx context.Context, in *EMetrics, opts ...grpc.CallOption) (*AddResponse, error)
	// Add log line record
	AddLogLine(ctx context.Context, in *LogLine, opts ...grpc.CallOption) (*AddResponse, error)
	// Add evaluation metrics record
	AddEMetricsBatch(ctx context.Context, in *EMetricsBatch, opts ...grpc.CallOption) (*AddResponse, error)
	// Add log line record
	AddLogLineBatch(ctx context.Context, in *LogLineBatch, opts ...grpc.CallOption) (*AddResponse, error)
	// Delete all evaluation metrics belonging to a training job or user id
	DeleteEMetrics(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Delete all log lines belonging to a training job or user id
	DeleteLogLines(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Delete all log lines belonging to a training job or user id
	DeleteJob(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResponse, error)
	// ===== In case you want it to say "Hello" =========
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponse, error)
}

type trainingDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingDataClient(cc grpc.ClientConnInterface) TrainingDataClient {
	return &trainingDataClient{cc}
}

func (c *trainingDataClient) GetLogs(ctx context.Context, in *Query, opts ...grpc.CallOption) (TrainingData_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrainingData_serviceDesc.Streams[0], "/grpc.training.data.v1.TrainingData/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainingDataGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrainingData_GetLogsClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type trainingDataGetLogsClient struct {
	grpc.ClientStream
}

func (x *trainingDataGetLogsClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trainingDataClient) GetLog(ctx context.Context, in *Query, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) GetEMetrics(ctx context.Context, in *Query, opts ...grpc.CallOption) (TrainingData_GetEMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrainingData_serviceDesc.Streams[1], "/grpc.training.data.v1.TrainingData/GetEMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainingDataGetEMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrainingData_GetEMetricsClient interface {
	Recv() (*EMetrics, error)
	grpc.ClientStream
}

type trainingDataGetEMetricsClient struct {
	grpc.ClientStream
}

func (x *trainingDataGetEMetricsClient) Recv() (*EMetrics, error) {
	m := new(EMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trainingDataClient) AddEMetrics(ctx context.Context, in *EMetrics, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/AddEMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) AddLogLine(ctx context.Context, in *LogLine, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/AddLogLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) AddEMetricsBatch(ctx context.Context, in *EMetricsBatch, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/AddEMetricsBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) AddLogLineBatch(ctx context.Context, in *LogLineBatch, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/AddLogLineBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) DeleteEMetrics(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/DeleteEMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) DeleteLogLines(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/DeleteLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) DeleteJob(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingDataClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/grpc.training.data.v1.TrainingData/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingDataServer is the server API for TrainingData service.
type TrainingDataServer interface {
	// Get loglines, based on query
	GetLogs(*Query, TrainingData_GetLogsServer) error
	//Get loglines, response
	GetLog(context.Context, *Query) (*LogResponse, error)
	// Get evaluation metrics records, based on query
	GetEMetrics(*Query, TrainingData_GetEMetricsServer) error
	// Add evaluation metrics record
	AddEMetrics(context.Context, *EMetrics) (*AddResponse, error)
	// Add log line record
	AddLogLine(context.Context, *LogLine) (*AddResponse, error)
	// Add evaluation metrics record
	AddEMetricsBatch(context.Context, *EMetricsBatch) (*AddResponse, error)
	// Add log line record
	AddLogLineBatch(context.Context, *LogLineBatch) (*AddResponse, error)
	// Delete all evaluation metrics belonging to a training job or user id
	DeleteEMetrics(context.Context, *Query) (*DeleteResponse, error)
	// Delete all log lines belonging to a training job or user id
	DeleteLogLines(context.Context, *Query) (*DeleteResponse, error)
	// Delete all log lines belonging to a training job or user id
	DeleteJob(context.Context, *Query) (*DeleteResponse, error)
	// ===== In case you want it to say "Hello" =========
	Hello(context.Context, *Empty) (*HelloResponse, error)
}

// UnimplementedTrainingDataServer can be embedded to have forward compatible implementations.
type UnimplementedTrainingDataServer struct {
}

func (*UnimplementedTrainingDataServer) GetLogs(*Query, TrainingData_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (*UnimplementedTrainingDataServer) GetLog(context.Context, *Query) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (*UnimplementedTrainingDataServer) GetEMetrics(*Query, TrainingData_GetEMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEMetrics not implemented")
}
func (*UnimplementedTrainingDataServer) AddEMetrics(context.Context, *EMetrics) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEMetrics not implemented")
}
func (*UnimplementedTrainingDataServer) AddLogLine(context.Context, *LogLine) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogLine not implemented")
}
func (*UnimplementedTrainingDataServer) AddEMetricsBatch(context.Context, *EMetricsBatch) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEMetricsBatch not implemented")
}
func (*UnimplementedTrainingDataServer) AddLogLineBatch(context.Context, *LogLineBatch) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLogLineBatch not implemented")
}
func (*UnimplementedTrainingDataServer) DeleteEMetrics(context.Context, *Query) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEMetrics not implemented")
}
func (*UnimplementedTrainingDataServer) DeleteLogLines(context.Context, *Query) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogLines not implemented")
}
func (*UnimplementedTrainingDataServer) DeleteJob(context.Context, *Query) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (*UnimplementedTrainingDataServer) Hello(context.Context, *Empty) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

func RegisterTrainingDataServer(s *grpc.Server, srv TrainingDataServer) {
	s.RegisterService(&_TrainingData_serviceDesc, srv)
}

func _TrainingData_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainingDataServer).GetLogs(m, &trainingDataGetLogsServer{stream})
}

type TrainingData_GetLogsServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type trainingDataGetLogsServer struct {
	grpc.ServerStream
}

func (x *trainingDataGetLogsServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

func _TrainingData_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).GetLog(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_GetEMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainingDataServer).GetEMetrics(m, &trainingDataGetEMetricsServer{stream})
}

type TrainingData_GetEMetricsServer interface {
	Send(*EMetrics) error
	grpc.ServerStream
}

type trainingDataGetEMetricsServer struct {
	grpc.ServerStream
}

func (x *trainingDataGetEMetricsServer) Send(m *EMetrics) error {
	return x.ServerStream.SendMsg(m)
}

func _TrainingData_AddEMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).AddEMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/AddEMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).AddEMetrics(ctx, req.(*EMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_AddLogLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).AddLogLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/AddLogLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).AddLogLine(ctx, req.(*LogLine))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_AddEMetricsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EMetricsBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).AddEMetricsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/AddEMetricsBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).AddEMetricsBatch(ctx, req.(*EMetricsBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_AddLogLineBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLineBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).AddLogLineBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/AddLogLineBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).AddLogLineBatch(ctx, req.(*LogLineBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_DeleteEMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).DeleteEMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/DeleteEMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).DeleteEMetrics(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_DeleteLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).DeleteLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/DeleteLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).DeleteLogLines(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).DeleteJob(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingData_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingDataServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.training.data.v1.TrainingData/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingDataServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrainingData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.training.data.v1.TrainingData",
	HandlerType: (*TrainingDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLog",
			Handler:    _TrainingData_GetLog_Handler,
		},
		{
			MethodName: "AddEMetrics",
			Handler:    _TrainingData_AddEMetrics_Handler,
		},
		{
			MethodName: "AddLogLine",
			Handler:    _TrainingData_AddLogLine_Handler,
		},
		{
			MethodName: "AddEMetricsBatch",
			Handler:    _TrainingData_AddEMetricsBatch_Handler,
		},
		{
			MethodName: "AddLogLineBatch",
			Handler:    _TrainingData_AddLogLineBatch_Handler,
		},
		{
			MethodName: "DeleteEMetrics",
			Handler:    _TrainingData_DeleteEMetrics_Handler,
		},
		{
			MethodName: "DeleteLogLines",
			Handler:    _TrainingData_DeleteLogLines_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _TrainingData_DeleteJob_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _TrainingData_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _TrainingData_GetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEMetrics",
			Handler:       _TrainingData_GetEMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "training_data.proto",
}
