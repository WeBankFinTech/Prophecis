# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: training_data.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='training_data.proto',
  package='grpc.training.data.v1',
  syntax='proto3',
  serialized_pb=_b('\n\x13training_data.proto\x12\x15grpc.training.data.v1\"N\n\x08MetaInfo\x12\x13\n\x0btraining_id\x18\x01 \x01(\t\x12\x0f\n\x07user_id\x18\x02 \x01(\t\x12\x0c\n\x04time\x18\x03 \x01(\x03\x12\x0e\n\x06rindex\x18\x04 \x01(\x03\"F\n\x07LogLine\x12-\n\x04meta\x18\x01 \x01(\x0b\x32\x1f.grpc.training.data.v1.MetaInfo\x12\x0c\n\x04line\x18\x02 \x01(\t\"\x83\x01\n\x03\x41ny\x12\x31\n\x04type\x18\x01 \x01(\x0e\x32#.grpc.training.data.v1.Any.DataType\x12\r\n\x05value\x18\x02 \x01(\t\":\n\x08\x44\x61taType\x12\n\n\x06STRING\x10\x00\x12\x0e\n\nJSONSTRING\x10\x01\x12\x07\n\x03INT\x10\x02\x12\t\n\x05\x46LOAT\x10\x03\"\xdd\x02\n\x08\x45Metrics\x12-\n\x04meta\x18\x01 \x01(\x0b\x32\x1f.grpc.training.data.v1.MetaInfo\x12;\n\x06\x65times\x18\x02 \x03(\x0b\x32+.grpc.training.data.v1.EMetrics.EtimesEntry\x12\x12\n\ngrouplabel\x18\x03 \x01(\t\x12;\n\x06values\x18\x04 \x03(\x0b\x32+.grpc.training.data.v1.EMetrics.ValuesEntry\x1aI\n\x0b\x45timesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12)\n\x05value\x18\x02 \x01(\x0b\x32\x1a.grpc.training.data.v1.Any:\x02\x38\x01\x1aI\n\x0bValuesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12)\n\x05value\x18\x02 \x01(\x0b\x32\x1a.grpc.training.data.v1.Any:\x02\x38\x01\"\xd9\x01\n\x05Query\x12;\n\nsearchType\x18\x01 \x01(\x0e\x32\'.grpc.training.data.v1.Query.SearchType\x12-\n\x04meta\x18\x03 \x01(\x0b\x32\x1f.grpc.training.data.v1.MetaInfo\x12\r\n\x05since\x18\x04 \x01(\t\x12\x10\n\x08pagesize\x18\x05 \x01(\x05\x12\x0b\n\x03pos\x18\x06 \x01(\x03\"6\n\nSearchType\x12\x08\n\x04TERM\x10\x00\x12\n\n\x06NESTED\x10\x01\x12\t\n\x05MATCH\x10\x02\x12\x07\n\x03\x41LL\x10\x03\"3\n\x0b\x44\x65leteQuery\x12\x13\n\x0btraining_id\x18\x01 \x01(\t\x12\x0f\n\x07user_id\x18\x02 \x01(\t\"\x1e\n\x0b\x41\x64\x64Response\x12\x0f\n\x07success\x18\x01 \x01(\x08\"!\n\x0e\x44\x65leteResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\"\x1c\n\rHelloResponse\x12\x0b\n\x03msg\x18\x01 \x01(\t\"\x07\n\x05\x45mpty2\xac\x05\n\x0cTrainingData\x12K\n\x07GetLogs\x12\x1c.grpc.training.data.v1.Query\x1a\x1e.grpc.training.data.v1.LogLine\"\x00\x30\x01\x12P\n\x0bGetEMetrics\x12\x1c.grpc.training.data.v1.Query\x1a\x1f.grpc.training.data.v1.EMetrics\"\x00\x30\x01\x12T\n\x0b\x41\x64\x64\x45Metrics\x12\x1f.grpc.training.data.v1.EMetrics\x1a\".grpc.training.data.v1.AddResponse\"\x00\x12R\n\nAddLogLine\x12\x1e.grpc.training.data.v1.LogLine\x1a\".grpc.training.data.v1.AddResponse\"\x00\x12W\n\x0e\x44\x65leteEMetrics\x12\x1c.grpc.training.data.v1.Query\x1a%.grpc.training.data.v1.DeleteResponse\"\x00\x12W\n\x0e\x44\x65leteLogLines\x12\x1c.grpc.training.data.v1.Query\x1a%.grpc.training.data.v1.DeleteResponse\"\x00\x12R\n\tDeleteJob\x12\x1c.grpc.training.data.v1.Query\x1a%.grpc.training.data.v1.DeleteResponse\"\x00\x12M\n\x05Hello\x12\x1c.grpc.training.data.v1.Empty\x1a$.grpc.training.data.v1.HelloResponse\"\x00\x62\x06proto3')
)



_ANY_DATATYPE = _descriptor.EnumDescriptor(
  name='DataType',
  full_name='grpc.training.data.v1.Any.DataType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='STRING', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='JSONSTRING', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INT', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOAT', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=272,
  serialized_end=330,
)
_sym_db.RegisterEnumDescriptor(_ANY_DATATYPE)

_QUERY_SEARCHTYPE = _descriptor.EnumDescriptor(
  name='SearchType',
  full_name='grpc.training.data.v1.Query.SearchType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='TERM', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NESTED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MATCH', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALL', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=848,
  serialized_end=902,
)
_sym_db.RegisterEnumDescriptor(_QUERY_SEARCHTYPE)


_METAINFO = _descriptor.Descriptor(
  name='MetaInfo',
  full_name='grpc.training.data.v1.MetaInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='training_id', full_name='grpc.training.data.v1.MetaInfo.training_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='user_id', full_name='grpc.training.data.v1.MetaInfo.user_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='time', full_name='grpc.training.data.v1.MetaInfo.time', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rindex', full_name='grpc.training.data.v1.MetaInfo.rindex', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=46,
  serialized_end=124,
)


_LOGLINE = _descriptor.Descriptor(
  name='LogLine',
  full_name='grpc.training.data.v1.LogLine',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='meta', full_name='grpc.training.data.v1.LogLine.meta', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='line', full_name='grpc.training.data.v1.LogLine.line', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=196,
)


_ANY = _descriptor.Descriptor(
  name='Any',
  full_name='grpc.training.data.v1.Any',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='grpc.training.data.v1.Any.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='grpc.training.data.v1.Any.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _ANY_DATATYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=199,
  serialized_end=330,
)


_EMETRICS_ETIMESENTRY = _descriptor.Descriptor(
  name='EtimesEntry',
  full_name='grpc.training.data.v1.EMetrics.EtimesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='grpc.training.data.v1.EMetrics.EtimesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='grpc.training.data.v1.EMetrics.EtimesEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=534,
  serialized_end=607,
)

_EMETRICS_VALUESENTRY = _descriptor.Descriptor(
  name='ValuesEntry',
  full_name='grpc.training.data.v1.EMetrics.ValuesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='grpc.training.data.v1.EMetrics.ValuesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='grpc.training.data.v1.EMetrics.ValuesEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=609,
  serialized_end=682,
)

_EMETRICS = _descriptor.Descriptor(
  name='EMetrics',
  full_name='grpc.training.data.v1.EMetrics',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='meta', full_name='grpc.training.data.v1.EMetrics.meta', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='etimes', full_name='grpc.training.data.v1.EMetrics.etimes', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='grouplabel', full_name='grpc.training.data.v1.EMetrics.grouplabel', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='values', full_name='grpc.training.data.v1.EMetrics.values', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_EMETRICS_ETIMESENTRY, _EMETRICS_VALUESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=333,
  serialized_end=682,
)


_QUERY = _descriptor.Descriptor(
  name='Query',
  full_name='grpc.training.data.v1.Query',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='searchType', full_name='grpc.training.data.v1.Query.searchType', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='meta', full_name='grpc.training.data.v1.Query.meta', index=1,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='since', full_name='grpc.training.data.v1.Query.since', index=2,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pagesize', full_name='grpc.training.data.v1.Query.pagesize', index=3,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='pos', full_name='grpc.training.data.v1.Query.pos', index=4,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _QUERY_SEARCHTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=685,
  serialized_end=902,
)


_DELETEQUERY = _descriptor.Descriptor(
  name='DeleteQuery',
  full_name='grpc.training.data.v1.DeleteQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='training_id', full_name='grpc.training.data.v1.DeleteQuery.training_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='user_id', full_name='grpc.training.data.v1.DeleteQuery.user_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=904,
  serialized_end=955,
)


_ADDRESPONSE = _descriptor.Descriptor(
  name='AddResponse',
  full_name='grpc.training.data.v1.AddResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='grpc.training.data.v1.AddResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=957,
  serialized_end=987,
)


_DELETERESPONSE = _descriptor.Descriptor(
  name='DeleteResponse',
  full_name='grpc.training.data.v1.DeleteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='grpc.training.data.v1.DeleteResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=989,
  serialized_end=1022,
)


_HELLORESPONSE = _descriptor.Descriptor(
  name='HelloResponse',
  full_name='grpc.training.data.v1.HelloResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='grpc.training.data.v1.HelloResponse.msg', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1024,
  serialized_end=1052,
)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='grpc.training.data.v1.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1054,
  serialized_end=1061,
)

_LOGLINE.fields_by_name['meta'].message_type = _METAINFO
_ANY.fields_by_name['type'].enum_type = _ANY_DATATYPE
_ANY_DATATYPE.containing_type = _ANY
_EMETRICS_ETIMESENTRY.fields_by_name['value'].message_type = _ANY
_EMETRICS_ETIMESENTRY.containing_type = _EMETRICS
_EMETRICS_VALUESENTRY.fields_by_name['value'].message_type = _ANY
_EMETRICS_VALUESENTRY.containing_type = _EMETRICS
_EMETRICS.fields_by_name['meta'].message_type = _METAINFO
_EMETRICS.fields_by_name['etimes'].message_type = _EMETRICS_ETIMESENTRY
_EMETRICS.fields_by_name['values'].message_type = _EMETRICS_VALUESENTRY
_QUERY.fields_by_name['searchType'].enum_type = _QUERY_SEARCHTYPE
_QUERY.fields_by_name['meta'].message_type = _METAINFO
_QUERY_SEARCHTYPE.containing_type = _QUERY
DESCRIPTOR.message_types_by_name['MetaInfo'] = _METAINFO
DESCRIPTOR.message_types_by_name['LogLine'] = _LOGLINE
DESCRIPTOR.message_types_by_name['Any'] = _ANY
DESCRIPTOR.message_types_by_name['EMetrics'] = _EMETRICS
DESCRIPTOR.message_types_by_name['Query'] = _QUERY
DESCRIPTOR.message_types_by_name['DeleteQuery'] = _DELETEQUERY
DESCRIPTOR.message_types_by_name['AddResponse'] = _ADDRESPONSE
DESCRIPTOR.message_types_by_name['DeleteResponse'] = _DELETERESPONSE
DESCRIPTOR.message_types_by_name['HelloResponse'] = _HELLORESPONSE
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

MetaInfo = _reflection.GeneratedProtocolMessageType('MetaInfo', (_message.Message,), dict(
  DESCRIPTOR = _METAINFO,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.MetaInfo)
  ))
_sym_db.RegisterMessage(MetaInfo)

LogLine = _reflection.GeneratedProtocolMessageType('LogLine', (_message.Message,), dict(
  DESCRIPTOR = _LOGLINE,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.LogLine)
  ))
_sym_db.RegisterMessage(LogLine)

Any = _reflection.GeneratedProtocolMessageType('Any', (_message.Message,), dict(
  DESCRIPTOR = _ANY,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.Any)
  ))
_sym_db.RegisterMessage(Any)

EMetrics = _reflection.GeneratedProtocolMessageType('EMetrics', (_message.Message,), dict(

  EtimesEntry = _reflection.GeneratedProtocolMessageType('EtimesEntry', (_message.Message,), dict(
    DESCRIPTOR = _EMETRICS_ETIMESENTRY,
    __module__ = 'training_data_pb2'
    # @@protoc_insertion_point(class_scope:grpc.training.data.v1.EMetrics.EtimesEntry)
    ))
  ,

  ValuesEntry = _reflection.GeneratedProtocolMessageType('ValuesEntry', (_message.Message,), dict(
    DESCRIPTOR = _EMETRICS_VALUESENTRY,
    __module__ = 'training_data_pb2'
    # @@protoc_insertion_point(class_scope:grpc.training.data.v1.EMetrics.ValuesEntry)
    ))
  ,
  DESCRIPTOR = _EMETRICS,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.EMetrics)
  ))
_sym_db.RegisterMessage(EMetrics)
_sym_db.RegisterMessage(EMetrics.EtimesEntry)
_sym_db.RegisterMessage(EMetrics.ValuesEntry)

Query = _reflection.GeneratedProtocolMessageType('Query', (_message.Message,), dict(
  DESCRIPTOR = _QUERY,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.Query)
  ))
_sym_db.RegisterMessage(Query)

DeleteQuery = _reflection.GeneratedProtocolMessageType('DeleteQuery', (_message.Message,), dict(
  DESCRIPTOR = _DELETEQUERY,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.DeleteQuery)
  ))
_sym_db.RegisterMessage(DeleteQuery)

AddResponse = _reflection.GeneratedProtocolMessageType('AddResponse', (_message.Message,), dict(
  DESCRIPTOR = _ADDRESPONSE,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.AddResponse)
  ))
_sym_db.RegisterMessage(AddResponse)

DeleteResponse = _reflection.GeneratedProtocolMessageType('DeleteResponse', (_message.Message,), dict(
  DESCRIPTOR = _DELETERESPONSE,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.DeleteResponse)
  ))
_sym_db.RegisterMessage(DeleteResponse)

HelloResponse = _reflection.GeneratedProtocolMessageType('HelloResponse', (_message.Message,), dict(
  DESCRIPTOR = _HELLORESPONSE,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.HelloResponse)
  ))
_sym_db.RegisterMessage(HelloResponse)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'training_data_pb2'
  # @@protoc_insertion_point(class_scope:grpc.training.data.v1.Empty)
  ))
_sym_db.RegisterMessage(Empty)


_EMETRICS_ETIMESENTRY.has_options = True
_EMETRICS_ETIMESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_EMETRICS_VALUESENTRY.has_options = True
_EMETRICS_VALUESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))

_TRAININGDATA = _descriptor.ServiceDescriptor(
  name='TrainingData',
  full_name='grpc.training.data.v1.TrainingData',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=1064,
  serialized_end=1748,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetLogs',
    full_name='grpc.training.data.v1.TrainingData.GetLogs',
    index=0,
    containing_service=None,
    input_type=_QUERY,
    output_type=_LOGLINE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetEMetrics',
    full_name='grpc.training.data.v1.TrainingData.GetEMetrics',
    index=1,
    containing_service=None,
    input_type=_QUERY,
    output_type=_EMETRICS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='AddEMetrics',
    full_name='grpc.training.data.v1.TrainingData.AddEMetrics',
    index=2,
    containing_service=None,
    input_type=_EMETRICS,
    output_type=_ADDRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='AddLogLine',
    full_name='grpc.training.data.v1.TrainingData.AddLogLine',
    index=3,
    containing_service=None,
    input_type=_LOGLINE,
    output_type=_ADDRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='DeleteEMetrics',
    full_name='grpc.training.data.v1.TrainingData.DeleteEMetrics',
    index=4,
    containing_service=None,
    input_type=_QUERY,
    output_type=_DELETERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='DeleteLogLines',
    full_name='grpc.training.data.v1.TrainingData.DeleteLogLines',
    index=5,
    containing_service=None,
    input_type=_QUERY,
    output_type=_DELETERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='DeleteJob',
    full_name='grpc.training.data.v1.TrainingData.DeleteJob',
    index=6,
    containing_service=None,
    input_type=_QUERY,
    output_type=_DELETERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='Hello',
    full_name='grpc.training.data.v1.TrainingData.Hello',
    index=7,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_HELLORESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_TRAININGDATA)

DESCRIPTOR.services_by_name['TrainingData'] = _TRAININGDATA

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class TrainingDataStub(object):
    """import "google/api/annotations.proto";

    // See https://developers.google.com/protocol-buffers/docs/proto3#any
    // and https://github.com/google/protobuf/blob/master/src/google/protobuf/any.proto
    import "google/protobuf/any.proto";

    Service to store evaluation metrics
    ===== GET ENDPOINTS, for external fetch =============
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetLogs = channel.unary_stream(
          '/grpc.training.data.v1.TrainingData/GetLogs',
          request_serializer=Query.SerializeToString,
          response_deserializer=LogLine.FromString,
          )
      self.GetEMetrics = channel.unary_stream(
          '/grpc.training.data.v1.TrainingData/GetEMetrics',
          request_serializer=Query.SerializeToString,
          response_deserializer=EMetrics.FromString,
          )
      self.AddEMetrics = channel.unary_unary(
          '/grpc.training.data.v1.TrainingData/AddEMetrics',
          request_serializer=EMetrics.SerializeToString,
          response_deserializer=AddResponse.FromString,
          )
      self.AddLogLine = channel.unary_unary(
          '/grpc.training.data.v1.TrainingData/AddLogLine',
          request_serializer=LogLine.SerializeToString,
          response_deserializer=AddResponse.FromString,
          )
      self.DeleteEMetrics = channel.unary_unary(
          '/grpc.training.data.v1.TrainingData/DeleteEMetrics',
          request_serializer=Query.SerializeToString,
          response_deserializer=DeleteResponse.FromString,
          )
      self.DeleteLogLines = channel.unary_unary(
          '/grpc.training.data.v1.TrainingData/DeleteLogLines',
          request_serializer=Query.SerializeToString,
          response_deserializer=DeleteResponse.FromString,
          )
      self.DeleteJob = channel.unary_unary(
          '/grpc.training.data.v1.TrainingData/DeleteJob',
          request_serializer=Query.SerializeToString,
          response_deserializer=DeleteResponse.FromString,
          )
      self.Hello = channel.unary_unary(
          '/grpc.training.data.v1.TrainingData/Hello',
          request_serializer=Empty.SerializeToString,
          response_deserializer=HelloResponse.FromString,
          )


  class TrainingDataServicer(object):
    """import "google/api/annotations.proto";

    // See https://developers.google.com/protocol-buffers/docs/proto3#any
    // and https://github.com/google/protobuf/blob/master/src/google/protobuf/any.proto
    import "google/protobuf/any.proto";

    Service to store evaluation metrics
    ===== GET ENDPOINTS, for external fetch =============
    """

    def GetLogs(self, request, context):
      """Get loglines, based on query
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEMetrics(self, request, context):
      """Get evaluation metrics records, based on query
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddEMetrics(self, request, context):
      """===== UPDATE ENDPOINTS, for internal use only =========
      (Strip these from the proto for external client generation!)

      Add evaluation metrics record
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddLogLine(self, request, context):
      """Add log line record
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteEMetrics(self, request, context):
      """Delete all evaluation metrics belonging to a training job or user id
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteLogLines(self, request, context):
      """Delete all log lines belonging to a training job or user id
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteJob(self, request, context):
      """Delete all log lines belonging to a training job or user id
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Hello(self, request, context):
      """===== In case you want it to say "Hello" =========
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TrainingDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetLogs': grpc.unary_stream_rpc_method_handler(
            servicer.GetLogs,
            request_deserializer=Query.FromString,
            response_serializer=LogLine.SerializeToString,
        ),
        'GetEMetrics': grpc.unary_stream_rpc_method_handler(
            servicer.GetEMetrics,
            request_deserializer=Query.FromString,
            response_serializer=EMetrics.SerializeToString,
        ),
        'AddEMetrics': grpc.unary_unary_rpc_method_handler(
            servicer.AddEMetrics,
            request_deserializer=EMetrics.FromString,
            response_serializer=AddResponse.SerializeToString,
        ),
        'AddLogLine': grpc.unary_unary_rpc_method_handler(
            servicer.AddLogLine,
            request_deserializer=LogLine.FromString,
            response_serializer=AddResponse.SerializeToString,
        ),
        'DeleteEMetrics': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteEMetrics,
            request_deserializer=Query.FromString,
            response_serializer=DeleteResponse.SerializeToString,
        ),
        'DeleteLogLines': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteLogLines,
            request_deserializer=Query.FromString,
            response_serializer=DeleteResponse.SerializeToString,
        ),
        'DeleteJob': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteJob,
            request_deserializer=Query.FromString,
            response_serializer=DeleteResponse.SerializeToString,
        ),
        'Hello': grpc.unary_unary_rpc_method_handler(
            servicer.Hello,
            request_deserializer=Empty.FromString,
            response_serializer=HelloResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'grpc.training.data.v1.TrainingData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaTrainingDataServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """import "google/api/annotations.proto";

    // See https://developers.google.com/protocol-buffers/docs/proto3#any
    // and https://github.com/google/protobuf/blob/master/src/google/protobuf/any.proto
    import "google/protobuf/any.proto";

    Service to store evaluation metrics
    ===== GET ENDPOINTS, for external fetch =============
    """
    def GetLogs(self, request, context):
      """Get loglines, based on query
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEMetrics(self, request, context):
      """Get evaluation metrics records, based on query
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddEMetrics(self, request, context):
      """===== UPDATE ENDPOINTS, for internal use only =========
      (Strip these from the proto for external client generation!)

      Add evaluation metrics record
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddLogLine(self, request, context):
      """Add log line record
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteEMetrics(self, request, context):
      """Delete all evaluation metrics belonging to a training job or user id
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteLogLines(self, request, context):
      """Delete all log lines belonging to a training job or user id
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteJob(self, request, context):
      """Delete all log lines belonging to a training job or user id
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Hello(self, request, context):
      """===== In case you want it to say "Hello" =========
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTrainingDataStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """import "google/api/annotations.proto";

    // See https://developers.google.com/protocol-buffers/docs/proto3#any
    // and https://github.com/google/protobuf/blob/master/src/google/protobuf/any.proto
    import "google/protobuf/any.proto";

    Service to store evaluation metrics
    ===== GET ENDPOINTS, for external fetch =============
    """
    def GetLogs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get loglines, based on query
      """
      raise NotImplementedError()
    def GetEMetrics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get evaluation metrics records, based on query
      """
      raise NotImplementedError()
    def AddEMetrics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """===== UPDATE ENDPOINTS, for internal use only =========
      (Strip these from the proto for external client generation!)

      Add evaluation metrics record
      """
      raise NotImplementedError()
    AddEMetrics.future = None
    def AddLogLine(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Add log line record
      """
      raise NotImplementedError()
    AddLogLine.future = None
    def DeleteEMetrics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delete all evaluation metrics belonging to a training job or user id
      """
      raise NotImplementedError()
    DeleteEMetrics.future = None
    def DeleteLogLines(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delete all log lines belonging to a training job or user id
      """
      raise NotImplementedError()
    DeleteLogLines.future = None
    def DeleteJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delete all log lines belonging to a training job or user id
      """
      raise NotImplementedError()
    DeleteJob.future = None
    def Hello(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """===== In case you want it to say "Hello" =========
      """
      raise NotImplementedError()
    Hello.future = None


  def beta_create_TrainingData_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('grpc.training.data.v1.TrainingData', 'AddEMetrics'): EMetrics.FromString,
      ('grpc.training.data.v1.TrainingData', 'AddLogLine'): LogLine.FromString,
      ('grpc.training.data.v1.TrainingData', 'DeleteEMetrics'): Query.FromString,
      ('grpc.training.data.v1.TrainingData', 'DeleteJob'): Query.FromString,
      ('grpc.training.data.v1.TrainingData', 'DeleteLogLines'): Query.FromString,
      ('grpc.training.data.v1.TrainingData', 'GetEMetrics'): Query.FromString,
      ('grpc.training.data.v1.TrainingData', 'GetLogs'): Query.FromString,
      ('grpc.training.data.v1.TrainingData', 'Hello'): Empty.FromString,
    }
    response_serializers = {
      ('grpc.training.data.v1.TrainingData', 'AddEMetrics'): AddResponse.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'AddLogLine'): AddResponse.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'DeleteEMetrics'): DeleteResponse.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'DeleteJob'): DeleteResponse.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'DeleteLogLines'): DeleteResponse.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'GetEMetrics'): EMetrics.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'GetLogs'): LogLine.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'Hello'): HelloResponse.SerializeToString,
    }
    method_implementations = {
      ('grpc.training.data.v1.TrainingData', 'AddEMetrics'): face_utilities.unary_unary_inline(servicer.AddEMetrics),
      ('grpc.training.data.v1.TrainingData', 'AddLogLine'): face_utilities.unary_unary_inline(servicer.AddLogLine),
      ('grpc.training.data.v1.TrainingData', 'DeleteEMetrics'): face_utilities.unary_unary_inline(servicer.DeleteEMetrics),
      ('grpc.training.data.v1.TrainingData', 'DeleteJob'): face_utilities.unary_unary_inline(servicer.DeleteJob),
      ('grpc.training.data.v1.TrainingData', 'DeleteLogLines'): face_utilities.unary_unary_inline(servicer.DeleteLogLines),
      ('grpc.training.data.v1.TrainingData', 'GetEMetrics'): face_utilities.unary_stream_inline(servicer.GetEMetrics),
      ('grpc.training.data.v1.TrainingData', 'GetLogs'): face_utilities.unary_stream_inline(servicer.GetLogs),
      ('grpc.training.data.v1.TrainingData', 'Hello'): face_utilities.unary_unary_inline(servicer.Hello),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TrainingData_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('grpc.training.data.v1.TrainingData', 'AddEMetrics'): EMetrics.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'AddLogLine'): LogLine.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'DeleteEMetrics'): Query.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'DeleteJob'): Query.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'DeleteLogLines'): Query.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'GetEMetrics'): Query.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'GetLogs'): Query.SerializeToString,
      ('grpc.training.data.v1.TrainingData', 'Hello'): Empty.SerializeToString,
    }
    response_deserializers = {
      ('grpc.training.data.v1.TrainingData', 'AddEMetrics'): AddResponse.FromString,
      ('grpc.training.data.v1.TrainingData', 'AddLogLine'): AddResponse.FromString,
      ('grpc.training.data.v1.TrainingData', 'DeleteEMetrics'): DeleteResponse.FromString,
      ('grpc.training.data.v1.TrainingData', 'DeleteJob'): DeleteResponse.FromString,
      ('grpc.training.data.v1.TrainingData', 'DeleteLogLines'): DeleteResponse.FromString,
      ('grpc.training.data.v1.TrainingData', 'GetEMetrics'): EMetrics.FromString,
      ('grpc.training.data.v1.TrainingData', 'GetLogs'): LogLine.FromString,
      ('grpc.training.data.v1.TrainingData', 'Hello'): HelloResponse.FromString,
    }
    cardinalities = {
      'AddEMetrics': cardinality.Cardinality.UNARY_UNARY,
      'AddLogLine': cardinality.Cardinality.UNARY_UNARY,
      'DeleteEMetrics': cardinality.Cardinality.UNARY_UNARY,
      'DeleteJob': cardinality.Cardinality.UNARY_UNARY,
      'DeleteLogLines': cardinality.Cardinality.UNARY_UNARY,
      'GetEMetrics': cardinality.Cardinality.UNARY_STREAM,
      'GetLogs': cardinality.Cardinality.UNARY_STREAM,
      'Hello': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'grpc.training.data.v1.TrainingData', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
