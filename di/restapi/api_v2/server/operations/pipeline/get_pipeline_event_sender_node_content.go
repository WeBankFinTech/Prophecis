// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPipelineEventSenderNodeContentHandlerFunc turns a function with the right signature into a get pipeline event sender node content handler
type GetPipelineEventSenderNodeContentHandlerFunc func(GetPipelineEventSenderNodeContentParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPipelineEventSenderNodeContentHandlerFunc) Handle(params GetPipelineEventSenderNodeContentParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetPipelineEventSenderNodeContentHandler interface for that can handle valid get pipeline event sender node content params
type GetPipelineEventSenderNodeContentHandler interface {
	Handle(GetPipelineEventSenderNodeContentParams, interface{}) middleware.Responder
}

// NewGetPipelineEventSenderNodeContent creates a new http.Handler for the get pipeline event sender node content operation
func NewGetPipelineEventSenderNodeContent(ctx *middleware.Context, handler GetPipelineEventSenderNodeContentHandler) *GetPipelineEventSenderNodeContent {
	return &GetPipelineEventSenderNodeContent{Context: ctx, Handler: handler}
}

/*GetPipelineEventSenderNodeContent swagger:route GET /di/v2/pipeline/eventsender_node_content Pipeline getPipelineEventSenderNodeContent

GetPipelineEventSenderNodeContent

获取可视化编辑/工作流中的信号发送节点的描述数据结构

*/
type GetPipelineEventSenderNodeContent struct {
	Context *middleware.Context
	Handler GetPipelineEventSenderNodeContentHandler
}

func (o *GetPipelineEventSenderNodeContent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPipelineEventSenderNodeContentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
