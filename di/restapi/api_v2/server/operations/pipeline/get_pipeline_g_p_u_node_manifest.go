// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPipelineGPUNodeManifestHandlerFunc turns a function with the right signature into a get pipeline g p u node manifest handler
type GetPipelineGPUNodeManifestHandlerFunc func(GetPipelineGPUNodeManifestParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPipelineGPUNodeManifestHandlerFunc) Handle(params GetPipelineGPUNodeManifestParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetPipelineGPUNodeManifestHandler interface for that can handle valid get pipeline g p u node manifest params
type GetPipelineGPUNodeManifestHandler interface {
	Handle(GetPipelineGPUNodeManifestParams, interface{}) middleware.Responder
}

// NewGetPipelineGPUNodeManifest creates a new http.Handler for the get pipeline g p u node manifest operation
func NewGetPipelineGPUNodeManifest(ctx *middleware.Context, handler GetPipelineGPUNodeManifestHandler) *GetPipelineGPUNodeManifest {
	return &GetPipelineGPUNodeManifest{Context: ctx, Handler: handler}
}

/*GetPipelineGPUNodeManifest swagger:route GET /di/v2/pipeline/gpu_node_manifest Pipeline getPipelineGPUNodeManifest

GetPipelineGPUNodeManifest

获取可视化编辑/工作流中的GPU节点的描述数据结构

*/
type GetPipelineGPUNodeManifest struct {
	Context *middleware.Context
	Handler GetPipelineGPUNodeManifestHandler
}

func (o *GetPipelineGPUNodeManifest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPipelineGPUNodeManifestParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
