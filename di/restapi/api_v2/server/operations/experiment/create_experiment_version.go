// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateExperimentVersionHandlerFunc turns a function with the right signature into a create experiment version handler
type CreateExperimentVersionHandlerFunc func(CreateExperimentVersionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateExperimentVersionHandlerFunc) Handle(params CreateExperimentVersionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateExperimentVersionHandler interface for that can handle valid create experiment version params
type CreateExperimentVersionHandler interface {
	Handle(CreateExperimentVersionParams, interface{}) middleware.Responder
}

// NewCreateExperimentVersion creates a new http.Handler for the create experiment version operation
func NewCreateExperimentVersion(ctx *middleware.Context, handler CreateExperimentVersionHandler) *CreateExperimentVersion {
	return &CreateExperimentVersion{Context: ctx, Handler: handler}
}

/*CreateExperimentVersion swagger:route POST /di/v2/experiment/{exp_id}/version Experiment createExperimentVersion

CreateExperimentVersion

新增一个实验版本（也就是将当前实验存为一个固定版本）

*/
type CreateExperimentVersion struct {
	Context *middleware.Context
	Handler CreateExperimentVersionHandler
}

func (o *CreateExperimentVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateExperimentVersionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
