// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListExperimentVersionsParams creates a new ListExperimentVersionsParams object
// with the default values initialized.
func NewListExperimentVersionsParams() ListExperimentVersionsParams {

	var (
		// initialize parameters with default values

		pageDefault = int64(1)
		sizeDefault = int64(10)
	)

	return ListExperimentVersionsParams{
		Page: &pageDefault,

		Size: &sizeDefault,
	}
}

// ListExperimentVersionsParams contains all the bound params for the list experiment versions operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListExperimentVersions
type ListExperimentVersionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*实验ID
	  Required: true
	  Min Length: 1
	  In: path
	*/
	ExpID string
	/*分页查询的page
	  In: query
	  Default: 1
	*/
	Page *int64
	/*分页查询的size
	  In: query
	  Default: 10
	*/
	Size *int64
	/*根据“更新时间的结束”过滤实验列表
	  In: query
	*/
	UpdateTimeEd *string
	/*根据“更新时间的开始”过滤实验列表
	  In: query
	*/
	UpdateTimeSt *string
	/*根据“实验版本号”过滤实验版本列表
	  In: query
	*/
	VersionName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListExperimentVersionsParams() beforehand.
func (o *ListExperimentVersionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rExpID, rhkExpID, _ := route.Params.GetOK("exp_id")
	if err := o.bindExpID(rExpID, rhkExpID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSize, qhkSize, _ := qs.GetOK("size")
	if err := o.bindSize(qSize, qhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qUpdateTimeEd, qhkUpdateTimeEd, _ := qs.GetOK("update_time_ed")
	if err := o.bindUpdateTimeEd(qUpdateTimeEd, qhkUpdateTimeEd, route.Formats); err != nil {
		res = append(res, err)
	}

	qUpdateTimeSt, qhkUpdateTimeSt, _ := qs.GetOK("update_time_st")
	if err := o.bindUpdateTimeSt(qUpdateTimeSt, qhkUpdateTimeSt, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersionName, qhkVersionName, _ := qs.GetOK("version_name")
	if err := o.bindVersionName(qVersionName, qhkVersionName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExpID binds and validates parameter ExpID from path.
func (o *ListExperimentVersionsParams) bindExpID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ExpID = raw

	if err := o.validateExpID(formats); err != nil {
		return err
	}

	return nil
}

// validateExpID carries on validations for parameter ExpID
func (o *ListExperimentVersionsParams) validateExpID(formats strfmt.Registry) error {

	if err := validate.MinLength("exp_id", "path", o.ExpID, 1); err != nil {
		return err
	}

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *ListExperimentVersionsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListExperimentVersionsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindSize binds and validates parameter Size from query.
func (o *ListExperimentVersionsParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListExperimentVersionsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("size", "query", "int64", raw)
	}
	o.Size = &value

	return nil
}

// bindUpdateTimeEd binds and validates parameter UpdateTimeEd from query.
func (o *ListExperimentVersionsParams) bindUpdateTimeEd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UpdateTimeEd = &raw

	return nil
}

// bindUpdateTimeSt binds and validates parameter UpdateTimeSt from query.
func (o *ListExperimentVersionsParams) bindUpdateTimeSt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UpdateTimeSt = &raw

	return nil
}

// bindVersionName binds and validates parameter VersionName from query.
func (o *ListExperimentVersionsParams) bindVersionName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.VersionName = &raw

	return nil
}
