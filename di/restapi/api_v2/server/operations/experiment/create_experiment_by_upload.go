// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateExperimentByUploadHandlerFunc turns a function with the right signature into a create experiment by upload handler
type CreateExperimentByUploadHandlerFunc func(CreateExperimentByUploadParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateExperimentByUploadHandlerFunc) Handle(params CreateExperimentByUploadParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateExperimentByUploadHandler interface for that can handle valid create experiment by upload params
type CreateExperimentByUploadHandler interface {
	Handle(CreateExperimentByUploadParams, interface{}) middleware.Responder
}

// NewCreateExperimentByUpload creates a new http.Handler for the create experiment by upload operation
func NewCreateExperimentByUpload(ctx *middleware.Context, handler CreateExperimentByUploadHandler) *CreateExperimentByUpload {
	return &CreateExperimentByUpload{Context: ctx, Handler: handler}
}

/*CreateExperimentByUpload swagger:route POST /di/v2/experiment/upload Experiment createExperimentByUpload

CreateExperimentByUpload

通过上传方式创建一个实验

*/
type CreateExperimentByUpload struct {
	Context *middleware.Context
	Handler CreateExperimentByUploadHandler
}

func (o *CreateExperimentByUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateExperimentByUploadParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
