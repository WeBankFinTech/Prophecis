// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v2/restmodels"
)

// GetDSSJumpMLSSUserOKCode is the HTTP code returned for type GetDSSJumpMLSSUserOK
const GetDSSJumpMLSSUserOKCode int = 200

/*GetDSSJumpMLSSUserOK OK

swagger:response getDSSJumpMLSSUserOK
*/
type GetDSSJumpMLSSUserOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.GetDSSJumpMLSSUserResponse `json:"body,omitempty"`
}

// NewGetDSSJumpMLSSUserOK creates GetDSSJumpMLSSUserOK with default headers values
func NewGetDSSJumpMLSSUserOK() *GetDSSJumpMLSSUserOK {

	return &GetDSSJumpMLSSUserOK{}
}

// WithPayload adds the payload to the get d s s jump m l s s user o k response
func (o *GetDSSJumpMLSSUserOK) WithPayload(payload *restmodels.GetDSSJumpMLSSUserResponse) *GetDSSJumpMLSSUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get d s s jump m l s s user o k response
func (o *GetDSSJumpMLSSUserOK) SetPayload(payload *restmodels.GetDSSJumpMLSSUserResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDSSJumpMLSSUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDSSJumpMLSSUserUnauthorizedCode is the HTTP code returned for type GetDSSJumpMLSSUserUnauthorized
const GetDSSJumpMLSSUserUnauthorizedCode int = 401

/*GetDSSJumpMLSSUserUnauthorized Unauthorized

swagger:response getDSSJumpMLSSUserUnauthorized
*/
type GetDSSJumpMLSSUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewGetDSSJumpMLSSUserUnauthorized creates GetDSSJumpMLSSUserUnauthorized with default headers values
func NewGetDSSJumpMLSSUserUnauthorized() *GetDSSJumpMLSSUserUnauthorized {

	return &GetDSSJumpMLSSUserUnauthorized{}
}

// WithPayload adds the payload to the get d s s jump m l s s user unauthorized response
func (o *GetDSSJumpMLSSUserUnauthorized) WithPayload(payload *restmodels.Error) *GetDSSJumpMLSSUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get d s s jump m l s s user unauthorized response
func (o *GetDSSJumpMLSSUserUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDSSJumpMLSSUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDSSJumpMLSSUserNotFoundCode is the HTTP code returned for type GetDSSJumpMLSSUserNotFound
const GetDSSJumpMLSSUserNotFoundCode int = 404

/*GetDSSJumpMLSSUserNotFound Get UserInfo Not Found

swagger:response getDSSJumpMLSSUserNotFound
*/
type GetDSSJumpMLSSUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewGetDSSJumpMLSSUserNotFound creates GetDSSJumpMLSSUserNotFound with default headers values
func NewGetDSSJumpMLSSUserNotFound() *GetDSSJumpMLSSUserNotFound {

	return &GetDSSJumpMLSSUserNotFound{}
}

// WithPayload adds the payload to the get d s s jump m l s s user not found response
func (o *GetDSSJumpMLSSUserNotFound) WithPayload(payload *restmodels.Error) *GetDSSJumpMLSSUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get d s s jump m l s s user not found response
func (o *GetDSSJumpMLSSUserNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDSSJumpMLSSUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
