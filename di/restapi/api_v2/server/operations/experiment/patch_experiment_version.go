// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchExperimentVersionHandlerFunc turns a function with the right signature into a patch experiment version handler
type PatchExperimentVersionHandlerFunc func(PatchExperimentVersionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchExperimentVersionHandlerFunc) Handle(params PatchExperimentVersionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchExperimentVersionHandler interface for that can handle valid patch experiment version params
type PatchExperimentVersionHandler interface {
	Handle(PatchExperimentVersionParams, interface{}) middleware.Responder
}

// NewPatchExperimentVersion creates a new http.Handler for the patch experiment version operation
func NewPatchExperimentVersion(ctx *middleware.Context, handler PatchExperimentVersionHandler) *PatchExperimentVersion {
	return &PatchExperimentVersion{Context: ctx, Handler: handler}
}

/*PatchExperimentVersion swagger:route PATCH /di/v2/experiment/{exp_id}/version/{version_name} Experiment patchExperimentVersion

PatchExperimentVersion

修改实验版本的部分信息

*/
type PatchExperimentVersion struct {
	Context *middleware.Context
	Handler PatchExperimentVersionHandler
}

func (o *PatchExperimentVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchExperimentVersionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
