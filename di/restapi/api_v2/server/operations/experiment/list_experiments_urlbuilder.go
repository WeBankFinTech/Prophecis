// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// ListExperimentsURL generates an URL for the list experiments operation
type ListExperimentsURL struct {
	CreateTimeEd   *string
	CreateTimeSt   *string
	CreateUser     *string
	DssFlowName    *string
	DssProjectName *string
	GroupID        *string
	GroupName      *string
	Name           *string
	Page           *int64
	Size           *int64
	SourceSystem   *string
	Tag            *string
	UpdateTimeEd   *string
	UpdateTimeSt   *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListExperimentsURL) WithBasePath(bp string) *ListExperimentsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListExperimentsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ListExperimentsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/di/v2/experiments"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var createTimeEdQ string
	if o.CreateTimeEd != nil {
		createTimeEdQ = *o.CreateTimeEd
	}
	if createTimeEdQ != "" {
		qs.Set("create_time_ed", createTimeEdQ)
	}

	var createTimeStQ string
	if o.CreateTimeSt != nil {
		createTimeStQ = *o.CreateTimeSt
	}
	if createTimeStQ != "" {
		qs.Set("create_time_st", createTimeStQ)
	}

	var createUserQ string
	if o.CreateUser != nil {
		createUserQ = *o.CreateUser
	}
	if createUserQ != "" {
		qs.Set("create_user", createUserQ)
	}

	var dssFlowNameQ string
	if o.DssFlowName != nil {
		dssFlowNameQ = *o.DssFlowName
	}
	if dssFlowNameQ != "" {
		qs.Set("dss_flow_name", dssFlowNameQ)
	}

	var dssProjectNameQ string
	if o.DssProjectName != nil {
		dssProjectNameQ = *o.DssProjectName
	}
	if dssProjectNameQ != "" {
		qs.Set("dss_project_name", dssProjectNameQ)
	}

	var groupIDQ string
	if o.GroupID != nil {
		groupIDQ = *o.GroupID
	}
	if groupIDQ != "" {
		qs.Set("group_id", groupIDQ)
	}

	var groupNameQ string
	if o.GroupName != nil {
		groupNameQ = *o.GroupName
	}
	if groupNameQ != "" {
		qs.Set("group_name", groupNameQ)
	}

	var nameQ string
	if o.Name != nil {
		nameQ = *o.Name
	}
	if nameQ != "" {
		qs.Set("name", nameQ)
	}

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var sizeQ string
	if o.Size != nil {
		sizeQ = swag.FormatInt64(*o.Size)
	}
	if sizeQ != "" {
		qs.Set("size", sizeQ)
	}

	var sourceSystemQ string
	if o.SourceSystem != nil {
		sourceSystemQ = *o.SourceSystem
	}
	if sourceSystemQ != "" {
		qs.Set("source_system", sourceSystemQ)
	}

	var tagQ string
	if o.Tag != nil {
		tagQ = *o.Tag
	}
	if tagQ != "" {
		qs.Set("tag", tagQ)
	}

	var updateTimeEdQ string
	if o.UpdateTimeEd != nil {
		updateTimeEdQ = *o.UpdateTimeEd
	}
	if updateTimeEdQ != "" {
		qs.Set("update_time_ed", updateTimeEdQ)
	}

	var updateTimeStQ string
	if o.UpdateTimeSt != nil {
		updateTimeStQ = *o.UpdateTimeSt
	}
	if updateTimeStQ != "" {
		qs.Set("update_time_st", updateTimeStQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ListExperimentsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ListExperimentsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ListExperimentsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ListExperimentsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ListExperimentsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ListExperimentsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
