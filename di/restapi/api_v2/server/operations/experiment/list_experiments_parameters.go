// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListExperimentsParams creates a new ListExperimentsParams object
// with the default values initialized.
func NewListExperimentsParams() ListExperimentsParams {

	var (
		// initialize parameters with default values

		pageDefault = int64(1)
		sizeDefault = int64(10)
	)

	return ListExperimentsParams{
		Page: &pageDefault,

		Size: &sizeDefault,
	}
}

// ListExperimentsParams contains all the bound params for the list experiments operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListExperiments
type ListExperimentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*根据“创建时间的结束”过滤实验列表
	  In: query
	*/
	CreateTimeEd *string
	/*根据“创建时间的结束”过滤实验列表
	  In: query
	*/
	CreateTimeSt *string
	/*根据“创建人”过滤实验列表
	  In: query
	*/
	CreateUser *string
	/*根据“（DSS）工作流名称”过滤实验列表
	  In: query
	*/
	DssFlowName *string
	/*根据“（DSS）工作流项目”过滤实验列表
	  In: query
	*/
	DssProjectName *string
	/*根据“所属项目组（ID）”过滤实验列表
	  In: query
	*/
	GroupID *string
	/*根据“所属项目组（名字）”过滤实验列表
	  In: query
	*/
	GroupName *string
	/*根据“实验名称”过滤实验列表，支持模糊搜索
	  In: query
	*/
	Name *string
	/*分页查询的page
	  In: query
	  Default: 1
	*/
	Page *int64
	/*分页查询的size
	  In: query
	  Default: 10
	*/
	Size *int64
	/*根据“来源系统”过滤实验列表
	  In: query
	*/
	SourceSystem *string
	/*根据“实验标签”过滤实验列表，多个标签用逗号隔开
	  In: query
	*/
	Tag *string
	/*根据“更新时间的结束”过滤实验列表
	  In: query
	*/
	UpdateTimeEd *string
	/*根据“更新时间的开始”过滤实验列表
	  In: query
	*/
	UpdateTimeSt *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListExperimentsParams() beforehand.
func (o *ListExperimentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCreateTimeEd, qhkCreateTimeEd, _ := qs.GetOK("create_time_ed")
	if err := o.bindCreateTimeEd(qCreateTimeEd, qhkCreateTimeEd, route.Formats); err != nil {
		res = append(res, err)
	}

	qCreateTimeSt, qhkCreateTimeSt, _ := qs.GetOK("create_time_st")
	if err := o.bindCreateTimeSt(qCreateTimeSt, qhkCreateTimeSt, route.Formats); err != nil {
		res = append(res, err)
	}

	qCreateUser, qhkCreateUser, _ := qs.GetOK("create_user")
	if err := o.bindCreateUser(qCreateUser, qhkCreateUser, route.Formats); err != nil {
		res = append(res, err)
	}

	qDssFlowName, qhkDssFlowName, _ := qs.GetOK("dss_flow_name")
	if err := o.bindDssFlowName(qDssFlowName, qhkDssFlowName, route.Formats); err != nil {
		res = append(res, err)
	}

	qDssProjectName, qhkDssProjectName, _ := qs.GetOK("dss_project_name")
	if err := o.bindDssProjectName(qDssProjectName, qhkDssProjectName, route.Formats); err != nil {
		res = append(res, err)
	}

	qGroupID, qhkGroupID, _ := qs.GetOK("group_id")
	if err := o.bindGroupID(qGroupID, qhkGroupID, route.Formats); err != nil {
		res = append(res, err)
	}

	qGroupName, qhkGroupName, _ := qs.GetOK("group_name")
	if err := o.bindGroupName(qGroupName, qhkGroupName, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSize, qhkSize, _ := qs.GetOK("size")
	if err := o.bindSize(qSize, qhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qSourceSystem, qhkSourceSystem, _ := qs.GetOK("source_system")
	if err := o.bindSourceSystem(qSourceSystem, qhkSourceSystem, route.Formats); err != nil {
		res = append(res, err)
	}

	qTag, qhkTag, _ := qs.GetOK("tag")
	if err := o.bindTag(qTag, qhkTag, route.Formats); err != nil {
		res = append(res, err)
	}

	qUpdateTimeEd, qhkUpdateTimeEd, _ := qs.GetOK("update_time_ed")
	if err := o.bindUpdateTimeEd(qUpdateTimeEd, qhkUpdateTimeEd, route.Formats); err != nil {
		res = append(res, err)
	}

	qUpdateTimeSt, qhkUpdateTimeSt, _ := qs.GetOK("update_time_st")
	if err := o.bindUpdateTimeSt(qUpdateTimeSt, qhkUpdateTimeSt, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCreateTimeEd binds and validates parameter CreateTimeEd from query.
func (o *ListExperimentsParams) bindCreateTimeEd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreateTimeEd = &raw

	return nil
}

// bindCreateTimeSt binds and validates parameter CreateTimeSt from query.
func (o *ListExperimentsParams) bindCreateTimeSt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreateTimeSt = &raw

	return nil
}

// bindCreateUser binds and validates parameter CreateUser from query.
func (o *ListExperimentsParams) bindCreateUser(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreateUser = &raw

	return nil
}

// bindDssFlowName binds and validates parameter DssFlowName from query.
func (o *ListExperimentsParams) bindDssFlowName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.DssFlowName = &raw

	return nil
}

// bindDssProjectName binds and validates parameter DssProjectName from query.
func (o *ListExperimentsParams) bindDssProjectName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.DssProjectName = &raw

	return nil
}

// bindGroupID binds and validates parameter GroupID from query.
func (o *ListExperimentsParams) bindGroupID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GroupID = &raw

	return nil
}

// bindGroupName binds and validates parameter GroupName from query.
func (o *ListExperimentsParams) bindGroupName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GroupName = &raw

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *ListExperimentsParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *ListExperimentsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListExperimentsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindSize binds and validates parameter Size from query.
func (o *ListExperimentsParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListExperimentsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("size", "query", "int64", raw)
	}
	o.Size = &value

	return nil
}

// bindSourceSystem binds and validates parameter SourceSystem from query.
func (o *ListExperimentsParams) bindSourceSystem(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SourceSystem = &raw

	return nil
}

// bindTag binds and validates parameter Tag from query.
func (o *ListExperimentsParams) bindTag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Tag = &raw

	return nil
}

// bindUpdateTimeEd binds and validates parameter UpdateTimeEd from query.
func (o *ListExperimentsParams) bindUpdateTimeEd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UpdateTimeEd = &raw

	return nil
}

// bindUpdateTimeSt binds and validates parameter UpdateTimeSt from query.
func (o *ListExperimentsParams) bindUpdateTimeSt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UpdateTimeSt = &raw

	return nil
}
