// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v2/restmodels"
)

// GetExperimentVersionOKCode is the HTTP code returned for type GetExperimentVersionOK
const GetExperimentVersionOKCode int = 200

/*GetExperimentVersionOK OK

swagger:response getExperimentVersionOK
*/
type GetExperimentVersionOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.ExperimentWithoutPipeline `json:"body,omitempty"`
}

// NewGetExperimentVersionOK creates GetExperimentVersionOK with default headers values
func NewGetExperimentVersionOK() *GetExperimentVersionOK {

	return &GetExperimentVersionOK{}
}

// WithPayload adds the payload to the get experiment version o k response
func (o *GetExperimentVersionOK) WithPayload(payload *restmodels.ExperimentWithoutPipeline) *GetExperimentVersionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get experiment version o k response
func (o *GetExperimentVersionOK) SetPayload(payload *restmodels.ExperimentWithoutPipeline) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExperimentVersionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExperimentVersionUnauthorizedCode is the HTTP code returned for type GetExperimentVersionUnauthorized
const GetExperimentVersionUnauthorizedCode int = 401

/*GetExperimentVersionUnauthorized Unauthorized

swagger:response getExperimentVersionUnauthorized
*/
type GetExperimentVersionUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewGetExperimentVersionUnauthorized creates GetExperimentVersionUnauthorized with default headers values
func NewGetExperimentVersionUnauthorized() *GetExperimentVersionUnauthorized {

	return &GetExperimentVersionUnauthorized{}
}

// WithPayload adds the payload to the get experiment version unauthorized response
func (o *GetExperimentVersionUnauthorized) WithPayload(payload *restmodels.Error) *GetExperimentVersionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get experiment version unauthorized response
func (o *GetExperimentVersionUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExperimentVersionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExperimentVersionNotFoundCode is the HTTP code returned for type GetExperimentVersionNotFound
const GetExperimentVersionNotFoundCode int = 404

/*GetExperimentVersionNotFound The Models cannot be found

swagger:response getExperimentVersionNotFound
*/
type GetExperimentVersionNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewGetExperimentVersionNotFound creates GetExperimentVersionNotFound with default headers values
func NewGetExperimentVersionNotFound() *GetExperimentVersionNotFound {

	return &GetExperimentVersionNotFound{}
}

// WithPayload adds the payload to the get experiment version not found response
func (o *GetExperimentVersionNotFound) WithPayload(payload *restmodels.Error) *GetExperimentVersionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get experiment version not found response
func (o *GetExperimentVersionNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExperimentVersionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
