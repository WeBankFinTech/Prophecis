// Code generated by go-swagger; DO NOT EDIT.

package experiment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v2/restmodels"
)

// CreateExperimentTestOKCode is the HTTP code returned for type CreateExperimentTestOK
const CreateExperimentTestOKCode int = 200

/*CreateExperimentTestOK OK

swagger:response createExperimentTestOK
*/
type CreateExperimentTestOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.CreateExperimentResponse `json:"body,omitempty"`
}

// NewCreateExperimentTestOK creates CreateExperimentTestOK with default headers values
func NewCreateExperimentTestOK() *CreateExperimentTestOK {

	return &CreateExperimentTestOK{}
}

// WithPayload adds the payload to the create experiment test o k response
func (o *CreateExperimentTestOK) WithPayload(payload *restmodels.CreateExperimentResponse) *CreateExperimentTestOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create experiment test o k response
func (o *CreateExperimentTestOK) SetPayload(payload *restmodels.CreateExperimentResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateExperimentTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateExperimentTestUnauthorizedCode is the HTTP code returned for type CreateExperimentTestUnauthorized
const CreateExperimentTestUnauthorizedCode int = 401

/*CreateExperimentTestUnauthorized Unauthorized

swagger:response createExperimentTestUnauthorized
*/
type CreateExperimentTestUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewCreateExperimentTestUnauthorized creates CreateExperimentTestUnauthorized with default headers values
func NewCreateExperimentTestUnauthorized() *CreateExperimentTestUnauthorized {

	return &CreateExperimentTestUnauthorized{}
}

// WithPayload adds the payload to the create experiment test unauthorized response
func (o *CreateExperimentTestUnauthorized) WithPayload(payload *restmodels.Error) *CreateExperimentTestUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create experiment test unauthorized response
func (o *CreateExperimentTestUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateExperimentTestUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateExperimentTestNotFoundCode is the HTTP code returned for type CreateExperimentTestNotFound
const CreateExperimentTestNotFoundCode int = 404

/*CreateExperimentTestNotFound The Models cannot be found

swagger:response createExperimentTestNotFound
*/
type CreateExperimentTestNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewCreateExperimentTestNotFound creates CreateExperimentTestNotFound with default headers values
func NewCreateExperimentTestNotFound() *CreateExperimentTestNotFound {

	return &CreateExperimentTestNotFound{}
}

// WithPayload adds the payload to the create experiment test not found response
func (o *CreateExperimentTestNotFound) WithPayload(payload *restmodels.Error) *CreateExperimentTestNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create experiment test not found response
func (o *CreateExperimentTestNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateExperimentTestNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
