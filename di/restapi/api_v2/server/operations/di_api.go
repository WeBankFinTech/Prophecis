// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"webank/DI/restapi/api_v2/server/operations/experiment"
	"webank/DI/restapi/api_v2/server/operations/experiment_run"
	"webank/DI/restapi/api_v2/server/operations/pipeline"
)

// NewDiAPI creates a new Di instance
func NewDiAPI(spec *loads.Document) *DiAPI {
	return &DiAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		BinProducer:           runtime.ByteStreamProducer(),
		ExperimentBatchDeleteExperimentsHandler: experiment.BatchDeleteExperimentsHandlerFunc(func(params experiment.BatchDeleteExperimentsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentBatchDeleteExperiments has not yet been implemented")
		}),
		ExperimentCodeUploadHandler: experiment.CodeUploadHandlerFunc(func(params experiment.CodeUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentCodeUpload has not yet been implemented")
		}),
		ExperimentCopyExperimentHandler: experiment.CopyExperimentHandlerFunc(func(params experiment.CopyExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentCopyExperiment has not yet been implemented")
		}),
		ExperimentCreateExperimentHandler: experiment.CreateExperimentHandlerFunc(func(params experiment.CreateExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentCreateExperiment has not yet been implemented")
		}),
		ExperimentCreateExperimentByUploadHandler: experiment.CreateExperimentByUploadHandlerFunc(func(params experiment.CreateExperimentByUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentCreateExperimentByUpload has not yet been implemented")
		}),
		ExperimentRunCreateExperimentRunHandler: experiment_run.CreateExperimentRunHandlerFunc(func(params experiment_run.CreateExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunCreateExperimentRun has not yet been implemented")
		}),
		ExperimentCreateExperimentTestHandler: experiment.CreateExperimentTestHandlerFunc(func(params experiment.CreateExperimentTestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentCreateExperimentTest has not yet been implemented")
		}),
		ExperimentCreateExperimentVersionHandler: experiment.CreateExperimentVersionHandlerFunc(func(params experiment.CreateExperimentVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentCreateExperimentVersion has not yet been implemented")
		}),
		ExperimentDeleteExperimentHandler: experiment.DeleteExperimentHandlerFunc(func(params experiment.DeleteExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentDeleteExperiment has not yet been implemented")
		}),
		ExperimentRunDeleteExperimentRunHandler: experiment_run.DeleteExperimentRunHandlerFunc(func(params experiment_run.DeleteExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunDeleteExperimentRun has not yet been implemented")
		}),
		ExperimentDeleteExperimentVersionHandler: experiment.DeleteExperimentVersionHandlerFunc(func(params experiment.DeleteExperimentVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentDeleteExperimentVersion has not yet been implemented")
		}),
		ExperimentExportExperimentFlowJSONHandler: experiment.ExportExperimentFlowJSONHandlerFunc(func(params experiment.ExportExperimentFlowJSONParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentExportExperimentFlowJSON has not yet been implemented")
		}),
		ExperimentGetDSSJumpMLSSUserHandler: experiment.GetDSSJumpMLSSUserHandlerFunc(func(params experiment.GetDSSJumpMLSSUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentGetDSSJumpMLSSUser has not yet been implemented")
		}),
		ExperimentGetExperimentHandler: experiment.GetExperimentHandlerFunc(func(params experiment.GetExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentGetExperiment has not yet been implemented")
		}),
		ExperimentRunGetExperimentRunHandler: experiment_run.GetExperimentRunHandlerFunc(func(params experiment_run.GetExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunGetExperimentRun has not yet been implemented")
		}),
		ExperimentRunGetExperimentRunFlowJSONHandler: experiment_run.GetExperimentRunFlowJSONHandlerFunc(func(params experiment_run.GetExperimentRunFlowJSONParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunGetExperimentRunFlowJSON has not yet been implemented")
		}),
		 ExperimentRunGetExperimentRunNodeExecutionsHandler: experiment_run.GetExperimentRunNodeExecutionsHandlerFunc(func(params experiment_run.GetExperimentRunNodeExecutionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunGetExperimentRunNodeExecutions has not yet been implemented")
		}),
		ExperimentRunGetExperimentRunNodeLogsHandler: experiment_run.GetExperimentRunNodeLogsHandlerFunc(func(params experiment_run.GetExperimentRunNodeLogsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunGetExperimentRunNodeLogs has not yet been implemented")
		}),
		ExperimentRunGetExperimentRunStatusHandler: experiment_run.GetExperimentRunStatusHandlerFunc(func(params experiment_run.GetExperimentRunStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunGetExperimentRunStatus has not yet been implemented")
		}),
		ExperimentGetExperimentVersionHandler: experiment.GetExperimentVersionHandlerFunc(func(params experiment.GetExperimentVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentGetExperimentVersion has not yet been implemented")
		}),
		ExperimentGetExperimentVersionFlowJSONHandler: experiment.GetExperimentVersionFlowJSONHandlerFunc(func(params experiment.GetExperimentVersionFlowJSONParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentGetExperimentVersionFlowJSON has not yet been implemented")
		}),
		ExperimentGetExperimentVersionGlobalVariablesStrHandler: experiment.GetExperimentVersionGlobalVariablesStrHandlerFunc(func(params experiment.GetExperimentVersionGlobalVariablesStrParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentGetExperimentVersionGlobalVariablesStr has not yet been implemented")
		}),
		PipelineGetPipelineEventSenderNodeContentHandler: pipeline.GetPipelineEventSenderNodeContentHandlerFunc(func(params pipeline.GetPipelineEventSenderNodeContentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineEventSenderNodeContent has not yet been implemented")
		}),
		PipelineGetPipelineGPUNodeManifestHandler: pipeline.GetPipelineGPUNodeManifestHandlerFunc(func(params pipeline.GetPipelineGPUNodeManifestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineGPUNodeManifest has not yet been implemented")
		}),
		PipelineGetPipelineGlobalVariablesHandler: pipeline.GetPipelineGlobalVariablesHandlerFunc(func(params pipeline.GetPipelineGlobalVariablesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineGlobalVariables has not yet been implemented")
		}),
		PipelineGetPipelineGlobalVariablesModelHandler: pipeline.GetPipelineGlobalVariablesModelHandlerFunc(func(params pipeline.GetPipelineGlobalVariablesModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineGlobalVariablesModel has not yet been implemented")
		}),
		PipelineGetPipelineGlobalVariablesProcessLineHandler: pipeline.GetPipelineGlobalVariablesProcessLineHandlerFunc(func(params pipeline.GetPipelineGlobalVariablesProcessLineParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineGlobalVariablesProcessLine has not yet been implemented")
		}),
		PipelineGetPipelineModelPredictNodeManifestHandler: pipeline.GetPipelineModelPredictNodeManifestHandlerFunc(func(params pipeline.GetPipelineModelPredictNodeManifestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineModelPredictNodeManifest has not yet been implemented")
		}),
		PipelineGetPipelineProcessLineNodeManifestHandler: pipeline.GetPipelineProcessLineNodeManifestHandlerFunc(func(params pipeline.GetPipelineProcessLineNodeManifestParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipelineProcessLineNodeManifest has not yet been implemented")
		}),
		ExperimentRunKillExperimentRunHandler: experiment_run.KillExperimentRunHandlerFunc(func(params experiment_run.KillExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunKillExperimentRun has not yet been implemented")
		}),
		ExperimentListExperimentDSSFlowNamesHandler: experiment.ListExperimentDSSFlowNamesHandlerFunc(func(params experiment.ListExperimentDSSFlowNamesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentListExperimentDSSFlowNames has not yet been implemented")
		}),
		ExperimentListExperimentDSSProjectNamesHandler: experiment.ListExperimentDSSProjectNamesHandlerFunc(func(params experiment.ListExperimentDSSProjectNamesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentListExperimentDSSProjectNames has not yet been implemented")
		}),
		ExperimentRunListExperimentRunsHandler: experiment_run.ListExperimentRunsHandlerFunc(func(params experiment_run.ListExperimentRunsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunListExperimentRuns has not yet been implemented")
		}),
		ExperimentListExperimentSourceSystemsHandler: experiment.ListExperimentSourceSystemsHandlerFunc(func(params experiment.ListExperimentSourceSystemsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentListExperimentSourceSystems has not yet been implemented")
		}),
		ExperimentListExperimentVersionNamesHandler: experiment.ListExperimentVersionNamesHandlerFunc(func(params experiment.ListExperimentVersionNamesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentListExperimentVersionNames has not yet been implemented")
		}),
		ExperimentListExperimentVersionsHandler: experiment.ListExperimentVersionsHandlerFunc(func(params experiment.ListExperimentVersionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentListExperimentVersions has not yet been implemented")
		}),
		ExperimentListExperimentsHandler: experiment.ListExperimentsHandlerFunc(func(params experiment.ListExperimentsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentListExperiments has not yet been implemented")
		}),
		ExperimentPatchExperimentHandler: experiment.PatchExperimentHandlerFunc(func(params experiment.PatchExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentPatchExperiment has not yet been implemented")
		}),
		ExperimentPatchExperimentVersionHandler: experiment.PatchExperimentVersionHandlerFunc(func(params experiment.PatchExperimentVersionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentPatchExperimentVersion has not yet been implemented")
		}),
		ExperimentRunRetryExperimentRunHandler: experiment_run.RetryExperimentRunHandlerFunc(func(params experiment_run.RetryExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunRetryExperimentRun has not yet been implemented")
		}),
		ExperimentUploadExperimentFlowJSONHandler: experiment.UploadExperimentFlowJSONHandlerFunc(func(params experiment.UploadExperimentFlowJSONParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentUploadExperimentFlowJSON has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BasicAuthTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (basicAuthToken) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "X-Watson-Authorization-Token" header is set
		WatsonAuthTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (watsonAuthToken) X-Watson-Authorization-Token from header param [X-Watson-Authorization-Token] has not yet been implemented")
		},
		// Applies when the "watson-token" query is set
		WatsonAuthTokenQueryAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (watsonAuthTokenQuery) watson-token from query param [watson-token] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*DiAPI Prophecis Rest Service v2
 */
type DiAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer

	// BasicAuthTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BasicAuthTokenAuth func(string) (interface{}, error)

	// WatsonAuthTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-Watson-Authorization-Token provided in the header
	WatsonAuthTokenAuth func(string) (interface{}, error)

	// WatsonAuthTokenQueryAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key watson-token provided in the query
	WatsonAuthTokenQueryAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ExperimentBatchDeleteExperimentsHandler sets the operation handler for the batch delete experiments operation
	ExperimentBatchDeleteExperimentsHandler experiment.BatchDeleteExperimentsHandler
	// ExperimentCodeUploadHandler sets the operation handler for the code upload operation
	ExperimentCodeUploadHandler experiment.CodeUploadHandler
	// ExperimentCopyExperimentHandler sets the operation handler for the copy experiment operation
	ExperimentCopyExperimentHandler experiment.CopyExperimentHandler
	// ExperimentCreateExperimentHandler sets the operation handler for the create experiment operation
	ExperimentCreateExperimentHandler experiment.CreateExperimentHandler
	// ExperimentCreateExperimentByUploadHandler sets the operation handler for the create experiment by upload operation
	ExperimentCreateExperimentByUploadHandler experiment.CreateExperimentByUploadHandler
	// ExperimentRunCreateExperimentRunHandler sets the operation handler for the create experiment run operation
	ExperimentRunCreateExperimentRunHandler experiment_run.CreateExperimentRunHandler
	// ExperimentCreateExperimentTestHandler sets the operation handler for the create experiment test operation
	ExperimentCreateExperimentTestHandler experiment.CreateExperimentTestHandler
	// ExperimentCreateExperimentVersionHandler sets the operation handler for the create experiment version operation
	ExperimentCreateExperimentVersionHandler experiment.CreateExperimentVersionHandler
	// ExperimentDeleteExperimentHandler sets the operation handler for the delete experiment operation
	ExperimentDeleteExperimentHandler experiment.DeleteExperimentHandler
	// ExperimentRunDeleteExperimentRunHandler sets the operation handler for the delete experiment run operation
	ExperimentRunDeleteExperimentRunHandler experiment_run.DeleteExperimentRunHandler
	// ExperimentDeleteExperimentVersionHandler sets the operation handler for the delete experiment version operation
	ExperimentDeleteExperimentVersionHandler experiment.DeleteExperimentVersionHandler
	// ExperimentExportExperimentFlowJSONHandler sets the operation handler for the export experiment flow Json operation
	ExperimentExportExperimentFlowJSONHandler experiment.ExportExperimentFlowJSONHandler
	// ExperimentGetDSSJumpMLSSUserHandler sets the operation handler for the get d s s jump m l s s user operation
	ExperimentGetDSSJumpMLSSUserHandler experiment.GetDSSJumpMLSSUserHandler
	// ExperimentGetExperimentHandler sets the operation handler for the get experiment operation
	ExperimentGetExperimentHandler experiment.GetExperimentHandler
	// ExperimentRunGetExperimentRunHandler sets the operation handler for the get experiment run operation
	ExperimentRunGetExperimentRunHandler experiment_run.GetExperimentRunHandler
	// ExperimentRunGetExperimentRunFlowJSONHandler sets the operation handler for the get experiment run flow Json operation
	ExperimentRunGetExperimentRunFlowJSONHandler experiment_run.GetExperimentRunFlowJSONHandler
	// ExperimentRunGetExperimentRunNodeExecutionsHandler sets the operation handler for the get experiment run node executions operation
	ExperimentRunGetExperimentRunNodeExecutionsHandler experiment_run.GetExperimentRunNodeExecutionsHandler
	// ExperimentRunGetExperimentRunNodeLogsHandler sets the operation handler for the get experiment run node logs operation
	ExperimentRunGetExperimentRunNodeLogsHandler experiment_run.GetExperimentRunNodeLogsHandler
	// ExperimentRunGetExperimentRunStatusHandler sets the operation handler for the get experiment run status operation
	ExperimentRunGetExperimentRunStatusHandler experiment_run.GetExperimentRunStatusHandler
	// ExperimentGetExperimentVersionHandler sets the operation handler for the get experiment version operation
	ExperimentGetExperimentVersionHandler experiment.GetExperimentVersionHandler
	// ExperimentGetExperimentVersionFlowJSONHandler sets the operation handler for the get experiment version flow Json operation
	ExperimentGetExperimentVersionFlowJSONHandler experiment.GetExperimentVersionFlowJSONHandler
	// ExperimentGetExperimentVersionGlobalVariablesStrHandler sets the operation handler for the get experiment version global variables str operation
	ExperimentGetExperimentVersionGlobalVariablesStrHandler experiment.GetExperimentVersionGlobalVariablesStrHandler
	// PipelineGetPipelineEventSenderNodeContentHandler sets the operation handler for the get pipeline event sender node content operation
	PipelineGetPipelineEventSenderNodeContentHandler pipeline.GetPipelineEventSenderNodeContentHandler
	// PipelineGetPipelineGPUNodeManifestHandler sets the operation handler for the get pipeline g p u node manifest operation
	PipelineGetPipelineGPUNodeManifestHandler pipeline.GetPipelineGPUNodeManifestHandler
	// PipelineGetPipelineGlobalVariablesHandler sets the operation handler for the get pipeline global variables operation
	PipelineGetPipelineGlobalVariablesHandler pipeline.GetPipelineGlobalVariablesHandler
	// PipelineGetPipelineGlobalVariablesModelHandler sets the operation handler for the get pipeline global variables model operation
	PipelineGetPipelineGlobalVariablesModelHandler pipeline.GetPipelineGlobalVariablesModelHandler
	// PipelineGetPipelineGlobalVariablesProcessLineHandler sets the operation handler for the get pipeline global variables process line operation
	PipelineGetPipelineGlobalVariablesProcessLineHandler pipeline.GetPipelineGlobalVariablesProcessLineHandler
	// PipelineGetPipelineModelPredictNodeManifestHandler sets the operation handler for the get pipeline model predict node manifest operation
	PipelineGetPipelineModelPredictNodeManifestHandler pipeline.GetPipelineModelPredictNodeManifestHandler
	// PipelineGetPipelineProcessLineNodeManifestHandler sets the operation handler for the get pipeline process line node manifest operation
	PipelineGetPipelineProcessLineNodeManifestHandler pipeline.GetPipelineProcessLineNodeManifestHandler
	// ExperimentRunKillExperimentRunHandler sets the operation handler for the kill experiment run operation
	ExperimentRunKillExperimentRunHandler experiment_run.KillExperimentRunHandler
	// ExperimentListExperimentDSSFlowNamesHandler sets the operation handler for the list experiment d s s flow names operation
	ExperimentListExperimentDSSFlowNamesHandler experiment.ListExperimentDSSFlowNamesHandler
	// ExperimentListExperimentDSSProjectNamesHandler sets the operation handler for the list experiment d s s project names operation
	ExperimentListExperimentDSSProjectNamesHandler experiment.ListExperimentDSSProjectNamesHandler
	// ExperimentRunListExperimentRunsHandler sets the operation handler for the list experiment runs operation
	ExperimentRunListExperimentRunsHandler experiment_run.ListExperimentRunsHandler
	// ExperimentListExperimentSourceSystemsHandler sets the operation handler for the list experiment source systems operation
	ExperimentListExperimentSourceSystemsHandler experiment.ListExperimentSourceSystemsHandler
	// ExperimentListExperimentVersionNamesHandler sets the operation handler for the list experiment version names operation
	ExperimentListExperimentVersionNamesHandler experiment.ListExperimentVersionNamesHandler
	// ExperimentListExperimentVersionsHandler sets the operation handler for the list experiment versions operation
	ExperimentListExperimentVersionsHandler experiment.ListExperimentVersionsHandler
	// ExperimentListExperimentsHandler sets the operation handler for the list experiments operation
	ExperimentListExperimentsHandler experiment.ListExperimentsHandler
	// ExperimentPatchExperimentHandler sets the operation handler for the patch experiment operation
	ExperimentPatchExperimentHandler experiment.PatchExperimentHandler
	// ExperimentPatchExperimentVersionHandler sets the operation handler for the patch experiment version operation
	ExperimentPatchExperimentVersionHandler experiment.PatchExperimentVersionHandler
	// ExperimentRunRetryExperimentRunHandler sets the operation handler for the retry experiment run operation
	ExperimentRunRetryExperimentRunHandler experiment_run.RetryExperimentRunHandler
	// ExperimentUploadExperimentFlowJSONHandler sets the operation handler for the upload experiment flow Json operation
	ExperimentUploadExperimentFlowJSONHandler experiment.UploadExperimentFlowJSONHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *DiAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DiAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DiAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DiAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DiAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DiAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DiAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DiAPI
func (o *DiAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.BasicAuthTokenAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.WatsonAuthTokenAuth == nil {
		unregistered = append(unregistered, "XWatsonAuthorizationTokenAuth")
	}

	if o.WatsonAuthTokenQueryAuth == nil {
		unregistered = append(unregistered, "WatsonTokenAuth")
	}

	if o.ExperimentBatchDeleteExperimentsHandler == nil {
		unregistered = append(unregistered, "experiment.BatchDeleteExperimentsHandler")
	}

	if o.ExperimentCodeUploadHandler == nil {
		unregistered = append(unregistered, "experiment.CodeUploadHandler")
	}

	if o.ExperimentCopyExperimentHandler == nil {
		unregistered = append(unregistered, "experiment.CopyExperimentHandler")
	}

	if o.ExperimentCreateExperimentHandler == nil {
		unregistered = append(unregistered, "experiment.CreateExperimentHandler")
	}

	if o.ExperimentCreateExperimentByUploadHandler == nil {
		unregistered = append(unregistered, "experiment.CreateExperimentByUploadHandler")
	}

	if o.ExperimentRunCreateExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_run.CreateExperimentRunHandler")
	}

	if o.ExperimentCreateExperimentTestHandler == nil {
		unregistered = append(unregistered, "experiment.CreateExperimentTestHandler")
	}

	if o.ExperimentCreateExperimentVersionHandler == nil {
		unregistered = append(unregistered, "experiment.CreateExperimentVersionHandler")
	}

	if o.ExperimentDeleteExperimentHandler == nil {
		unregistered = append(unregistered, "experiment.DeleteExperimentHandler")
	}

	if o.ExperimentRunDeleteExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_run.DeleteExperimentRunHandler")
	}

	if o.ExperimentDeleteExperimentVersionHandler == nil {
		unregistered = append(unregistered, "experiment.DeleteExperimentVersionHandler")
	}

	if o.ExperimentExportExperimentFlowJSONHandler == nil {
		unregistered = append(unregistered, "experiment.ExportExperimentFlowJSONHandler")
	}

	if o.ExperimentGetDSSJumpMLSSUserHandler == nil {
		unregistered = append(unregistered, "experiment.GetDSSJumpMLSSUserHandler")
	}

	if o.ExperimentGetExperimentHandler == nil {
		unregistered = append(unregistered, "experiment.GetExperimentHandler")
	}

	if o.ExperimentRunGetExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_run.GetExperimentRunHandler")
	}

	if o.ExperimentRunGetExperimentRunFlowJSONHandler == nil {
		unregistered = append(unregistered, "experiment_run.GetExperimentRunFlowJSONHandler")
	}

	if o.ExperimentRunGetExperimentRunNodeExecutionsHandler == nil {
		unregistered = append(unregistered, "experiment_run.GetExperimentRunNodeExecutionsHandler")
	}

	if o.ExperimentRunGetExperimentRunNodeLogsHandler == nil {
		unregistered = append(unregistered, "experiment_run.GetExperimentRunNodeLogsHandler")
	}

	if o.ExperimentRunGetExperimentRunStatusHandler == nil {
		unregistered = append(unregistered, "experiment_run.GetExperimentRunStatusHandler")
	}

	if o.ExperimentGetExperimentVersionHandler == nil {
		unregistered = append(unregistered, "experiment.GetExperimentVersionHandler")
	}

	if o.ExperimentGetExperimentVersionFlowJSONHandler == nil {
		unregistered = append(unregistered, "experiment.GetExperimentVersionFlowJSONHandler")
	}

	if o.ExperimentGetExperimentVersionGlobalVariablesStrHandler == nil {
		unregistered = append(unregistered, "experiment.GetExperimentVersionGlobalVariablesStrHandler")
	}

	if o.PipelineGetPipelineEventSenderNodeContentHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineEventSenderNodeContentHandler")
	}

	if o.PipelineGetPipelineGPUNodeManifestHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineGPUNodeManifestHandler")
	}

	if o.PipelineGetPipelineGlobalVariablesHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineGlobalVariablesHandler")
	}

	if o.PipelineGetPipelineGlobalVariablesModelHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineGlobalVariablesModelHandler")
	}

	if o.PipelineGetPipelineGlobalVariablesProcessLineHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineGlobalVariablesProcessLineHandler")
	}

	if o.PipelineGetPipelineModelPredictNodeManifestHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineModelPredictNodeManifestHandler")
	}

	if o.PipelineGetPipelineProcessLineNodeManifestHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineProcessLineNodeManifestHandler")
	}

	if o.ExperimentRunKillExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_run.KillExperimentRunHandler")
	}

	if o.ExperimentListExperimentDSSFlowNamesHandler == nil {
		unregistered = append(unregistered, "experiment.ListExperimentDSSFlowNamesHandler")
	}

	if o.ExperimentListExperimentDSSProjectNamesHandler == nil {
		unregistered = append(unregistered, "experiment.ListExperimentDSSProjectNamesHandler")
	}

	if o.ExperimentRunListExperimentRunsHandler == nil {
		unregistered = append(unregistered, "experiment_run.ListExperimentRunsHandler")
	}

	if o.ExperimentListExperimentSourceSystemsHandler == nil {
		unregistered = append(unregistered, "experiment.ListExperimentSourceSystemsHandler")
	}

	if o.ExperimentListExperimentVersionNamesHandler == nil {
		unregistered = append(unregistered, "experiment.ListExperimentVersionNamesHandler")
	}

	if o.ExperimentListExperimentVersionsHandler == nil {
		unregistered = append(unregistered, "experiment.ListExperimentVersionsHandler")
	}

	if o.ExperimentListExperimentsHandler == nil {
		unregistered = append(unregistered, "experiment.ListExperimentsHandler")
	}

	if o.ExperimentPatchExperimentHandler == nil {
		unregistered = append(unregistered, "experiment.PatchExperimentHandler")
	}

	if o.ExperimentPatchExperimentVersionHandler == nil {
		unregistered = append(unregistered, "experiment.PatchExperimentVersionHandler")
	}

	if o.ExperimentRunRetryExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_run.RetryExperimentRunHandler")
	}

	if o.ExperimentUploadExperimentFlowJSONHandler == nil {
		unregistered = append(unregistered, "experiment.UploadExperimentFlowJSONHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DiAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DiAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {

		case "basicAuthToken":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BasicAuthTokenAuth)

		case "watsonAuthToken":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.WatsonAuthTokenAuth)

		case "watsonAuthTokenQuery":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.WatsonAuthTokenQueryAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *DiAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *DiAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *DiAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DiAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the di API
func (o *DiAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DiAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v2/experiments"] = experiment.NewBatchDeleteExperiments(o.context, o.ExperimentBatchDeleteExperimentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment/code_upload"] = experiment.NewCodeUpload(o.context, o.ExperimentCodeUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment/{exp_id}/copy"] = experiment.NewCopyExperiment(o.context, o.ExperimentCopyExperimentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment"] = experiment.NewCreateExperiment(o.context, o.ExperimentCreateExperimentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment/upload"] = experiment.NewCreateExperimentByUpload(o.context, o.ExperimentCreateExperimentByUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment_run"] = experiment_run.NewCreateExperimentRun(o.context, o.ExperimentRunCreateExperimentRunHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment_test"] = experiment.NewCreateExperimentTest(o.context, o.ExperimentCreateExperimentTestHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment/{exp_id}/version"] = experiment.NewCreateExperimentVersion(o.context, o.ExperimentCreateExperimentVersionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v2/experiment/{exp_id}"] = experiment.NewDeleteExperiment(o.context, o.ExperimentDeleteExperimentHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v2/experiment_run/{run_id}"] = experiment_run.NewDeleteExperimentRun(o.context, o.ExperimentRunDeleteExperimentRunHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v2/experiment/{exp_id}/version/{version_name}"] = experiment.NewDeleteExperimentVersion(o.context, o.ExperimentDeleteExperimentVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}/export_flow_json"] = experiment.NewExportExperimentFlowJSON(o.context, o.ExperimentExportExperimentFlowJSONHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/dss_jump_mlss_user"] = experiment.NewGetDSSJumpMLSSUser(o.context, o.ExperimentGetDSSJumpMLSSUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}"] = experiment.NewGetExperiment(o.context, o.ExperimentGetExperimentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment_run/{run_id}"] = experiment_run.NewGetExperimentRun(o.context, o.ExperimentRunGetExperimentRunHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment_run/{run_id}/flow_json"] = experiment_run.NewGetExperimentRunFlowJSON(o.context, o.ExperimentRunGetExperimentRunFlowJSONHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment_run/{run_id}/node_executions"] = experiment_run.NewGetExperimentRunNodeExecutions(o.context, o.ExperimentRunGetExperimentRunNodeExecutionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment_run/{run_id}/{node_id}/logs"] = experiment_run.NewGetExperimentRunNodeLogs(o.context, o.ExperimentRunGetExperimentRunNodeLogsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment_run/{run_id}/status"] = experiment_run.NewGetExperimentRunStatus(o.context, o.ExperimentRunGetExperimentRunStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}/version/{version_name}"] = experiment.NewGetExperimentVersion(o.context, o.ExperimentGetExperimentVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}/version/{version_name}/flow_json"] = experiment.NewGetExperimentVersionFlowJSON(o.context, o.ExperimentGetExperimentVersionFlowJSONHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}/version/{version_name}/global_variables_str"] = experiment.NewGetExperimentVersionGlobalVariablesStr(o.context, o.ExperimentGetExperimentVersionGlobalVariablesStrHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/eventsender_node_content"] = pipeline.NewGetPipelineEventSenderNodeContent(o.context, o.PipelineGetPipelineEventSenderNodeContentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/gpu_node_manifest"] = pipeline.NewGetPipelineGPUNodeManifest(o.context, o.PipelineGetPipelineGPUNodeManifestHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/global_variables"] = pipeline.NewGetPipelineGlobalVariables(o.context, o.PipelineGetPipelineGlobalVariablesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/global_variables/model"] = pipeline.NewGetPipelineGlobalVariablesModel(o.context, o.PipelineGetPipelineGlobalVariablesModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/global_variables/process_line"] = pipeline.NewGetPipelineGlobalVariablesProcessLine(o.context, o.PipelineGetPipelineGlobalVariablesProcessLineHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/modelpredict_node_manifest"] = pipeline.NewGetPipelineModelPredictNodeManifest(o.context, o.PipelineGetPipelineModelPredictNodeManifestHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/pipeline/processline_node_manifest"] = pipeline.NewGetPipelineProcessLineNodeManifest(o.context, o.PipelineGetPipelineProcessLineNodeManifestHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment_run/{run_id}/kill"] = experiment_run.NewKillExperimentRun(o.context, o.ExperimentRunKillExperimentRunHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/dss_flow_names"] = experiment.NewListExperimentDSSFlowNames(o.context, o.ExperimentListExperimentDSSFlowNamesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/dss_project_names"] = experiment.NewListExperimentDSSProjectNames(o.context, o.ExperimentListExperimentDSSProjectNamesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment_runs"] = experiment_run.NewListExperimentRuns(o.context, o.ExperimentRunListExperimentRunsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/source_systems"] = experiment.NewListExperimentSourceSystems(o.context, o.ExperimentListExperimentSourceSystemsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}/version_names"] = experiment.NewListExperimentVersionNames(o.context, o.ExperimentListExperimentVersionNamesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiment/{exp_id}/versions"] = experiment.NewListExperimentVersions(o.context, o.ExperimentListExperimentVersionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v2/experiments"] = experiment.NewListExperiments(o.context, o.ExperimentListExperimentsHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/di/v2/experiment/{exp_id}"] = experiment.NewPatchExperiment(o.context, o.ExperimentPatchExperimentHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/di/v2/experiment/{exp_id}/version/{version_name}"] = experiment.NewPatchExperimentVersion(o.context, o.ExperimentPatchExperimentVersionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment_run/{run_id}/retry"] = experiment_run.NewRetryExperimentRun(o.context, o.ExperimentRunRetryExperimentRunHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v2/experiment/upload_flow_json"] = experiment.NewUploadExperimentFlowJSON(o.context, o.ExperimentUploadExperimentFlowJSONHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DiAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DiAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DiAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DiAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
