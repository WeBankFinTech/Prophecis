// Code generated by go-swagger; DO NOT EDIT.

package experiment_run

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v2/restmodels"
)

// GetExperimentRunNodeLogsOKCode is the HTTP code returned for type GetExperimentRunNodeLogsOK
const GetExperimentRunNodeLogsOKCode int = 200

/*GetExperimentRunNodeLogsOK OK

swagger:response getExperimentRunNodeLogsOK
*/
type GetExperimentRunNodeLogsOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewGetExperimentRunNodeLogsOK creates GetExperimentRunNodeLogsOK with default headers values
func NewGetExperimentRunNodeLogsOK() *GetExperimentRunNodeLogsOK {

	return &GetExperimentRunNodeLogsOK{}
}

// WithPayload adds the payload to the get experiment run node logs o k response
func (o *GetExperimentRunNodeLogsOK) WithPayload(payload io.ReadCloser) *GetExperimentRunNodeLogsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get experiment run node logs o k response
func (o *GetExperimentRunNodeLogsOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExperimentRunNodeLogsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetExperimentRunNodeLogsUnauthorizedCode is the HTTP code returned for type GetExperimentRunNodeLogsUnauthorized
const GetExperimentRunNodeLogsUnauthorizedCode int = 401

/*GetExperimentRunNodeLogsUnauthorized Unauthorized

swagger:response getExperimentRunNodeLogsUnauthorized
*/
type GetExperimentRunNodeLogsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewGetExperimentRunNodeLogsUnauthorized creates GetExperimentRunNodeLogsUnauthorized with default headers values
func NewGetExperimentRunNodeLogsUnauthorized() *GetExperimentRunNodeLogsUnauthorized {

	return &GetExperimentRunNodeLogsUnauthorized{}
}

// WithPayload adds the payload to the get experiment run node logs unauthorized response
func (o *GetExperimentRunNodeLogsUnauthorized) WithPayload(payload *restmodels.Error) *GetExperimentRunNodeLogsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get experiment run node logs unauthorized response
func (o *GetExperimentRunNodeLogsUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExperimentRunNodeLogsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetExperimentRunNodeLogsNotFoundCode is the HTTP code returned for type GetExperimentRunNodeLogsNotFound
const GetExperimentRunNodeLogsNotFoundCode int = 404

/*GetExperimentRunNodeLogsNotFound The Models cannot be found

swagger:response getExperimentRunNodeLogsNotFound
*/
type GetExperimentRunNodeLogsNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewGetExperimentRunNodeLogsNotFound creates GetExperimentRunNodeLogsNotFound with default headers values
func NewGetExperimentRunNodeLogsNotFound() *GetExperimentRunNodeLogsNotFound {

	return &GetExperimentRunNodeLogsNotFound{}
}

// WithPayload adds the payload to the get experiment run node logs not found response
func (o *GetExperimentRunNodeLogsNotFound) WithPayload(payload *restmodels.Error) *GetExperimentRunNodeLogsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get experiment run node logs not found response
func (o *GetExperimentRunNodeLogsNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetExperimentRunNodeLogsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
