// Code generated by go-swagger; DO NOT EDIT.

package experiment_run

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListExperimentRunsParams creates a new ListExperimentRunsParams object
// with the default values initialized.
func NewListExperimentRunsParams() ListExperimentRunsParams {

	var (
		// initialize parameters with default values

		pageDefault = int64(1)
		sizeDefault = int64(10)
	)

	return ListExperimentRunsParams{
		Page: &pageDefault,

		Size: &sizeDefault,
	}
}

// ListExperimentRunsParams contains all the bound params for the list experiment runs operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListExperimentRuns
type ListExperimentRunsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*根据“提交时间的结束”过滤实验列表
	  In: query
	*/
	CreateTimeEd *string
	/*根据“提交时间的开始”过滤实验列表
	  In: query
	*/
	CreateTimeSt *string
	/*获取实验的执行记录，那个实验的Id
	  Required: true
	  In: query
	*/
	ExpID string
	/*根据“实验版本”过滤实验执行列表
	  In: query
	*/
	ExpVersionName *string
	/*分页查询的page
	  In: query
	  Default: 1
	*/
	Page *int64
	/*分页查询的size
	  In: query
	  Default: 10
	*/
	Size *int64
	/*根据“执行状态”过滤实验执行列表
	  In: query
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListExperimentRunsParams() beforehand.
func (o *ListExperimentRunsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCreateTimeEd, qhkCreateTimeEd, _ := qs.GetOK("create_time_ed")
	if err := o.bindCreateTimeEd(qCreateTimeEd, qhkCreateTimeEd, route.Formats); err != nil {
		res = append(res, err)
	}

	qCreateTimeSt, qhkCreateTimeSt, _ := qs.GetOK("create_time_st")
	if err := o.bindCreateTimeSt(qCreateTimeSt, qhkCreateTimeSt, route.Formats); err != nil {
		res = append(res, err)
	}

	qExpID, qhkExpID, _ := qs.GetOK("exp_id")
	if err := o.bindExpID(qExpID, qhkExpID, route.Formats); err != nil {
		res = append(res, err)
	}

	qExpVersionName, qhkExpVersionName, _ := qs.GetOK("exp_version_name")
	if err := o.bindExpVersionName(qExpVersionName, qhkExpVersionName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSize, qhkSize, _ := qs.GetOK("size")
	if err := o.bindSize(qSize, qhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCreateTimeEd binds and validates parameter CreateTimeEd from query.
func (o *ListExperimentRunsParams) bindCreateTimeEd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreateTimeEd = &raw

	return nil
}

// bindCreateTimeSt binds and validates parameter CreateTimeSt from query.
func (o *ListExperimentRunsParams) bindCreateTimeSt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreateTimeSt = &raw

	return nil
}

// bindExpID binds and validates parameter ExpID from query.
func (o *ListExperimentRunsParams) bindExpID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("exp_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("exp_id", "query", raw); err != nil {
		return err
	}

	o.ExpID = raw

	return nil
}

// bindExpVersionName binds and validates parameter ExpVersionName from query.
func (o *ListExperimentRunsParams) bindExpVersionName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ExpVersionName = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *ListExperimentRunsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListExperimentRunsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindSize binds and validates parameter Size from query.
func (o *ListExperimentRunsParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListExperimentRunsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("size", "query", "int64", raw)
	}
	o.Size = &value

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *ListExperimentRunsParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *ListExperimentRunsParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Enum("status", "query", *o.Status, []interface{}{"Initializing", "Running", "Succeed", "Failed", "Cancelled"}); err != nil {
		return err
	}

	return nil
}
