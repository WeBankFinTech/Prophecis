// Code generated by go-swagger; DO NOT EDIT.

package experiment_run

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RetryExperimentRunHandlerFunc turns a function with the right signature into a retry experiment run handler
type RetryExperimentRunHandlerFunc func(RetryExperimentRunParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn RetryExperimentRunHandlerFunc) Handle(params RetryExperimentRunParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// RetryExperimentRunHandler interface for that can handle valid retry experiment run params
type RetryExperimentRunHandler interface {
	Handle(RetryExperimentRunParams, interface{}) middleware.Responder
}

// NewRetryExperimentRun creates a new http.Handler for the retry experiment run operation
func NewRetryExperimentRun(ctx *middleware.Context, handler RetryExperimentRunHandler) *RetryExperimentRun {
	return &RetryExperimentRun{Context: ctx, Handler: handler}
}

/*RetryExperimentRun swagger:route POST /di/v2/experiment_run/{run_id}/retry ExperimentRun retryExperimentRun

RetryExperimentRun

根据传入的实验执行ID，新建一个新的实验执行

*/
type RetryExperimentRun struct {
	Context *middleware.Context
	Handler RetryExperimentRunHandler
}

func (o *RetryExperimentRun) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetryExperimentRunParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
