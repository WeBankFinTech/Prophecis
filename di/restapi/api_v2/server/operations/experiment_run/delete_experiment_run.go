// Code generated by go-swagger; DO NOT EDIT.

package experiment_run

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteExperimentRunHandlerFunc turns a function with the right signature into a delete experiment run handler
type DeleteExperimentRunHandlerFunc func(DeleteExperimentRunParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteExperimentRunHandlerFunc) Handle(params DeleteExperimentRunParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteExperimentRunHandler interface for that can handle valid delete experiment run params
type DeleteExperimentRunHandler interface {
	Handle(DeleteExperimentRunParams, interface{}) middleware.Responder
}

// NewDeleteExperimentRun creates a new http.Handler for the delete experiment run operation
func NewDeleteExperimentRun(ctx *middleware.Context, handler DeleteExperimentRunHandler) *DeleteExperimentRun {
	return &DeleteExperimentRun{Context: ctx, Handler: handler}
}

/*DeleteExperimentRun swagger:route DELETE /di/v2/experiment_run/{run_id} ExperimentRun deleteExperimentRun

DeleteExperimentRun

根据传入的实验执行ID，删除该实验执行(只有终态的实验执行才能被删除，否则会报错；非终态的应该等其执行完或者终止执行）

*/
type DeleteExperimentRun struct {
	Context *middleware.Context
	Handler DeleteExperimentRunHandler
}

func (o *DeleteExperimentRun) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteExperimentRunParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
