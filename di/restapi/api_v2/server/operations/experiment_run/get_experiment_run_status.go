// Code generated by go-swagger; DO NOT EDIT.

package experiment_run

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetExperimentRunStatusHandlerFunc turns a function with the right signature into a get experiment run status handler
type GetExperimentRunStatusHandlerFunc func(GetExperimentRunStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetExperimentRunStatusHandlerFunc) Handle(params GetExperimentRunStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetExperimentRunStatusHandler interface for that can handle valid get experiment run status params
type GetExperimentRunStatusHandler interface {
	Handle(GetExperimentRunStatusParams, interface{}) middleware.Responder
}

// NewGetExperimentRunStatus creates a new http.Handler for the get experiment run status operation
func NewGetExperimentRunStatus(ctx *middleware.Context, handler GetExperimentRunStatusHandler) *GetExperimentRunStatus {
	return &GetExperimentRunStatus{Context: ctx, Handler: handler}
}

/*GetExperimentRunStatus swagger:route GET /di/v2/experiment_run/{run_id}/status ExperimentRun getExperimentRunStatus

GetExperimentRunStatus

根据传入的实验执行ID，获取实验执行的状态

*/
type GetExperimentRunStatus struct {
	Context *middleware.Context
	Handler GetExperimentRunStatusHandler
}

func (o *GetExperimentRunStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetExperimentRunStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
