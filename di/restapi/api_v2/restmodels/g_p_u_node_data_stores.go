// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GPUNodeDataStores g p u node data stores
// swagger:model GPUNodeDataStores
type GPUNodeDataStores struct {

	// connection
	Connection *GPUNodeDataStoresConnection `json:"connection,omitempty"`

	// 目前固定为hostmount
	ID string `json:"id,omitempty"`

	// 其container字段对应 资源设置-目录设置-数据子目录
	TrainingData *GPUNodeDataStoresSubDirectory `json:"training_data,omitempty"`

	// 其container字段对应 资源设置-目录设置-结果子目录
	TrainingResults *GPUNodeDataStoresSubDirectory `json:"training_results,omitempty"`

	// 其container字段目前默认为workspace，只有当 参数设置-任务执行设置-执行代码设置 为storagePath时，其值来自  参数设置-任务执行设置-训练代码子目录
	TrainingWorkspace *GPUNodeDataStoresSubDirectory `json:"training_workspace,omitempty"`

	// 目前固定为mount_volume
	Type string `json:"type,omitempty"`
}

// Validate validates this g p u node data stores
func (m *GPUNodeDataStores) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainingData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainingResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainingWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GPUNodeDataStores) validateConnection(formats strfmt.Registry) error {

	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *GPUNodeDataStores) validateTrainingData(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainingData) { // not required
		return nil
	}

	if m.TrainingData != nil {
		if err := m.TrainingData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("training_data")
			}
			return err
		}
	}

	return nil
}

func (m *GPUNodeDataStores) validateTrainingResults(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainingResults) { // not required
		return nil
	}

	if m.TrainingResults != nil {
		if err := m.TrainingResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("training_results")
			}
			return err
		}
	}

	return nil
}

func (m *GPUNodeDataStores) validateTrainingWorkspace(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainingWorkspace) { // not required
		return nil
	}

	if m.TrainingWorkspace != nil {
		if err := m.TrainingWorkspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("training_workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GPUNodeDataStores) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GPUNodeDataStores) UnmarshalBinary(b []byte) error {
	var res GPUNodeDataStores
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GPUNodeDataStoresConnection g p u node data stores connection
// swagger:model GPUNodeDataStoresConnection
type GPUNodeDataStoresConnection struct {

	// 现在固定为host-mount
	Name string `json:"name,omitempty"`

	// [下拉接口获取数据] 资源设置-目录设置-数据根目录
	Path string `json:"path,omitempty"`

	// 现在固定为host_mount
	Type string `json:"type,omitempty"`
}

// Validate validates this g p u node data stores connection
func (m *GPUNodeDataStoresConnection) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GPUNodeDataStoresConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GPUNodeDataStoresConnection) UnmarshalBinary(b []byte) error {
	var res GPUNodeDataStoresConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
