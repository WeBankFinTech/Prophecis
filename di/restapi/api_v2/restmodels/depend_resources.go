// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DependResources depend resources
// swagger:model DependResources
type DependResources struct {

	// 参数设置-任务执行设置-高级参数配置-模型用户组
	GroupID string `json:"group_id,omitempty"`

	// 参数设置-任务执行设置-高级参数配置-模型名称
	ModelID string `json:"model_id,omitempty"`

	// 参数设置-任务执行设置-高级参数配置-模型版本
	ModelVersionID string `json:"model_version_id,omitempty"`

	// 参数设置-任务执行设置-高级参数配置-加工线名称
	ProcesslineID string `json:"processline_id,omitempty"`

	// 参数设置-任务执行设置-高级参数配置-加工线版本
	ProcesslineVersionID string `json:"processline_version_id,omitempty"`

	// 参数设置-任务执行设置-高级参数配置-物料类型
	// Enum: [MODEL]
	Type string `json:"type,omitempty"`
}

// Validate validates this depend resources
func (m *DependResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dependResourcesTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MODEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dependResourcesTypeTypePropEnum = append(dependResourcesTypeTypePropEnum, v)
	}
}

const (

	// DependResourcesTypeMODEL captures enum value "MODEL"
	DependResourcesTypeMODEL string = "MODEL"
)

// prop value enum
func (m *DependResources) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dependResourcesTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DependResources) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DependResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DependResources) UnmarshalBinary(b []byte) error {
	var res DependResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
