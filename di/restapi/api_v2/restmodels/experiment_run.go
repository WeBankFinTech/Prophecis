// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentRun experiment run
// swagger:model ExperimentRun
type ExperimentRun struct {

	// 实验执行的提交时间
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// 实验执行的提交者
	CreateUser string `json:"create_user,omitempty"`

	// 实验执行的结束时间
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// 实验执行的状态
	// Enum: [Initializing Running Succeed Failed Cancelled Deleted]
	ExecuteStatus string `json:"execute_status,omitempty"`

	// 实验执行记录关联的实验的ID
	ExpID string `json:"exp_id,omitempty"`

	// 实验执行记录的ID
	ExpRunID string `json:"exp_run_id,omitempty"`

	// 实验执行记录关联的实验的版本名
	ExpVersionName string `json:"exp_version_name,omitempty"`
}

// Validate validates this experiment run
func (m *ExperimentRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentRun) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExperimentRun) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var experimentRunTypeExecuteStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initializing","Running","Succeed","Failed","Cancelled","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		experimentRunTypeExecuteStatusPropEnum = append(experimentRunTypeExecuteStatusPropEnum, v)
	}
}

const (

	// ExperimentRunExecuteStatusInitializing captures enum value "Initializing"
	ExperimentRunExecuteStatusInitializing string = "Initializing"

	// ExperimentRunExecuteStatusRunning captures enum value "Running"
	ExperimentRunExecuteStatusRunning string = "Running"

	// ExperimentRunExecuteStatusSucceed captures enum value "Succeed"
	ExperimentRunExecuteStatusSucceed string = "Succeed"

	// ExperimentRunExecuteStatusFailed captures enum value "Failed"
	ExperimentRunExecuteStatusFailed string = "Failed"

	// ExperimentRunExecuteStatusCancelled captures enum value "Cancelled"
	ExperimentRunExecuteStatusCancelled string = "Cancelled"

	// ExperimentRunExecuteStatusDeleted captures enum value "Deleted"
	ExperimentRunExecuteStatusDeleted string = "Deleted"
)

// prop value enum
func (m *ExperimentRun) validateExecuteStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, experimentRunTypeExecuteStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExperimentRun) validateExecuteStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecuteStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecuteStatusEnum("execute_status", "body", m.ExecuteStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentRun) UnmarshalBinary(b []byte) error {
	var res ExperimentRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
