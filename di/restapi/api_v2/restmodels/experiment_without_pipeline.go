// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentWithoutPipeline 返回获取、修改后、复制后等操作的实验
// swagger:model ExperimentWithoutPipeline
type ExperimentWithoutPipeline struct {

	// 实验的创建时间
	// Format: date-time
	CreateTime strfmt.DateTime `json:"create_time,omitempty"`

	// 实验的创建人
	CreateUser string `json:"create_user,omitempty"`

	// 实验的发布配置信息
	DeploySetting *DeploySetting `json:"deploy_setting,omitempty"`

	// 实验描述
	Description string `json:"description,omitempty"`

	// 如果该实验来自DSS系统，其关联的DSS信息
	DssInfo *DSSInfo `json:"dss_info,omitempty"`

	// 实验所属的项目组ID
	GroupID string `json:"group_id,omitempty"`

	// 实验所属的项目组
	GroupName string `json:"group_name,omitempty"`

	// 实验Id
	ID string `json:"id,omitempty"`

	// 实验最近的执行时间
	LatestExecuteTime string `json:"latest_execute_time,omitempty"`

	// 实验名称
	Name string `json:"name,omitempty"`

	// 实验的来源系统
	// Enum: [MLSS DSS WTSS]
	SourceSystem *string `json:"source_system,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// 实验最后的操作时间
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`

	// 实验最后的操作人
	UpdateUser string `json:"update_user,omitempty"`

	// 实验的版本
	VersionName string `json:"version_name,omitempty"`
}

// Validate validates this experiment without pipeline
func (m *ExperimentWithoutPipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploySetting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDssInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentWithoutPipeline) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExperimentWithoutPipeline) validateDeploySetting(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploySetting) { // not required
		return nil
	}

	if m.DeploySetting != nil {
		if err := m.DeploySetting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploy_setting")
			}
			return err
		}
	}

	return nil
}

func (m *ExperimentWithoutPipeline) validateDssInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.DssInfo) { // not required
		return nil
	}

	if m.DssInfo != nil {
		if err := m.DssInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dss_info")
			}
			return err
		}
	}

	return nil
}

var experimentWithoutPipelineTypeSourceSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MLSS","DSS","WTSS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		experimentWithoutPipelineTypeSourceSystemPropEnum = append(experimentWithoutPipelineTypeSourceSystemPropEnum, v)
	}
}

const (

	// ExperimentWithoutPipelineSourceSystemMLSS captures enum value "MLSS"
	ExperimentWithoutPipelineSourceSystemMLSS string = "MLSS"

	// ExperimentWithoutPipelineSourceSystemDSS captures enum value "DSS"
	ExperimentWithoutPipelineSourceSystemDSS string = "DSS"

	// ExperimentWithoutPipelineSourceSystemWTSS captures enum value "WTSS"
	ExperimentWithoutPipelineSourceSystemWTSS string = "WTSS"
)

// prop value enum
func (m *ExperimentWithoutPipeline) validateSourceSystemEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, experimentWithoutPipelineTypeSourceSystemPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExperimentWithoutPipeline) validateSourceSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceSystemEnum("source_system", "body", *m.SourceSystem); err != nil {
		return err
	}

	return nil
}

func (m *ExperimentWithoutPipeline) validateUpdateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentWithoutPipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentWithoutPipeline) UnmarshalBinary(b []byte) error {
	var res ExperimentWithoutPipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
