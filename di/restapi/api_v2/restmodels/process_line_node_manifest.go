// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessLineNodeManifest process line node manifest
// swagger:model ProcessLineNodeManifest
type ProcessLineNodeManifest struct {

	// 节点的计算资源信息
	ComputeResources map[string]ComputeResource `json:"compute_resources,omitempty"`

	// 节点输入信息
	Input *ProcessLineNodeInput `json:"input,omitempty"`

	// 节点的元数据信息
	MetaData *MetaData `json:"meta_data,omitempty"`

	// 节点的输出信息
	Output *Output `json:"output,omitempty"`

	// 节点的运行环境信息
	RunEnvironment *RunEnvironment `json:"run_environment,omitempty"`
}

// Validate validates this process line node manifest
func (m *ProcessLineNodeManifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessLineNodeManifest) validateComputeResources(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputeResources) { // not required
		return nil
	}

	for k := range m.ComputeResources {

		if err := validate.Required("compute_resources"+"."+k, "body", m.ComputeResources[k]); err != nil {
			return err
		}
		if val, ok := m.ComputeResources[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ProcessLineNodeManifest) validateInput(formats strfmt.Registry) error {

	if swag.IsZero(m.Input) { // not required
		return nil
	}

	if m.Input != nil {
		if err := m.Input.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessLineNodeManifest) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(m.MetaData) { // not required
		return nil
	}

	if m.MetaData != nil {
		if err := m.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta_data")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessLineNodeManifest) validateOutput(formats strfmt.Registry) error {

	if swag.IsZero(m.Output) { // not required
		return nil
	}

	if m.Output != nil {
		if err := m.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

func (m *ProcessLineNodeManifest) validateRunEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.RunEnvironment) { // not required
		return nil
	}

	if m.RunEnvironment != nil {
		if err := m.RunEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run_environment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessLineNodeManifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessLineNodeManifest) UnmarshalBinary(b []byte) error {
	var res ProcessLineNodeManifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
