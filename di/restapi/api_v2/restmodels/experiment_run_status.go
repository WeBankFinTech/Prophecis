// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentRunStatus experiment run status
// swagger:model ExperimentRunStatus
type ExperimentRunStatus struct {

	// 实验执行的状态
	// Enum: [Initializing Running Succeed Failed Cancelled Deleted]
	Status string `json:"status,omitempty"`
}

// Validate validates this experiment run status
func (m *ExperimentRunStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var experimentRunStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initializing","Running","Succeed","Failed","Cancelled","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		experimentRunStatusTypeStatusPropEnum = append(experimentRunStatusTypeStatusPropEnum, v)
	}
}

const (

	// ExperimentRunStatusStatusInitializing captures enum value "Initializing"
	ExperimentRunStatusStatusInitializing string = "Initializing"

	// ExperimentRunStatusStatusRunning captures enum value "Running"
	ExperimentRunStatusStatusRunning string = "Running"

	// ExperimentRunStatusStatusSucceed captures enum value "Succeed"
	ExperimentRunStatusStatusSucceed string = "Succeed"

	// ExperimentRunStatusStatusFailed captures enum value "Failed"
	ExperimentRunStatusStatusFailed string = "Failed"

	// ExperimentRunStatusStatusCancelled captures enum value "Cancelled"
	ExperimentRunStatusStatusCancelled string = "Cancelled"

	// ExperimentRunStatusStatusDeleted captures enum value "Deleted"
	ExperimentRunStatusStatusDeleted string = "Deleted"
)

// prop value enum
func (m *ExperimentRunStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, experimentRunStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExperimentRunStatus) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentRunStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentRunStatus) UnmarshalBinary(b []byte) error {
	var res ExperimentRunStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
