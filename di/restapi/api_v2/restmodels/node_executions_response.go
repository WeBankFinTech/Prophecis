// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodeExecutionsResponse node executions response
// swagger:model NodeExecutionsResponse
type NodeExecutionsResponse struct {

	// failed nodes
	FailedNodes []*NodeExecutionInfo `json:"failed_nodes"`

	// pending nodes
	PendingNodes []*NodeExecutionInfo `json:"pending_nodes"`

	// running nodes
	RunningNodes []*NodeExecutionInfo `json:"running_nodes"`

	// skipped nodes
	SkippedNodes []*NodeExecutionInfo `json:"skipped_nodes"`

	// succeed nodes
	SucceedNodes []*NodeExecutionInfo `json:"succeed_nodes"`
}

// Validate validates this node executions response
func (m *NodeExecutionsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailedNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkippedNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSucceedNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeExecutionsResponse) validateFailedNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.FailedNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.FailedNodes); i++ {
		if swag.IsZero(m.FailedNodes[i]) { // not required
			continue
		}

		if m.FailedNodes[i] != nil {
			if err := m.FailedNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("failed_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeExecutionsResponse) validatePendingNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.PendingNodes); i++ {
		if swag.IsZero(m.PendingNodes[i]) { // not required
			continue
		}

		if m.PendingNodes[i] != nil {
			if err := m.PendingNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pending_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeExecutionsResponse) validateRunningNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.RunningNodes); i++ {
		if swag.IsZero(m.RunningNodes[i]) { // not required
			continue
		}

		if m.RunningNodes[i] != nil {
			if err := m.RunningNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("running_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeExecutionsResponse) validateSkippedNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.SkippedNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.SkippedNodes); i++ {
		if swag.IsZero(m.SkippedNodes[i]) { // not required
			continue
		}

		if m.SkippedNodes[i] != nil {
			if err := m.SkippedNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skipped_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeExecutionsResponse) validateSucceedNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.SucceedNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.SucceedNodes); i++ {
		if swag.IsZero(m.SucceedNodes[i]) { // not required
			continue
		}

		if m.SucceedNodes[i] != nil {
			if err := m.SucceedNodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("succeed_nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeExecutionsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeExecutionsResponse) UnmarshalBinary(b []byte) error {
	var res NodeExecutionsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
