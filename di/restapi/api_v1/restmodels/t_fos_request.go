// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TFosRequest t fos request
// swagger:model TFosRequest
type TFosRequest struct {

	// Archives Fields.
	Archives []*Fields `json:"Archives"`

	// Experiment Description.
	Command string `json:"Command,omitempty"`

	// Queue Setting Driver Memory.
	DriverMemory string `json:"DriverMemory,omitempty"`

	// EntryPoint Fields.
	EntryPoint *Fields `json:"EntryPoint,omitempty"`

	// Queue Setting Executor Cores.
	ExecutorCores string `json:"ExecutorCores,omitempty"`

	// Queue Setting Executor Memory.
	ExecutorMemory string `json:"ExecutorMemory,omitempty"`

	// Queue Setting Executor Number.
	Executors string `json:"Executors,omitempty"`

	// Queue Setting.
	Queue string `json:"Queue,omitempty"`

	// Tensorflow Env Files.
	TensorflowEnv *Fields `json:"TensorflowEnv,omitempty"`

	// PyFiles Fields.
	PyFile []*Fields `json:"py_file"`
}

// Validate validates this t fos request
func (m *TFosRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTensorflowEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePyFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TFosRequest) validateArchives(formats strfmt.Registry) error {

	if swag.IsZero(m.Archives) { // not required
		return nil
	}

	for i := 0; i < len(m.Archives); i++ {
		if swag.IsZero(m.Archives[i]) { // not required
			continue
		}

		if m.Archives[i] != nil {
			if err := m.Archives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Archives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TFosRequest) validateEntryPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryPoint) { // not required
		return nil
	}

	if m.EntryPoint != nil {
		if err := m.EntryPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EntryPoint")
			}
			return err
		}
	}

	return nil
}

func (m *TFosRequest) validateTensorflowEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.TensorflowEnv) { // not required
		return nil
	}

	if m.TensorflowEnv != nil {
		if err := m.TensorflowEnv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TensorflowEnv")
			}
			return err
		}
	}

	return nil
}

func (m *TFosRequest) validatePyFile(formats strfmt.Registry) error {

	if swag.IsZero(m.PyFile) { // not required
		return nil
	}

	for i := 0; i < len(m.PyFile); i++ {
		if swag.IsZero(m.PyFile[i]) { // not required
			continue
		}

		if m.PyFile[i] != nil {
			if err := m.PyFile[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("py_file" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TFosRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TFosRequest) UnmarshalBinary(b []byte) error {
	var res TFosRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
