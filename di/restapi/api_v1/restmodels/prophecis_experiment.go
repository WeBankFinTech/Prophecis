// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProphecisExperiment prophecis experiment
// swagger:model ProphecisExperiment
type ProphecisExperiment struct {

	// Create Type.
	CreateType string `json:"create_type,omitempty"`

	// user entity
	CreateUser *User `json:"create_user,omitempty"`

	// DSS Flow BML Version
	DssBmlLastVersion string `json:"dss_bml_last_version,omitempty"`

	// DSS DSS Flow Name
	DssDssFlowName string `json:"dss_dss_flow_name,omitempty"`

	// DSS DSS Flow Project Version Id
	DssDssFlowProjectVersionID string `json:"dss_dss_flow_project_version_id,omitempty"`

	// DSS DSS Flow Version
	DssDssFlowVersion string `json:"dss_dss_flow_version,omitempty"`

	// DSS DSS Project Id
	DssDssProjectID int64 `json:"dss_dss_project_id,omitempty"`

	// DSS DSS Project Name
	DssDssProjectName string `json:"dss_dss_project_name,omitempty"`

	// DSS Flow ID.
	DssFlowID int64 `json:"dss_flow_id,omitempty"`

	// DSS Project ID.
	DssProjectID int64 `json:"dss_project_id,omitempty"`

	// DSS Project Version.
	DssProjectVersionID int64 `json:"dss_project_version_id,omitempty"`

	// DSS Workspace ID.
	DssWorkspaceID int64 `json:"dss_workspace_id,omitempty"`

	// Flag of Delete.
	EnableFlag string `json:"enable_flag,omitempty"`

	// Timestamp of experiment create.
	// Format: date-time
	ExpCreateTime strfmt.DateTime `json:"exp_create_time,omitempty"`

	// User of experiment creator.
	ExpCreateUserID int64 `json:"exp_create_user_id,omitempty"`

	// Experiment Description.
	// Required: true
	ExpDesc *string `json:"exp_desc"`

	// Timestamp of experiment modify.
	// Format: date-time
	ExpModifyTime strfmt.DateTime `json:"exp_modify_time,omitempty"`

	// User of last experiment modifier.
	ExpModifyUserID int64 `json:"exp_modify_user_id,omitempty"`

	// Experiment Name.
	// Required: true
	ExpName *string `json:"exp_name"`

	// Experiment Name.
	GroupName string `json:"group_name,omitempty"`

	// Experiment id.
	ID int64 `json:"id,omitempty"`

	// MLFlow Experiment ID.
	MlflowExpID string `json:"mlflow_exp_id,omitempty"`

	// user entity
	ModifyUser *User `json:"modify_user,omitempty"`

	// tag list
	TagList []*ProphecisExperimentTag `json:"tag_list"`
}

// Validate validates this prophecis experiment
func (m *ProphecisExperiment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpModifyTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProphecisExperiment) validateCreateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateUser) { // not required
		return nil
	}

	if m.CreateUser != nil {
		if err := m.CreateUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("create_user")
			}
			return err
		}
	}

	return nil
}

func (m *ProphecisExperiment) validateExpCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpCreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("exp_create_time", "body", "date-time", m.ExpCreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperiment) validateExpDesc(formats strfmt.Registry) error {

	if err := validate.Required("exp_desc", "body", m.ExpDesc); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperiment) validateExpModifyTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpModifyTime) { // not required
		return nil
	}

	if err := validate.FormatOf("exp_modify_time", "body", "date-time", m.ExpModifyTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperiment) validateExpName(formats strfmt.Registry) error {

	if err := validate.Required("exp_name", "body", m.ExpName); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperiment) validateModifyUser(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifyUser) { // not required
		return nil
	}

	if m.ModifyUser != nil {
		if err := m.ModifyUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modify_user")
			}
			return err
		}
	}

	return nil
}

func (m *ProphecisExperiment) validateTagList(formats strfmt.Registry) error {

	if swag.IsZero(m.TagList) { // not required
		return nil
	}

	for i := 0; i < len(m.TagList); i++ {
		if swag.IsZero(m.TagList[i]) { // not required
			continue
		}

		if m.TagList[i] != nil {
			if err := m.TagList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProphecisExperiment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProphecisExperiment) UnmarshalBinary(b []byte) error {
	var res ProphecisExperiment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
