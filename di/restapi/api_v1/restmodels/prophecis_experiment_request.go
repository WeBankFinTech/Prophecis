// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProphecisExperimentRequest prophecis experiment request
// swagger:model ProphecisExperimentRequest
type ProphecisExperimentRequest struct {

	// experiment type, default "MLFlow", choose next value, "WTSS" "DSS" "MLFlow"
	CreateType *string `json:"create_type,omitempty"`

	// dss info
	DssInfo *DSSInfo `json:"dss_info,omitempty"`

	// Experiment Description.
	// Required: true
	ExpDesc *string `json:"exp_desc"`

	// Experiment id.
	ExpID int64 `json:"exp_id,omitempty"`

	// Experiment Name.
	// Required: true
	ExpName *string `json:"exp_name"`

	// Group Name.
	GroupName string `json:"group_name,omitempty"`

	// Experiment Tags
	TagList []*ProphecisExperimentTagPutBasicInfo `json:"tag_list"`
}

// Validate validates this prophecis experiment request
func (m *ProphecisExperimentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDssInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProphecisExperimentRequest) validateDssInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.DssInfo) { // not required
		return nil
	}

	if m.DssInfo != nil {
		if err := m.DssInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dss_info")
			}
			return err
		}
	}

	return nil
}

func (m *ProphecisExperimentRequest) validateExpDesc(formats strfmt.Registry) error {

	if err := validate.Required("exp_desc", "body", m.ExpDesc); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperimentRequest) validateExpName(formats strfmt.Registry) error {

	if err := validate.Required("exp_name", "body", m.ExpName); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperimentRequest) validateTagList(formats strfmt.Registry) error {

	if swag.IsZero(m.TagList) { // not required
		return nil
	}

	for i := 0; i < len(m.TagList); i++ {
		if swag.IsZero(m.TagList[i]) { // not required
			continue
		}

		if m.TagList[i] != nil {
			if err := m.TagList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProphecisExperimentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProphecisExperimentRequest) UnmarshalBinary(b []byte) error {
	var res ProphecisExperimentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
