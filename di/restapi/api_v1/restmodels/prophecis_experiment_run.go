// Code generated by go-swagger; DO NOT EDIT.

package restmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProphecisExperimentRun prophecis experiment run
// swagger:model ProphecisExperimentRun
type ProphecisExperimentRun struct {

	// linkis flow exec id.
	DssExecID string `json:"dss_exec_id,omitempty"`

	// DSS Flow ID.
	DssFlowID int64 `json:"dss_flow_id,omitempty"`

	// DSS Flow Version ID.
	DssFlowLastVersionID int64 `json:"dss_flow_last_version_id,omitempty"`

	// Flag of Delete.
	EnableFlag string `json:"enable_flag,omitempty"`

	// Experiment Exec Type, include RUNNING/SCHEDULED/FINISHED/FAILED/KILLED.
	ExpExecStatus string `json:"exp_exec_status,omitempty"`

	// Experiment Exec Type, include CLI/UI/DSS/Schedulis.
	// Required: true
	ExpExecType *string `json:"exp_exec_type"`

	// Experiment ID.
	// Required: true
	ExpID *int64 `json:"exp_id"`

	// Created Timestamp of Experiment Exec.
	// Format: date-time
	ExpRunCreateTime strfmt.DateTime `json:"exp_run_create_time,omitempty"`

	// User of experiment exec.
	ExpRunCreateUserID int64 `json:"exp_run_create_user_id,omitempty"`

	// Timestamp of Experiment finished.
	// Format: date-time
	ExpRunEndTime strfmt.DateTime `json:"exp_run_end_time,omitempty"`

	// User of modify experiment exec.
	ExpRunModifyUserID int64 `json:"exp_run_modify_user_id,omitempty"`

	// experiment entity.
	Experiment *ProphecisExperiment `json:"experiment,omitempty"`

	// Experiment Exec ID.
	ID float64 `json:"id,omitempty"`

	// user entity
	User *User `json:"user,omitempty"`
}

// Validate validates this prophecis experiment run
func (m *ProphecisExperimentRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpExecType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpRunCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpRunEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExperiment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProphecisExperimentRun) validateExpExecType(formats strfmt.Registry) error {

	if err := validate.Required("exp_exec_type", "body", m.ExpExecType); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperimentRun) validateExpID(formats strfmt.Registry) error {

	if err := validate.Required("exp_id", "body", m.ExpID); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperimentRun) validateExpRunCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpRunCreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("exp_run_create_time", "body", "date-time", m.ExpRunCreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperimentRun) validateExpRunEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpRunEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("exp_run_end_time", "body", "date-time", m.ExpRunEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProphecisExperimentRun) validateExperiment(formats strfmt.Registry) error {

	if swag.IsZero(m.Experiment) { // not required
		return nil
	}

	if m.Experiment != nil {
		if err := m.Experiment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("experiment")
			}
			return err
		}
	}

	return nil
}

func (m *ProphecisExperimentRun) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProphecisExperimentRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProphecisExperimentRun) UnmarshalBinary(b []byte) error {
	var res ProphecisExperimentRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
