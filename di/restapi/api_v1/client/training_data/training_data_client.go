// Code generated by go-swagger; DO NOT EDIT.

package training_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new training data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for training data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}
//
///*
//GetEMetrics gets evaluation metrics records based on query
//*/
//func (a *Client) GetEMetrics(params *GetEMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEMetricsOK, error) {
//	// TODO: Validate the params before sending
//	if params == nil {
//		params = NewGetEMetricsParams()
//	}
//
//	result, err := a.transport.Submit(&runtime.ClientOperation{
//		ID:                 "getEMetrics",
//		Method:             "GET",
//		PathPattern:        "/di/v1/logs/{model_id}/emetrics",
//		ProducesMediaTypes: []string{"application/json"},
//		ConsumesMediaTypes: []string{"application/json"},
//		Schemes:            []string{"https"},
//		Params:             params,
//		Reader:             &GetEMetricsReader{formats: a.formats},
//		AuthInfo:           authInfo,
//		Context:            params.Context,
//		Client:             params.HTTPClient,
//	})
//	if err != nil {
//		return nil, err
//	}
//	return result.(*GetEMetricsOK), nil
//
//}

/*
GetLoglines gets loglines based on query
*/
func (a *Client) GetLoglines(params *GetLoglinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoglinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoglinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoglines",
		Method:             "GET",
		PathPattern:        "/di/v1/logs/{model_id}/loglines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoglinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoglinesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
