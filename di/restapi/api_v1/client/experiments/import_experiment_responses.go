// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ImportExperimentReader is a Reader for the ImportExperiment structure.
type ImportExperimentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportExperimentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportExperimentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewImportExperimentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportExperimentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewImportExperimentOK creates a ImportExperimentOK with default headers values
func NewImportExperimentOK() *ImportExperimentOK {
	return &ImportExperimentOK{}
}

/*ImportExperimentOK handles this case with default header values.

OK
*/
type ImportExperimentOK struct {
	Payload *restmodels.ProphecisExperimentIDResponse
}

func (o *ImportExperimentOK) Error() string {
	return fmt.Sprintf("[POST /di/v1/experiment/import][%d] importExperimentOK  %+v", 200, o.Payload)
}

func (o *ImportExperimentOK) GetPayload() *restmodels.ProphecisExperimentIDResponse {
	return o.Payload
}

func (o *ImportExperimentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.ProphecisExperimentIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportExperimentUnauthorized creates a ImportExperimentUnauthorized with default headers values
func NewImportExperimentUnauthorized() *ImportExperimentUnauthorized {
	return &ImportExperimentUnauthorized{}
}

/*ImportExperimentUnauthorized handles this case with default header values.

Unauthorized
*/
type ImportExperimentUnauthorized struct {
	Payload *restmodels.Error
}

func (o *ImportExperimentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /di/v1/experiment/import][%d] importExperimentUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportExperimentUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ImportExperimentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportExperimentNotFound creates a ImportExperimentNotFound with default headers values
func NewImportExperimentNotFound() *ImportExperimentNotFound {
	return &ImportExperimentNotFound{}
}

/*ImportExperimentNotFound handles this case with default header values.

The Models cannot be found
*/
type ImportExperimentNotFound struct {
	Payload *restmodels.Error
}

func (o *ImportExperimentNotFound) Error() string {
	return fmt.Sprintf("[POST /di/v1/experiment/import][%d] importExperimentNotFound  %+v", 404, o.Payload)
}

func (o *ImportExperimentNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ImportExperimentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
