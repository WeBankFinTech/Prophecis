// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ExportExperimentDssReader is a Reader for the ExportExperimentDss structure.
type ExportExperimentDssReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportExperimentDssReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportExperimentDssOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportExperimentDssUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportExperimentDssNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExportExperimentDssOK creates a ExportExperimentDssOK with default headers values
func NewExportExperimentDssOK() *ExportExperimentDssOK {
	return &ExportExperimentDssOK{}
}

/*ExportExperimentDssOK handles this case with default header values.

Export Experiment(Dss) Response definition
*/
type ExportExperimentDssOK struct {
	Payload *restmodels.ProphecisExportExperimentDssResponse
}

func (o *ExportExperimentDssOK) Error() string {
	return fmt.Sprintf("[GET /di/v1/experiment/{id}/exportdss][%d] exportExperimentDssOK  %+v", 200, o.Payload)
}

func (o *ExportExperimentDssOK) GetPayload() *restmodels.ProphecisExportExperimentDssResponse {
	return o.Payload
}

func (o *ExportExperimentDssOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.ProphecisExportExperimentDssResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportExperimentDssUnauthorized creates a ExportExperimentDssUnauthorized with default headers values
func NewExportExperimentDssUnauthorized() *ExportExperimentDssUnauthorized {
	return &ExportExperimentDssUnauthorized{}
}

/*ExportExperimentDssUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportExperimentDssUnauthorized struct {
	Payload *restmodels.Error
}

func (o *ExportExperimentDssUnauthorized) Error() string {
	return fmt.Sprintf("[GET /di/v1/experiment/{id}/exportdss][%d] exportExperimentDssUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportExperimentDssUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ExportExperimentDssUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportExperimentDssNotFound creates a ExportExperimentDssNotFound with default headers values
func NewExportExperimentDssNotFound() *ExportExperimentDssNotFound {
	return &ExportExperimentDssNotFound{}
}

/*ExportExperimentDssNotFound handles this case with default header values.

The Experiment cannot be found
*/
type ExportExperimentDssNotFound struct {
	Payload *restmodels.Error
}

func (o *ExportExperimentDssNotFound) Error() string {
	return fmt.Sprintf("[GET /di/v1/experiment/{id}/exportdss][%d] exportExperimentDssNotFound  %+v", 404, o.Payload)
}

func (o *ExportExperimentDssNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ExportExperimentDssNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
