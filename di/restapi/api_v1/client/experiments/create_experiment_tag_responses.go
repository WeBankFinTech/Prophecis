// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// CreateExperimentTagReader is a Reader for the CreateExperimentTag structure.
type CreateExperimentTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateExperimentTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateExperimentTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateExperimentTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateExperimentTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateExperimentTagOK creates a CreateExperimentTagOK with default headers values
func NewCreateExperimentTagOK() *CreateExperimentTagOK {
	return &CreateExperimentTagOK{}
}

/*CreateExperimentTagOK handles this case with default header values.

OK
*/
type CreateExperimentTagOK struct {
	Payload *restmodels.ProphecisExperimentTag
}

func (o *CreateExperimentTagOK) Error() string {
	return fmt.Sprintf("[POST /di/v1/experimentTag][%d] createExperimentTagOK  %+v", 200, o.Payload)
}

func (o *CreateExperimentTagOK) GetPayload() *restmodels.ProphecisExperimentTag {
	return o.Payload
}

func (o *CreateExperimentTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.ProphecisExperimentTag)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExperimentTagUnauthorized creates a CreateExperimentTagUnauthorized with default headers values
func NewCreateExperimentTagUnauthorized() *CreateExperimentTagUnauthorized {
	return &CreateExperimentTagUnauthorized{}
}

/*CreateExperimentTagUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateExperimentTagUnauthorized struct {
	Payload *restmodels.Error
}

func (o *CreateExperimentTagUnauthorized) Error() string {
	return fmt.Sprintf("[POST /di/v1/experimentTag][%d] createExperimentTagUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateExperimentTagUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *CreateExperimentTagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateExperimentTagNotFound creates a CreateExperimentTagNotFound with default headers values
func NewCreateExperimentTagNotFound() *CreateExperimentTagNotFound {
	return &CreateExperimentTagNotFound{}
}

/*CreateExperimentTagNotFound handles this case with default header values.

The Models cannot be found
*/
type CreateExperimentTagNotFound struct {
	Payload *restmodels.Error
}

func (o *CreateExperimentTagNotFound) Error() string {
	return fmt.Sprintf("[POST /di/v1/experimentTag][%d] createExperimentTagNotFound  %+v", 404, o.Payload)
}

func (o *CreateExperimentTagNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *CreateExperimentTagNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
