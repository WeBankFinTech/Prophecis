// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportExperimentParams creates a new ImportExperimentParams object
// with the default values initialized.
func NewImportExperimentParams() *ImportExperimentParams {
	var ()
	return &ImportExperimentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportExperimentParamsWithTimeout creates a new ImportExperimentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportExperimentParamsWithTimeout(timeout time.Duration) *ImportExperimentParams {
	var ()
	return &ImportExperimentParams{

		timeout: timeout,
	}
}

// NewImportExperimentParamsWithContext creates a new ImportExperimentParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportExperimentParamsWithContext(ctx context.Context) *ImportExperimentParams {
	var ()
	return &ImportExperimentParams{

		Context: ctx,
	}
}

// NewImportExperimentParamsWithHTTPClient creates a new ImportExperimentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportExperimentParamsWithHTTPClient(client *http.Client) *ImportExperimentParams {
	var ()
	return &ImportExperimentParams{
		HTTPClient: client,
	}
}

/*ImportExperimentParams contains all the parameters to send to the API endpoint
for the import experiment operation typically these are written to a http.Request
*/
type ImportExperimentParams struct {

	/*File*/
	File runtime.NamedReadCloser
	/*FileName*/
	FileName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import experiment params
func (o *ImportExperimentParams) WithTimeout(timeout time.Duration) *ImportExperimentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import experiment params
func (o *ImportExperimentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import experiment params
func (o *ImportExperimentParams) WithContext(ctx context.Context) *ImportExperimentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import experiment params
func (o *ImportExperimentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import experiment params
func (o *ImportExperimentParams) WithHTTPClient(client *http.Client) *ImportExperimentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import experiment params
func (o *ImportExperimentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the import experiment params
func (o *ImportExperimentParams) WithFile(file runtime.NamedReadCloser) *ImportExperimentParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the import experiment params
func (o *ImportExperimentParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithFileName adds the fileName to the import experiment params
func (o *ImportExperimentParams) WithFileName(fileName *string) *ImportExperimentParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the import experiment params
func (o *ImportExperimentParams) SetFileName(fileName *string) {
	o.FileName = fileName
}

// WriteToRequest writes these params to a swagger request
func (o *ImportExperimentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.FileName != nil {

		// form param fileName
		var frFileName string
		if o.FileName != nil {
			frFileName = *o.FileName
		}
		fFileName := frFileName
		if fFileName != "" {
			if err := r.SetFormParam("fileName", fFileName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
