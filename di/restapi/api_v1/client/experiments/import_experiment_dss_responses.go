// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ImportExperimentDssReader is a Reader for the ImportExperimentDss structure.
type ImportExperimentDssReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportExperimentDssReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportExperimentDssOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewImportExperimentDssUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportExperimentDssNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewImportExperimentDssOK creates a ImportExperimentDssOK with default headers values
func NewImportExperimentDssOK() *ImportExperimentDssOK {
	return &ImportExperimentDssOK{}
}

/*ImportExperimentDssOK handles this case with default header values.

Import Experiment(Dss) Response definition
*/
type ImportExperimentDssOK struct {
	Payload *restmodels.ProphecisImportExperimentDssResponse
}

func (o *ImportExperimentDssOK) Error() string {
	return fmt.Sprintf("[POST /di/v1/experiment/importdss][%d] importExperimentDssOK  %+v", 200, o.Payload)
}

func (o *ImportExperimentDssOK) GetPayload() *restmodels.ProphecisImportExperimentDssResponse {
	return o.Payload
}

func (o *ImportExperimentDssOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.ProphecisImportExperimentDssResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportExperimentDssUnauthorized creates a ImportExperimentDssUnauthorized with default headers values
func NewImportExperimentDssUnauthorized() *ImportExperimentDssUnauthorized {
	return &ImportExperimentDssUnauthorized{}
}

/*ImportExperimentDssUnauthorized handles this case with default header values.

Unauthorized
*/
type ImportExperimentDssUnauthorized struct {
	Payload *restmodels.Error
}

func (o *ImportExperimentDssUnauthorized) Error() string {
	return fmt.Sprintf("[POST /di/v1/experiment/importdss][%d] importExperimentDssUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportExperimentDssUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ImportExperimentDssUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportExperimentDssNotFound creates a ImportExperimentDssNotFound with default headers values
func NewImportExperimentDssNotFound() *ImportExperimentDssNotFound {
	return &ImportExperimentDssNotFound{}
}

/*ImportExperimentDssNotFound handles this case with default header values.

The Experiment cannot be found
*/
type ImportExperimentDssNotFound struct {
	Payload *restmodels.Error
}

func (o *ImportExperimentDssNotFound) Error() string {
	return fmt.Sprintf("[POST /di/v1/experiment/importdss][%d] importExperimentDssNotFound  %+v", 404, o.Payload)
}

func (o *ImportExperimentDssNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ImportExperimentDssNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
