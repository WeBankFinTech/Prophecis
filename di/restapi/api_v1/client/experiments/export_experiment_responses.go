// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ExportExperimentReader is a Reader for the ExportExperiment structure.
type ExportExperimentReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *ExportExperimentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportExperimentOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportExperimentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportExperimentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExportExperimentOK creates a ExportExperimentOK with default headers values
func NewExportExperimentOK(writer io.Writer) *ExportExperimentOK {
	return &ExportExperimentOK{
		Payload: writer,
	}
}

/*ExportExperimentOK handles this case with default header values.

Model definition
*/
type ExportExperimentOK struct {
	Payload io.Writer
}

func (o *ExportExperimentOK) Error() string {
	return fmt.Sprintf("[GET /di/v1/experiment/{id}/export][%d] exportExperimentOK  %+v", 200, o.Payload)
}

func (o *ExportExperimentOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *ExportExperimentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportExperimentUnauthorized creates a ExportExperimentUnauthorized with default headers values
func NewExportExperimentUnauthorized() *ExportExperimentUnauthorized {
	return &ExportExperimentUnauthorized{}
}

/*ExportExperimentUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportExperimentUnauthorized struct {
	Payload *restmodels.Error
}

func (o *ExportExperimentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /di/v1/experiment/{id}/export][%d] exportExperimentUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportExperimentUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ExportExperimentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportExperimentNotFound creates a ExportExperimentNotFound with default headers values
func NewExportExperimentNotFound() *ExportExperimentNotFound {
	return &ExportExperimentNotFound{}
}

/*ExportExperimentNotFound handles this case with default header values.

The Experiment cannot be found
*/
type ExportExperimentNotFound struct {
	Payload *restmodels.Error
}

func (o *ExportExperimentNotFound) Error() string {
	return fmt.Sprintf("[GET /di/v1/experiment/{id}/export][%d] exportExperimentNotFound  %+v", 404, o.Payload)
}

func (o *ExportExperimentNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ExportExperimentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
