// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// GetExperimentRunExecutionReader is a Reader for the GetExperimentRunExecution structure.
type GetExperimentRunExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExperimentRunExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExperimentRunExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetExperimentRunExecutionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExperimentRunExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExperimentRunExecutionOK creates a GetExperimentRunExecutionOK with default headers values
func NewGetExperimentRunExecutionOK() *GetExperimentRunExecutionOK {
	return &GetExperimentRunExecutionOK{}
}

/*GetExperimentRunExecutionOK handles this case with default header values.

OK
*/
type GetExperimentRunExecutionOK struct {
}

func (o *GetExperimentRunExecutionOK) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRun/{exec_id}/execution][%d] getExperimentRunExecutionOK ", 200)
}

func (o *GetExperimentRunExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetExperimentRunExecutionUnauthorized creates a GetExperimentRunExecutionUnauthorized with default headers values
func NewGetExperimentRunExecutionUnauthorized() *GetExperimentRunExecutionUnauthorized {
	return &GetExperimentRunExecutionUnauthorized{}
}

/*GetExperimentRunExecutionUnauthorized handles this case with default header values.

Unauthorized
*/
type GetExperimentRunExecutionUnauthorized struct {
	Payload *restmodels.Error
}

func (o *GetExperimentRunExecutionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRun/{exec_id}/execution][%d] getExperimentRunExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExperimentRunExecutionUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *GetExperimentRunExecutionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExperimentRunExecutionNotFound creates a GetExperimentRunExecutionNotFound with default headers values
func NewGetExperimentRunExecutionNotFound() *GetExperimentRunExecutionNotFound {
	return &GetExperimentRunExecutionNotFound{}
}

/*GetExperimentRunExecutionNotFound handles this case with default header values.

Model create failed
*/
type GetExperimentRunExecutionNotFound struct {
	Payload *restmodels.Error
}

func (o *GetExperimentRunExecutionNotFound) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRun/{exec_id}/execution][%d] getExperimentRunExecutionNotFound  %+v", 404, o.Payload)
}

func (o *GetExperimentRunExecutionNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *GetExperimentRunExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
