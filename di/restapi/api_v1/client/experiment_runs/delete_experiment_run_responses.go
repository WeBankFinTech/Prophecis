// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// DeleteExperimentRunReader is a Reader for the DeleteExperimentRun structure.
type DeleteExperimentRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteExperimentRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteExperimentRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteExperimentRunUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteExperimentRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteExperimentRunOK creates a DeleteExperimentRunOK with default headers values
func NewDeleteExperimentRunOK() *DeleteExperimentRunOK {
	return &DeleteExperimentRunOK{}
}

/*DeleteExperimentRunOK handles this case with default header values.

OK
*/
type DeleteExperimentRunOK struct {
	Payload *restmodels.BasicModel
}

func (o *DeleteExperimentRunOK) Error() string {
	return fmt.Sprintf("[DELETE /di/v1/experimentRun/{id}][%d] deleteExperimentRunOK  %+v", 200, o.Payload)
}

func (o *DeleteExperimentRunOK) GetPayload() *restmodels.BasicModel {
	return o.Payload
}

func (o *DeleteExperimentRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.BasicModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExperimentRunUnauthorized creates a DeleteExperimentRunUnauthorized with default headers values
func NewDeleteExperimentRunUnauthorized() *DeleteExperimentRunUnauthorized {
	return &DeleteExperimentRunUnauthorized{}
}

/*DeleteExperimentRunUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteExperimentRunUnauthorized struct {
	Payload *restmodels.Error
}

func (o *DeleteExperimentRunUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /di/v1/experimentRun/{id}][%d] deleteExperimentRunUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteExperimentRunUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *DeleteExperimentRunUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExperimentRunNotFound creates a DeleteExperimentRunNotFound with default headers values
func NewDeleteExperimentRunNotFound() *DeleteExperimentRunNotFound {
	return &DeleteExperimentRunNotFound{}
}

/*DeleteExperimentRunNotFound handles this case with default header values.

The Models cannot be found
*/
type DeleteExperimentRunNotFound struct {
	Payload *restmodels.Error
}

func (o *DeleteExperimentRunNotFound) Error() string {
	return fmt.Sprintf("[DELETE /di/v1/experimentRun/{id}][%d] deleteExperimentRunNotFound  %+v", 404, o.Payload)
}

func (o *DeleteExperimentRunNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *DeleteExperimentRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
