// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new experiment runs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for experiment runs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateExperimentRun runs an experiment flow by experiment Id

Run an Experiment Flow By Experiment Id.
*/
func (a *Client) CreateExperimentRun(params *CreateExperimentRunParams, authInfo runtime.ClientAuthInfoWriter) (*CreateExperimentRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExperimentRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createExperimentRun",
		Method:             "POST",
		PathPattern:        "/di/v1/experimentRun/{exp_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateExperimentRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExperimentRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createExperimentRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExperimentRun stops and delete experiment exec record by experiment Id

Stop And Delete Experiment Exec Record By Experiment Id.
*/
func (a *Client) DeleteExperimentRun(params *DeleteExperimentRunParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteExperimentRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExperimentRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExperimentRun",
		Method:             "DELETE",
		PathPattern:        "/di/v1/experimentRun/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExperimentRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExperimentRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExperimentRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperimentRun gets an experiment flow exec record by experiment Id and flow exec ID

Get an Experiment Flow Exec Record By Experiment Id & Flow_Exec_ID.
*/
func (a *Client) GetExperimentRun(params *GetExperimentRunParams, authInfo runtime.ClientAuthInfoWriter) (*GetExperimentRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExperimentRun",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRun/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExperimentRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExperimentRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperimentRunExecution linkis execution method

Get Flow Execution Msg From /api/entrance/${exec_id}/execution
*/
func (a *Client) GetExperimentRunExecution(params *GetExperimentRunExecutionParams, authInfo runtime.ClientAuthInfoWriter) (*GetExperimentRunExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentRunExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExperimentRunExecution",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRun/{exec_id}/execution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExperimentRunExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentRunExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExperimentRunExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperimentRunLog gets experiment exec log by exec Id

Get Experiment Exec Log By Exec Id.
*/
func (a *Client) GetExperimentRunLog(params *GetExperimentRunLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetExperimentRunLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentRunLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExperimentRunLog",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRun/{id}/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExperimentRunLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentRunLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExperimentRunLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperimentRunStatus gets experiment run status by Id

Get ExperimentRun Status By Id.
*/
func (a *Client) GetExperimentRunStatus(params *GetExperimentRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetExperimentRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExperimentRunStatus",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRun/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExperimentRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentRunStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExperimentRunStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperimentRunsHistory experiments run history

Get Experiment's ExperimentRun History
*/
func (a *Client) GetExperimentRunsHistory(params *GetExperimentRunsHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetExperimentRunsHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentRunsHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExperimentRunsHistory",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRunsHistory/{exp_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExperimentRunsHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentRunsHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExperimentRunsHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
KillExperimentRun kills experiment run by exec Id

Kill Experiment Run By Exec Id.
*/
func (a *Client) KillExperimentRun(params *KillExperimentRunParams, authInfo runtime.ClientAuthInfoWriter) (*KillExperimentRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKillExperimentRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "killExperimentRun",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRun/{id}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KillExperimentRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KillExperimentRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for killExperimentRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExperimentRuns lists experiment runs

List ExperimentRuns.
*/
func (a *Client) ListExperimentRuns(params *ListExperimentRunsParams, authInfo runtime.ClientAuthInfoWriter) (*ListExperimentRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExperimentRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listExperimentRuns",
		Method:             "GET",
		PathPattern:        "/di/v1/experimentRuns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListExperimentRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExperimentRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExperimentRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
