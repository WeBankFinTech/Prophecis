// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ListExperimentRunsReader is a Reader for the ListExperimentRuns structure.
type ListExperimentRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListExperimentRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListExperimentRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListExperimentRunsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListExperimentRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListExperimentRunsOK creates a ListExperimentRunsOK with default headers values
func NewListExperimentRunsOK() *ListExperimentRunsOK {
	return &ListExperimentRunsOK{}
}

/*ListExperimentRunsOK handles this case with default header values.

OK
*/
type ListExperimentRunsOK struct {
	Payload *restmodels.ProphecisExperimentRuns
}

func (o *ListExperimentRunsOK) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRuns][%d] listExperimentRunsOK  %+v", 200, o.Payload)
}

func (o *ListExperimentRunsOK) GetPayload() *restmodels.ProphecisExperimentRuns {
	return o.Payload
}

func (o *ListExperimentRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.ProphecisExperimentRuns)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListExperimentRunsUnauthorized creates a ListExperimentRunsUnauthorized with default headers values
func NewListExperimentRunsUnauthorized() *ListExperimentRunsUnauthorized {
	return &ListExperimentRunsUnauthorized{}
}

/*ListExperimentRunsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListExperimentRunsUnauthorized struct {
	Payload *restmodels.Error
}

func (o *ListExperimentRunsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRuns][%d] listExperimentRunsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListExperimentRunsUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ListExperimentRunsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListExperimentRunsNotFound creates a ListExperimentRunsNotFound with default headers values
func NewListExperimentRunsNotFound() *ListExperimentRunsNotFound {
	return &ListExperimentRunsNotFound{}
}

/*ListExperimentRunsNotFound handles this case with default header values.

The Models cannot be found
*/
type ListExperimentRunsNotFound struct {
	Payload *restmodels.Error
}

func (o *ListExperimentRunsNotFound) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRuns][%d] listExperimentRunsNotFound  %+v", 404, o.Payload)
}

func (o *ListExperimentRunsNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *ListExperimentRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
