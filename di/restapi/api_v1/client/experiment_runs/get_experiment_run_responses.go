// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// GetExperimentRunReader is a Reader for the GetExperimentRun structure.
type GetExperimentRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExperimentRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExperimentRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetExperimentRunUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetExperimentRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExperimentRunOK creates a GetExperimentRunOK with default headers values
func NewGetExperimentRunOK() *GetExperimentRunOK {
	return &GetExperimentRunOK{}
}

/*GetExperimentRunOK handles this case with default header values.

OK
*/
type GetExperimentRunOK struct {
	Payload *restmodels.ProphecisExperimentRunsGetResponse
}

func (o *GetExperimentRunOK) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRun/{id}][%d] getExperimentRunOK  %+v", 200, o.Payload)
}

func (o *GetExperimentRunOK) GetPayload() *restmodels.ProphecisExperimentRunsGetResponse {
	return o.Payload
}

func (o *GetExperimentRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.ProphecisExperimentRunsGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExperimentRunUnauthorized creates a GetExperimentRunUnauthorized with default headers values
func NewGetExperimentRunUnauthorized() *GetExperimentRunUnauthorized {
	return &GetExperimentRunUnauthorized{}
}

/*GetExperimentRunUnauthorized handles this case with default header values.

Unauthorized
*/
type GetExperimentRunUnauthorized struct {
	Payload *restmodels.Error
}

func (o *GetExperimentRunUnauthorized) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRun/{id}][%d] getExperimentRunUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExperimentRunUnauthorized) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *GetExperimentRunUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExperimentRunNotFound creates a GetExperimentRunNotFound with default headers values
func NewGetExperimentRunNotFound() *GetExperimentRunNotFound {
	return &GetExperimentRunNotFound{}
}

/*GetExperimentRunNotFound handles this case with default header values.

The Models cannot be found
*/
type GetExperimentRunNotFound struct {
	Payload *restmodels.Error
}

func (o *GetExperimentRunNotFound) Error() string {
	return fmt.Sprintf("[GET /di/v1/experimentRun/{id}][%d] getExperimentRunNotFound  %+v", 404, o.Payload)
}

func (o *GetExperimentRunNotFound) GetPayload() *restmodels.Error {
	return o.Payload
}

func (o *GetExperimentRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(restmodels.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
