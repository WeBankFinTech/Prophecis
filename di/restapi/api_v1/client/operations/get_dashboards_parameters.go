// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDashboardsParams creates a new GetDashboardsParams object
// with the default values initialized.
func NewGetDashboardsParams() *GetDashboardsParams {
	var (
		clusterNameDefault = string("")
	)
	return &GetDashboardsParams{
		ClusterName: &clusterNameDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDashboardsParamsWithTimeout creates a new GetDashboardsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDashboardsParamsWithTimeout(timeout time.Duration) *GetDashboardsParams {
	var (
		clusterNameDefault = string("")
	)
	return &GetDashboardsParams{
		ClusterName: &clusterNameDefault,

		timeout: timeout,
	}
}

// NewGetDashboardsParamsWithContext creates a new GetDashboardsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDashboardsParamsWithContext(ctx context.Context) *GetDashboardsParams {
	var (
		clusterNameDefault = string("")
	)
	return &GetDashboardsParams{
		ClusterName: &clusterNameDefault,

		Context: ctx,
	}
}

// NewGetDashboardsParamsWithHTTPClient creates a new GetDashboardsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDashboardsParamsWithHTTPClient(client *http.Client) *GetDashboardsParams {
	var (
		clusterNameDefault = string("")
	)
	return &GetDashboardsParams{
		ClusterName: &clusterNameDefault,
		HTTPClient:  client,
	}
}

/*GetDashboardsParams contains all the parameters to send to the API endpoint
for the get dashboards operation typically these are written to a http.Request
*/
type GetDashboardsParams struct {

	/*ClusterName
	  entity clusterName

	*/
	ClusterName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get dashboards params
func (o *GetDashboardsParams) WithTimeout(timeout time.Duration) *GetDashboardsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dashboards params
func (o *GetDashboardsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dashboards params
func (o *GetDashboardsParams) WithContext(ctx context.Context) *GetDashboardsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dashboards params
func (o *GetDashboardsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dashboards params
func (o *GetDashboardsParams) WithHTTPClient(client *http.Client) *GetDashboardsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dashboards params
func (o *GetDashboardsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterName adds the clusterName to the get dashboards params
func (o *GetDashboardsParams) WithClusterName(clusterName *string) *GetDashboardsParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the get dashboards params
func (o *GetDashboardsParams) SetClusterName(clusterName *string) {
	o.ClusterName = clusterName
}

// WriteToRequest writes these params to a swagger request
func (o *GetDashboardsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterName != nil {

		// query param clusterName
		var qrClusterName string
		if o.ClusterName != nil {
			qrClusterName = *o.ClusterName
		}
		qClusterName := qrClusterName
		if qClusterName != "" {
			if err := r.SetQueryParam("clusterName", qClusterName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
