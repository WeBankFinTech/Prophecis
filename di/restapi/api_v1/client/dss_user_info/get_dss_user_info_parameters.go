// Code generated by go-swagger; DO NOT EDIT.

package dss_user_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDssUserInfoParams creates a new GetDssUserInfoParams object
// with the default values initialized.
func NewGetDssUserInfoParams() *GetDssUserInfoParams {
	var ()
	return &GetDssUserInfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDssUserInfoParamsWithTimeout creates a new GetDssUserInfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDssUserInfoParamsWithTimeout(timeout time.Duration) *GetDssUserInfoParams {
	var ()
	return &GetDssUserInfoParams{

		timeout: timeout,
	}
}

// NewGetDssUserInfoParamsWithContext creates a new GetDssUserInfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDssUserInfoParamsWithContext(ctx context.Context) *GetDssUserInfoParams {
	var ()
	return &GetDssUserInfoParams{

		Context: ctx,
	}
}

// NewGetDssUserInfoParamsWithHTTPClient creates a new GetDssUserInfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDssUserInfoParamsWithHTTPClient(client *http.Client) *GetDssUserInfoParams {
	var ()
	return &GetDssUserInfoParams{
		HTTPClient: client,
	}
}

/*GetDssUserInfoParams contains all the parameters to send to the API endpoint
for the get dss user info operation typically these are written to a http.Request
*/
type GetDssUserInfoParams struct {

	/*ID*/
	ID string
	/*WorkspaceID*/
	WorkspaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get dss user info params
func (o *GetDssUserInfoParams) WithTimeout(timeout time.Duration) *GetDssUserInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dss user info params
func (o *GetDssUserInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dss user info params
func (o *GetDssUserInfoParams) WithContext(ctx context.Context) *GetDssUserInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dss user info params
func (o *GetDssUserInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dss user info params
func (o *GetDssUserInfoParams) WithHTTPClient(client *http.Client) *GetDssUserInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dss user info params
func (o *GetDssUserInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get dss user info params
func (o *GetDssUserInfoParams) WithID(id string) *GetDssUserInfoParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get dss user info params
func (o *GetDssUserInfoParams) SetID(id string) {
	o.ID = id
}

// WithWorkspaceID adds the workspaceID to the get dss user info params
func (o *GetDssUserInfoParams) WithWorkspaceID(workspaceID string) *GetDssUserInfoParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the get dss user info params
func (o *GetDssUserInfoParams) SetWorkspaceID(workspaceID string) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDssUserInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {
		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	// query param workspaceId
	qrWorkspaceID := o.WorkspaceID
	qWorkspaceID := qrWorkspaceID
	if qWorkspaceID != "" {
		if err := r.SetQueryParam("workspaceId", qWorkspaceID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
