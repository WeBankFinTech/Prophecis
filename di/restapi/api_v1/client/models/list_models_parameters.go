// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListModelsParams creates a new ListModelsParams object
// with the default values initialized.
func NewListModelsParams() *ListModelsParams {
	var (
		clusterNameDefault = string("")
		expIDDefault       = string("")
		expRunIDDefault    = string("")
		namespaceDefault   = string("")
		pageDefault        = string("1")
		sizeDefault        = string("10")
		useridDefault      = string("")
		versionDefault     = string("2017-02-13")
	)
	return &ListModelsParams{
		ClusterName: &clusterNameDefault,
		ExpID:       &expIDDefault,
		ExpRunID:    &expRunIDDefault,
		Namespace:   &namespaceDefault,
		Page:        &pageDefault,
		Size:        &sizeDefault,
		Userid:      &useridDefault,
		Version:     &versionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListModelsParamsWithTimeout creates a new ListModelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListModelsParamsWithTimeout(timeout time.Duration) *ListModelsParams {
	var (
		clusterNameDefault = string("")
		expIDDefault       = string("")
		expRunIDDefault    = string("")
		namespaceDefault   = string("")
		pageDefault        = string("1")
		sizeDefault        = string("10")
		useridDefault      = string("")
		versionDefault     = string("2017-02-13")
	)
	return &ListModelsParams{
		ClusterName: &clusterNameDefault,
		ExpID:       &expIDDefault,
		ExpRunID:    &expRunIDDefault,
		Namespace:   &namespaceDefault,
		Page:        &pageDefault,
		Size:        &sizeDefault,
		Userid:      &useridDefault,
		Version:     &versionDefault,

		timeout: timeout,
	}
}

// NewListModelsParamsWithContext creates a new ListModelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListModelsParamsWithContext(ctx context.Context) *ListModelsParams {
	var (
		clusterNameDefault = string("")
		expIdDefault       = string("")
		expRunIdDefault    = string("")
		namespaceDefault   = string("")
		pageDefault        = string("1")
		sizeDefault        = string("10")
		useridDefault      = string("")
		versionDefault     = string("2017-02-13")
	)
	return &ListModelsParams{
		ClusterName: &clusterNameDefault,
		ExpID:       &expIdDefault,
		ExpRunID:    &expRunIdDefault,
		Namespace:   &namespaceDefault,
		Page:        &pageDefault,
		Size:        &sizeDefault,
		Userid:      &useridDefault,
		Version:     &versionDefault,

		Context: ctx,
	}
}

// NewListModelsParamsWithHTTPClient creates a new ListModelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListModelsParamsWithHTTPClient(client *http.Client) *ListModelsParams {
	var (
		clusterNameDefault = string("")
		expIdDefault       = string("")
		expRunIdDefault    = string("")
		namespaceDefault   = string("")
		pageDefault        = string("1")
		sizeDefault        = string("10")
		useridDefault      = string("")
		versionDefault     = string("2017-02-13")
	)
	return &ListModelsParams{
		ClusterName: &clusterNameDefault,
		ExpID:       &expIdDefault,
		ExpRunID:    &expRunIdDefault,
		Namespace:   &namespaceDefault,
		Page:        &pageDefault,
		Size:        &sizeDefault,
		Userid:      &useridDefault,
		Version:     &versionDefault,
		HTTPClient:  client,
	}
}

/*ListModelsParams contains all the parameters to send to the API endpoint
for the list models operation typically these are written to a http.Request
*/
type ListModelsParams struct {

	/*ClusterName
	  entity clusterName

	*/
	ClusterName *string
	/*ExpID
	  experiment's id.

	*/
	ExpID *string
	/*ExpRunID
	  experiment run's id.

	*/
	ExpRunID *string
	/*Namespace
	  job's namespace.

	*/
	Namespace *string
	/*Page
	  page number.

	*/
	Page *string
	/*Size
	  entity number per page.

	*/
	Size *string
	/*Userid
	  owner's userid.

	*/
	Userid *string
	/*Version
	  The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list models params
func (o *ListModelsParams) WithTimeout(timeout time.Duration) *ListModelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list models params
func (o *ListModelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list models params
func (o *ListModelsParams) WithContext(ctx context.Context) *ListModelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list models params
func (o *ListModelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list models params
func (o *ListModelsParams) WithHTTPClient(client *http.Client) *ListModelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list models params
func (o *ListModelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterName adds the clusterName to the list models params
func (o *ListModelsParams) WithClusterName(clusterName *string) *ListModelsParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the list models params
func (o *ListModelsParams) SetClusterName(clusterName *string) {
	o.ClusterName = clusterName
}

// WithExpID adds the expID to the list models params
func (o *ListModelsParams) WithExpID(expID *string) *ListModelsParams {
	o.SetExpID(expID)
	return o
}

// SetExpID adds the expId to the list models params
func (o *ListModelsParams) SetExpID(expID *string) {
	o.ExpID = expID
}

// WithExpRunID adds the expRunID to the list models params
func (o *ListModelsParams) WithExpRunID(expRunID *string) *ListModelsParams {
	o.SetExpRunID(expRunID)
	return o
}

// SetExpRunID adds the expRunId to the list models params
func (o *ListModelsParams) SetExpRunID(expRunID *string) {
	o.ExpRunID = expRunID
}

// WithNamespace adds the namespace to the list models params
func (o *ListModelsParams) WithNamespace(namespace *string) *ListModelsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list models params
func (o *ListModelsParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithPage adds the page to the list models params
func (o *ListModelsParams) WithPage(page *string) *ListModelsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list models params
func (o *ListModelsParams) SetPage(page *string) {
	o.Page = page
}

// WithSize adds the size to the list models params
func (o *ListModelsParams) WithSize(size *string) *ListModelsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the list models params
func (o *ListModelsParams) SetSize(size *string) {
	o.Size = size
}

// WithUserid adds the userid to the list models params
func (o *ListModelsParams) WithUserid(userid *string) *ListModelsParams {
	o.SetUserid(userid)
	return o
}

// SetUserid adds the userid to the list models params
func (o *ListModelsParams) SetUserid(userid *string) {
	o.Userid = userid
}

// WithVersion adds the version to the list models params
func (o *ListModelsParams) WithVersion(version *string) *ListModelsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the list models params
func (o *ListModelsParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *ListModelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterName != nil {

		// query param clusterName
		var qrClusterName string
		if o.ClusterName != nil {
			qrClusterName = *o.ClusterName
		}
		qClusterName := qrClusterName
		if qClusterName != "" {
			if err := r.SetQueryParam("clusterName", qClusterName); err != nil {
				return err
			}
		}

	}

	if o.ExpID != nil {

		// query param exp_id
		var qrExpID string
		if o.ExpID != nil {
			qrExpID = *o.ExpID
		}
		qExpID := qrExpID
		if qExpID != "" {
			if err := r.SetQueryParam("exp_id", qExpID); err != nil {
				return err
			}
		}

	}

	if o.ExpRunID != nil {

		// query param exp_run_id
		var qrExpRunID string
		if o.ExpRunID != nil {
			qrExpRunID = *o.ExpRunID
		}
		qExpRunID := qrExpRunID
		if qExpRunID != "" {
			if err := r.SetQueryParam("exp_run_id", qExpRunID); err != nil {
				return err
			}
		}

	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize string
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := qrSize
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if o.Userid != nil {

		// query param userid
		var qrUserid string
		if o.Userid != nil {
			qrUserid = *o.Userid
		}
		qUserid := qrUserid
		if qUserid != "" {
			if err := r.SetQueryParam("userid", qUserid); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
