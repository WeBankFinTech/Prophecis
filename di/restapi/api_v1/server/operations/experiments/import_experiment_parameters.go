// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportExperimentParams creates a new ImportExperimentParams object
// with the default values initialized.
func NewImportExperimentParams() ImportExperimentParams {

	var (
		// initialize parameters with default values

		createTypeDefault   = string("MLFlow")
		experimentIDDefault = int64(0)
	)

	return ImportExperimentParams{
		CreateType: &createTypeDefault,

		ExperimentID: &experimentIDDefault,
	}
}

// ImportExperimentParams contains all the bound params for the import experiment operation
// typically these are obtained from a http.Request
//
// swagger:parameters importExperiment
type ImportExperimentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*experiment type, default "MLFlow", choose next value, "WTSS" "DSS" "MLFlow"
	  In: formData
	  Default: "MLFlow"
	*/
	CreateType *string
	/*if experimentId is 0 or not provided, create experiment in db; if exists, get experiment by experimentId, update it.
	  In: formData
	  Default: 0
	*/
	ExperimentID *int64
	/*
	  Required: true
	  In: formData
	*/
	File io.ReadCloser
	/*
	  In: formData
	*/
	FileName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewImportExperimentParams() beforehand.
func (o *ImportExperimentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdCreateType, fdhkCreateType, _ := fds.GetOK("createType")
	if err := o.bindCreateType(fdCreateType, fdhkCreateType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdExperimentID, fdhkExperimentID, _ := fds.GetOK("experimentId")
	if err := o.bindExperimentID(fdExperimentID, fdhkExperimentID, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err := o.bindFile(file, fileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	fdFileName, fdhkFileName, _ := fds.GetOK("fileName")
	if err := o.bindFileName(fdFileName, fdhkFileName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCreateType binds and validates parameter CreateType from formData.
func (o *ImportExperimentParams) bindCreateType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImportExperimentParams()
		return nil
	}

	o.CreateType = &raw

	return nil
}

// bindExperimentID binds and validates parameter ExperimentID from formData.
func (o *ImportExperimentParams) bindExperimentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImportExperimentParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("experimentId", "formData", "int64", raw)
	}
	o.ExperimentID = &value

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *ImportExperimentParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindFileName binds and validates parameter FileName from formData.
func (o *ImportExperimentParams) bindFileName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.FileName = &raw

	return nil
}
