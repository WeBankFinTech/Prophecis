// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ImportExperimentDssOKCode is the HTTP code returned for type ImportExperimentDssOK
const ImportExperimentDssOKCode int = 200

/*ImportExperimentDssOK Import Experiment(Dss) Response definition

swagger:response importExperimentDssOK
*/
type ImportExperimentDssOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.ProphecisImportExperimentDssResponse `json:"body,omitempty"`
}

// NewImportExperimentDssOK creates ImportExperimentDssOK with default headers values
func NewImportExperimentDssOK() *ImportExperimentDssOK {

	return &ImportExperimentDssOK{}
}

// WithPayload adds the payload to the import experiment dss o k response
func (o *ImportExperimentDssOK) WithPayload(payload *restmodels.ProphecisImportExperimentDssResponse) *ImportExperimentDssOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import experiment dss o k response
func (o *ImportExperimentDssOK) SetPayload(payload *restmodels.ProphecisImportExperimentDssResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportExperimentDssOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportExperimentDssUnauthorizedCode is the HTTP code returned for type ImportExperimentDssUnauthorized
const ImportExperimentDssUnauthorizedCode int = 401

/*ImportExperimentDssUnauthorized Unauthorized

swagger:response importExperimentDssUnauthorized
*/
type ImportExperimentDssUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewImportExperimentDssUnauthorized creates ImportExperimentDssUnauthorized with default headers values
func NewImportExperimentDssUnauthorized() *ImportExperimentDssUnauthorized {

	return &ImportExperimentDssUnauthorized{}
}

// WithPayload adds the payload to the import experiment dss unauthorized response
func (o *ImportExperimentDssUnauthorized) WithPayload(payload *restmodels.Error) *ImportExperimentDssUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import experiment dss unauthorized response
func (o *ImportExperimentDssUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportExperimentDssUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportExperimentDssNotFoundCode is the HTTP code returned for type ImportExperimentDssNotFound
const ImportExperimentDssNotFoundCode int = 404

/*ImportExperimentDssNotFound The Experiment cannot be found

swagger:response importExperimentDssNotFound
*/
type ImportExperimentDssNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewImportExperimentDssNotFound creates ImportExperimentDssNotFound with default headers values
func NewImportExperimentDssNotFound() *ImportExperimentDssNotFound {

	return &ImportExperimentDssNotFound{}
}

// WithPayload adds the payload to the import experiment dss not found response
func (o *ImportExperimentDssNotFound) WithPayload(payload *restmodels.Error) *ImportExperimentDssNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import experiment dss not found response
func (o *ImportExperimentDssNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportExperimentDssNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
