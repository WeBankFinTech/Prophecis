// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ExportExperimentDssHandlerFunc turns a function with the right signature into a export experiment dss handler
type ExportExperimentDssHandlerFunc func(ExportExperimentDssParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ExportExperimentDssHandlerFunc) Handle(params ExportExperimentDssParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ExportExperimentDssHandler interface for that can handle valid export experiment dss params
type ExportExperimentDssHandler interface {
	Handle(ExportExperimentDssParams, interface{}) middleware.Responder
}

// NewExportExperimentDss creates a new http.Handler for the export experiment dss operation
func NewExportExperimentDss(ctx *middleware.Context, handler ExportExperimentDssHandler) *ExportExperimentDss {
	return &ExportExperimentDss{Context: ctx, Handler: handler}
}

/*ExportExperimentDss swagger:route GET /di/v1/experiment/{id}/exportdss Experiments exportExperimentDss

Export Expriments(DSS)

export Experiment(DSS)

*/
type ExportExperimentDss struct {
	Context *middleware.Context
	Handler ExportExperimentDssHandler
}

func (o *ExportExperimentDss) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewExportExperimentDssParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
