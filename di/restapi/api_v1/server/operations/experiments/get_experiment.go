// Code generated by go-swagger; DO NOT EDIT.

package experiments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetExperimentHandlerFunc turns a function with the right signature into a get experiment handler
type GetExperimentHandlerFunc func(GetExperimentParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetExperimentHandlerFunc) Handle(params GetExperimentParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetExperimentHandler interface for that can handle valid get experiment params
type GetExperimentHandler interface {
	Handle(GetExperimentParams, interface{}) middleware.Responder
}

// NewGetExperiment creates a new http.Handler for the get experiment operation
func NewGetExperiment(ctx *middleware.Context, handler GetExperimentHandler) *GetExperiment {
	return &GetExperiment{Context: ctx, Handler: handler}
}

/*GetExperiment swagger:route GET /di/v1/experiment/{id} Experiments getExperiment

Get Experiment

Get Experiment By Experiment Id.

*/
type GetExperiment struct {
	Context *middleware.Context
	Handler GetExperimentHandler
}

func (o *GetExperiment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetExperimentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
