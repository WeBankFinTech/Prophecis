// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// CreateExperimentRunOKCode is the HTTP code returned for type CreateExperimentRunOK
const CreateExperimentRunOKCode int = 200

/*CreateExperimentRunOK OK

swagger:response createExperimentRunOK
*/
type CreateExperimentRunOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.ProphecisExperimentRun `json:"body,omitempty"`
}

// NewCreateExperimentRunOK creates CreateExperimentRunOK with default headers values
func NewCreateExperimentRunOK() *CreateExperimentRunOK {

	return &CreateExperimentRunOK{}
}

// WithPayload adds the payload to the create experiment run o k response
func (o *CreateExperimentRunOK) WithPayload(payload *restmodels.ProphecisExperimentRun) *CreateExperimentRunOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create experiment run o k response
func (o *CreateExperimentRunOK) SetPayload(payload *restmodels.ProphecisExperimentRun) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateExperimentRunOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateExperimentRunUnauthorizedCode is the HTTP code returned for type CreateExperimentRunUnauthorized
const CreateExperimentRunUnauthorizedCode int = 401

/*CreateExperimentRunUnauthorized Unauthorized

swagger:response createExperimentRunUnauthorized
*/
type CreateExperimentRunUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewCreateExperimentRunUnauthorized creates CreateExperimentRunUnauthorized with default headers values
func NewCreateExperimentRunUnauthorized() *CreateExperimentRunUnauthorized {

	return &CreateExperimentRunUnauthorized{}
}

// WithPayload adds the payload to the create experiment run unauthorized response
func (o *CreateExperimentRunUnauthorized) WithPayload(payload *restmodels.Error) *CreateExperimentRunUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create experiment run unauthorized response
func (o *CreateExperimentRunUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateExperimentRunUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateExperimentRunNotFoundCode is the HTTP code returned for type CreateExperimentRunNotFound
const CreateExperimentRunNotFoundCode int = 404

/*CreateExperimentRunNotFound The Models cannot be found

swagger:response createExperimentRunNotFound
*/
type CreateExperimentRunNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewCreateExperimentRunNotFound creates CreateExperimentRunNotFound with default headers values
func NewCreateExperimentRunNotFound() *CreateExperimentRunNotFound {

	return &CreateExperimentRunNotFound{}
}

// WithPayload adds the payload to the create experiment run not found response
func (o *CreateExperimentRunNotFound) WithPayload(payload *restmodels.Error) *CreateExperimentRunNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create experiment run not found response
func (o *CreateExperimentRunNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateExperimentRunNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
