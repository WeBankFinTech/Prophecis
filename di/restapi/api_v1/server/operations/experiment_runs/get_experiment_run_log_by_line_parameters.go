// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetExperimentRunLogByLineParams creates a new GetExperimentRunLogByLineParams object
// no default values defined in spec.
func NewGetExperimentRunLogByLineParams() GetExperimentRunLogByLineParams {

	return GetExperimentRunLogByLineParams{}
}

// GetExperimentRunLogByLineParams contains all the bound params for the get experiment run log by line operation
// typically these are obtained from a http.Request
//
// swagger:parameters getExperimentRunLogByLine
type GetExperimentRunLogByLineParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*log end line
	  Required: true
	  In: query
	*/
	EndLine int64
	/*
	  Required: true
	  In: path
	*/
	ID int64
	/*log start line
	  Required: true
	  In: query
	*/
	StartLine int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetExperimentRunLogByLineParams() beforehand.
func (o *GetExperimentRunLogByLineParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndLine, qhkEndLine, _ := qs.GetOK("end_line")
	if err := o.bindEndLine(qEndLine, qhkEndLine, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartLine, qhkStartLine, _ := qs.GetOK("start_line")
	if err := o.bindStartLine(qStartLine, qhkStartLine, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndLine binds and validates parameter EndLine from query.
func (o *GetExperimentRunLogByLineParams) bindEndLine(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("end_line", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("end_line", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("end_line", "query", "int64", raw)
	}
	o.EndLine = value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *GetExperimentRunLogByLineParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindStartLine binds and validates parameter StartLine from query.
func (o *GetExperimentRunLogByLineParams) bindStartLine(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("start_line", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("start_line", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("start_line", "query", "int64", raw)
	}
	o.StartLine = value

	return nil
}
