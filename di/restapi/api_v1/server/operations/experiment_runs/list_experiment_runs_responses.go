// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// ListExperimentRunsOKCode is the HTTP code returned for type ListExperimentRunsOK
const ListExperimentRunsOKCode int = 200

/*ListExperimentRunsOK OK

swagger:response listExperimentRunsOK
*/
type ListExperimentRunsOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.ProphecisExperimentRuns `json:"body,omitempty"`
}

// NewListExperimentRunsOK creates ListExperimentRunsOK with default headers values
func NewListExperimentRunsOK() *ListExperimentRunsOK {

	return &ListExperimentRunsOK{}
}

// WithPayload adds the payload to the list experiment runs o k response
func (o *ListExperimentRunsOK) WithPayload(payload *restmodels.ProphecisExperimentRuns) *ListExperimentRunsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list experiment runs o k response
func (o *ListExperimentRunsOK) SetPayload(payload *restmodels.ProphecisExperimentRuns) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExperimentRunsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListExperimentRunsUnauthorizedCode is the HTTP code returned for type ListExperimentRunsUnauthorized
const ListExperimentRunsUnauthorizedCode int = 401

/*ListExperimentRunsUnauthorized Unauthorized

swagger:response listExperimentRunsUnauthorized
*/
type ListExperimentRunsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewListExperimentRunsUnauthorized creates ListExperimentRunsUnauthorized with default headers values
func NewListExperimentRunsUnauthorized() *ListExperimentRunsUnauthorized {

	return &ListExperimentRunsUnauthorized{}
}

// WithPayload adds the payload to the list experiment runs unauthorized response
func (o *ListExperimentRunsUnauthorized) WithPayload(payload *restmodels.Error) *ListExperimentRunsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list experiment runs unauthorized response
func (o *ListExperimentRunsUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExperimentRunsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListExperimentRunsNotFoundCode is the HTTP code returned for type ListExperimentRunsNotFound
const ListExperimentRunsNotFoundCode int = 404

/*ListExperimentRunsNotFound The Models cannot be found

swagger:response listExperimentRunsNotFound
*/
type ListExperimentRunsNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewListExperimentRunsNotFound creates ListExperimentRunsNotFound with default headers values
func NewListExperimentRunsNotFound() *ListExperimentRunsNotFound {

	return &ListExperimentRunsNotFound{}
}

// WithPayload adds the payload to the list experiment runs not found response
func (o *ListExperimentRunsNotFound) WithPayload(payload *restmodels.Error) *ListExperimentRunsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list experiment runs not found response
func (o *ListExperimentRunsNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListExperimentRunsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
