// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	restmodels "webank/DI/restapi/api_v1/restmodels"
)

// DeleteExperimentRunOKCode is the HTTP code returned for type DeleteExperimentRunOK
const DeleteExperimentRunOKCode int = 200

/*DeleteExperimentRunOK OK

swagger:response deleteExperimentRunOK
*/
type DeleteExperimentRunOK struct {

	/*
	  In: Body
	*/
	Payload *restmodels.BasicModel `json:"body,omitempty"`
}

// NewDeleteExperimentRunOK creates DeleteExperimentRunOK with default headers values
func NewDeleteExperimentRunOK() *DeleteExperimentRunOK {

	return &DeleteExperimentRunOK{}
}

// WithPayload adds the payload to the delete experiment run o k response
func (o *DeleteExperimentRunOK) WithPayload(payload *restmodels.BasicModel) *DeleteExperimentRunOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete experiment run o k response
func (o *DeleteExperimentRunOK) SetPayload(payload *restmodels.BasicModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteExperimentRunOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteExperimentRunUnauthorizedCode is the HTTP code returned for type DeleteExperimentRunUnauthorized
const DeleteExperimentRunUnauthorizedCode int = 401

/*DeleteExperimentRunUnauthorized Unauthorized

swagger:response deleteExperimentRunUnauthorized
*/
type DeleteExperimentRunUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewDeleteExperimentRunUnauthorized creates DeleteExperimentRunUnauthorized with default headers values
func NewDeleteExperimentRunUnauthorized() *DeleteExperimentRunUnauthorized {

	return &DeleteExperimentRunUnauthorized{}
}

// WithPayload adds the payload to the delete experiment run unauthorized response
func (o *DeleteExperimentRunUnauthorized) WithPayload(payload *restmodels.Error) *DeleteExperimentRunUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete experiment run unauthorized response
func (o *DeleteExperimentRunUnauthorized) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteExperimentRunUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteExperimentRunNotFoundCode is the HTTP code returned for type DeleteExperimentRunNotFound
const DeleteExperimentRunNotFoundCode int = 404

/*DeleteExperimentRunNotFound The Models cannot be found

swagger:response deleteExperimentRunNotFound
*/
type DeleteExperimentRunNotFound struct {

	/*
	  In: Body
	*/
	Payload *restmodels.Error `json:"body,omitempty"`
}

// NewDeleteExperimentRunNotFound creates DeleteExperimentRunNotFound with default headers values
func NewDeleteExperimentRunNotFound() *DeleteExperimentRunNotFound {

	return &DeleteExperimentRunNotFound{}
}

// WithPayload adds the payload to the delete experiment run not found response
func (o *DeleteExperimentRunNotFound) WithPayload(payload *restmodels.Error) *DeleteExperimentRunNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete experiment run not found response
func (o *DeleteExperimentRunNotFound) SetPayload(payload *restmodels.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteExperimentRunNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
