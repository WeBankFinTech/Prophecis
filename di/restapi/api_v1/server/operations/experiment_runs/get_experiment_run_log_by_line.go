// Code generated by go-swagger; DO NOT EDIT.

package experiment_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetExperimentRunLogByLineHandlerFunc turns a function with the right signature into a get experiment run log by line handler
type GetExperimentRunLogByLineHandlerFunc func(GetExperimentRunLogByLineParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetExperimentRunLogByLineHandlerFunc) Handle(params GetExperimentRunLogByLineParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetExperimentRunLogByLineHandler interface for that can handle valid get experiment run log by line params
type GetExperimentRunLogByLineHandler interface {
	Handle(GetExperimentRunLogByLineParams, interface{}) middleware.Responder
}

// NewGetExperimentRunLogByLine creates a new http.Handler for the get experiment run log by line operation
func NewGetExperimentRunLogByLine(ctx *middleware.Context, handler GetExperimentRunLogByLineHandler) *GetExperimentRunLogByLine {
	return &GetExperimentRunLogByLine{Context: ctx, Handler: handler}
}

/*GetExperimentRunLogByLine swagger:route GET /di/v1/experimentRun/log/{id} ExperimentRuns getExperimentRunLogByLine

Get Experiment Exec Log By Exec Id And Line.

Get Experiment Exec Log By Exec Id And Line.

*/
type GetExperimentRunLogByLine struct {
	Context *middleware.Context
	Handler GetExperimentRunLogByLineHandler
}

func (o *GetExperimentRunLogByLine) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetExperimentRunLogByLineParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
