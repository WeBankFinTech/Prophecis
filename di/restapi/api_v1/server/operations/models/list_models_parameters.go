// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListModelsParams creates a new ListModelsParams object
// with the default values initialized.
func NewListModelsParams() ListModelsParams {

	var (
		// initialize parameters with default values

		clusterNameDefault = string("")
		expIDDefault       = string("")
		expRunIDDefault    = string("")
		namespaceDefault   = string("")
		pageDefault        = string("1")
		sizeDefault        = string("10")
		useridDefault      = string("")
		versionDefault     = string("2017-02-13")
	)

	return ListModelsParams{
		ClusterName: &clusterNameDefault,

		ExpID: &expIDDefault,

		ExpRunID: &expRunIDDefault,

		Namespace: &namespaceDefault,

		Page: &pageDefault,

		Size: &sizeDefault,

		Userid: &useridDefault,

		Version: &versionDefault,
	}
}

// ListModelsParams contains all the bound params for the list models operation
// typically these are obtained from a http.Request
//
// swagger:parameters listModels
type ListModelsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*entity clusterName
	  In: query
	  Default: ""
	*/
	ClusterName *string
	/*experiment's id.
	  In: query
	  Default: ""
	*/
	ExpID *string
	/*experiment run's id.
	  In: query
	  Default: ""
	*/
	ExpRunID *string
	/*job's namespace.
	  In: query
	  Default: ""
	*/
	Namespace *string
	/*page number.
	  In: query
	  Default: "1"
	*/
	Page *string
	/*entity number per page.
	  In: query
	  Default: "10"
	*/
	Size *string
	/*owner's userid.
	  In: query
	  Default: ""
	*/
	Userid *string
	/*The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.
	  In: query
	  Default: "2017-02-13"
	*/
	Version *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListModelsParams() beforehand.
func (o *ListModelsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClusterName, qhkClusterName, _ := qs.GetOK("clusterName")
	if err := o.bindClusterName(qClusterName, qhkClusterName, route.Formats); err != nil {
		res = append(res, err)
	}

	qExpID, qhkExpID, _ := qs.GetOK("exp_id")
	if err := o.bindExpID(qExpID, qhkExpID, route.Formats); err != nil {
		res = append(res, err)
	}

	qExpRunID, qhkExpRunID, _ := qs.GetOK("exp_run_id")
	if err := o.bindExpRunID(qExpRunID, qhkExpRunID, route.Formats); err != nil {
		res = append(res, err)
	}

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSize, qhkSize, _ := qs.GetOK("size")
	if err := o.bindSize(qSize, qhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserid, qhkUserid, _ := qs.GetOK("userid")
	if err := o.bindUserid(qUserid, qhkUserid, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClusterName binds and validates parameter ClusterName from query.
func (o *ListModelsParams) bindClusterName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.ClusterName = &raw

	return nil
}

// bindExpID binds and validates parameter ExpID from query.
func (o *ListModelsParams) bindExpID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.ExpID = &raw

	return nil
}

// bindExpRunID binds and validates parameter ExpRunID from query.
func (o *ListModelsParams) bindExpRunID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.ExpRunID = &raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *ListModelsParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.Namespace = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *ListModelsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.Page = &raw

	return nil
}

// bindSize binds and validates parameter Size from query.
func (o *ListModelsParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.Size = &raw

	return nil
}

// bindUserid binds and validates parameter Userid from query.
func (o *ListModelsParams) bindUserid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.Userid = &raw

	return nil
}

// bindVersion binds and validates parameter Version from query.
func (o *ListModelsParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListModelsParams()
		return nil
	}

	o.Version = &raw

	return nil
}
