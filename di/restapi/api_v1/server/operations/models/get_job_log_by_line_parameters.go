// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetJobLogByLineParams creates a new GetJobLogByLineParams object
// no default values defined in spec.
func NewGetJobLogByLineParams() GetJobLogByLineParams {

	return GetJobLogByLineParams{}
}

// GetJobLogByLineParams contains all the bound params for the get job log by line operation
// typically these are obtained from a http.Request
//
// swagger:parameters getJobLogByLine
type GetJobLogByLineParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*log end line
	  Required: true
	  In: query
	*/
	From int64
	/*log start line
	  Required: true
	  In: query
	*/
	Size int64
	/*
	  Required: true
	  In: path
	*/
	TrainingID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetJobLogByLineParams() beforehand.
func (o *GetJobLogByLineParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFrom, qhkFrom, _ := qs.GetOK("from")
	if err := o.bindFrom(qFrom, qhkFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qSize, qhkSize, _ := qs.GetOK("size")
	if err := o.bindSize(qSize, qhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	rTrainingID, rhkTrainingID, _ := route.Params.GetOK("training_id")
	if err := o.bindTrainingID(rTrainingID, rhkTrainingID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFrom binds and validates parameter From from query.
func (o *GetJobLogByLineParams) bindFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("from", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("from", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("from", "query", "int64", raw)
	}
	o.From = value

	return nil
}

// bindSize binds and validates parameter Size from query.
func (o *GetJobLogByLineParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("size", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("size", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("size", "query", "int64", raw)
	}
	o.Size = value

	return nil
}

// bindTrainingID binds and validates parameter TrainingID from path.
func (o *GetJobLogByLineParams) bindTrainingID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.TrainingID = raw

	return nil
}
