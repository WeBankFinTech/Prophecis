// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// KillTrainingModelHandlerFunc turns a function with the right signature into a kill training model handler
type KillTrainingModelHandlerFunc func(KillTrainingModelParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn KillTrainingModelHandlerFunc) Handle(params KillTrainingModelParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// KillTrainingModelHandler interface for that can handle valid kill training model params
type KillTrainingModelHandler interface {
	Handle(KillTrainingModelParams, interface{}) middleware.Responder
}

// NewKillTrainingModel creates a new http.Handler for the kill training model operation
func NewKillTrainingModel(ctx *middleware.Context, handler KillTrainingModelHandler) *KillTrainingModel {
	return &KillTrainingModel{Context: ctx, Handler: handler}
}

/*KillTrainingModel swagger:route GET /di/v1/models/{model_id}/kill Models killTrainingModel

Get detailed information about a model.

Get detailed information about a model such as training status.


*/
type KillTrainingModel struct {
	Context *middleware.Context
	Handler KillTrainingModelHandler
}

func (o *KillTrainingModel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewKillTrainingModelParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
