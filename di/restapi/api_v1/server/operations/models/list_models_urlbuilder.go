// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// ListModelsURL generates an URL for the list models operation
type ListModelsURL struct {
	ClusterName *string
	ExpID       *string
	ExpRunID    *string
	Namespace   *string
	Page        *string
	Size        *string
	Userid      *string
	Version     *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListModelsURL) WithBasePath(bp string) *ListModelsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListModelsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ListModelsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/di/v1/models"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var clusterNameQ string
	if o.ClusterName != nil {
		clusterNameQ = *o.ClusterName
	}
	if clusterNameQ != "" {
		qs.Set("clusterName", clusterNameQ)
	}

	var expIDQ string
	if o.ExpID != nil {
		expIDQ = *o.ExpID
	}
	if expIDQ != "" {
		qs.Set("exp_id", expIDQ)
	}

	var expRunIDQ string
	if o.ExpRunID != nil {
		expRunIDQ = *o.ExpRunID
	}
	if expRunIDQ != "" {
		qs.Set("exp_run_id", expRunIDQ)
	}

	var namespaceQ string
	if o.Namespace != nil {
		namespaceQ = *o.Namespace
	}
	if namespaceQ != "" {
		qs.Set("namespace", namespaceQ)
	}

	var pageQ string
	if o.Page != nil {
		pageQ = *o.Page
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var sizeQ string
	if o.Size != nil {
		sizeQ = *o.Size
	}
	if sizeQ != "" {
		qs.Set("size", sizeQ)
	}

	var useridQ string
	if o.Userid != nil {
		useridQ = *o.Userid
	}
	if useridQ != "" {
		qs.Set("userid", useridQ)
	}

	var versionQ string
	if o.Version != nil {
		versionQ = *o.Version
	}
	if versionQ != "" {
		qs.Set("version", versionQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ListModelsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ListModelsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ListModelsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ListModelsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ListModelsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ListModelsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
