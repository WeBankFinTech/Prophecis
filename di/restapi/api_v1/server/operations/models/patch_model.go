// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchModelHandlerFunc turns a function with the right signature into a patch model handler
type PatchModelHandlerFunc func(PatchModelParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchModelHandlerFunc) Handle(params PatchModelParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchModelHandler interface for that can handle valid patch model params
type PatchModelHandler interface {
	Handle(PatchModelParams, interface{}) middleware.Responder
}

// NewPatchModel creates a new http.Handler for the patch model operation
func NewPatchModel(ctx *middleware.Context, handler PatchModelHandler) *PatchModel {
	return &PatchModel{Context: ctx, Handler: handler}
}

/*PatchModel swagger:route PATCH /di/v1/models/{model_id} Models patchModel

Changes the status of the training progress.

Changes the status of the training progress to the given `status` value (currently `halt` only). Halt means the training will be stopped and the last snapshot will be stored and can be retrieved.

*/
type PatchModel struct {
	Context *middleware.Context
	Handler PatchModelHandler
}

func (o *PatchModel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchModelParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
