// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetEventTypeEndpointsHandlerFunc turns a function with the right signature into a get event type endpoints handler
type GetEventTypeEndpointsHandlerFunc func(GetEventTypeEndpointsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEventTypeEndpointsHandlerFunc) Handle(params GetEventTypeEndpointsParams) middleware.Responder {
	return fn(params)
}

// GetEventTypeEndpointsHandler interface for that can handle valid get event type endpoints params
type GetEventTypeEndpointsHandler interface {
	Handle(GetEventTypeEndpointsParams) middleware.Responder
}

// NewGetEventTypeEndpoints creates a new http.Handler for the get event type endpoints operation
func NewGetEventTypeEndpoints(ctx *middleware.Context, handler GetEventTypeEndpointsHandler) *GetEventTypeEndpoints {
	return &GetEventTypeEndpoints{Context: ctx, Handler: handler}
}

/*GetEventTypeEndpoints swagger:route GET /di/v1/models/{model_id}/events/{event_type} Events getEventTypeEndpoints

Get all notification endpoints for this event type.

Get all notification endpoint URLs for this event type.

*/
type GetEventTypeEndpoints struct {
	Context *middleware.Context
	Handler GetEventTypeEndpointsHandler
}

func (o *GetEventTypeEndpoints) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEventTypeEndpointsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
