// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"webank/DI/restapi/api_v1/server/operations/dss_user_info"
	"webank/DI/restapi/api_v1/server/operations/experiment_runs"
	"webank/DI/restapi/api_v1/server/operations/experiments"
	"webank/DI/restapi/api_v1/server/operations/linkis_job"
	"webank/DI/restapi/api_v1/server/operations/models"
	"webank/DI/restapi/api_v1/server/operations/training_data"
)

// NewDlaasAPI creates a new Dlaas instance
func NewDlaasAPI(spec *loads.Document) *DlaasAPI {
	return &DlaasAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		BinProducer:           runtime.ByteStreamProducer(),
		ModelsKillTrainingModelHandler: models.KillTrainingModelHandlerFunc(func(params models.KillTrainingModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsKillTrainingModel has not yet been implemented")
		}),
		ExperimentsCodeUploadHandler: experiments.CodeUploadHandlerFunc(func(params experiments.CodeUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsCodeUpload has not yet been implemented")
		}),
		ExperimentsCreateExperimentHandler: experiments.CreateExperimentHandlerFunc(func(params experiments.CreateExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsCreateExperiment has not yet been implemented")
		}),
		ExperimentRunsCreateExperimentRunHandler: experiment_runs.CreateExperimentRunHandlerFunc(func(params experiment_runs.CreateExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsCreateExperimentRun has not yet been implemented")
		}),
		ExperimentsCreateExperimentTagHandler: experiments.CreateExperimentTagHandlerFunc(func(params experiments.CreateExperimentTagParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsCreateExperimentTag has not yet been implemented")
		}),
		ExperimentsDeleteExperimentHandler: experiments.DeleteExperimentHandlerFunc(func(params experiments.DeleteExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsDeleteExperiment has not yet been implemented")
		}),
		ExperimentRunsDeleteExperimentRunHandler: experiment_runs.DeleteExperimentRunHandlerFunc(func(params experiment_runs.DeleteExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsDeleteExperimentRun has not yet been implemented")
		}),
		ExperimentsDeleteExperimentTagHandler: experiments.DeleteExperimentTagHandlerFunc(func(params experiments.DeleteExperimentTagParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsDeleteExperimentTag has not yet been implemented")
		}),
		ModelsDeleteModelHandler: models.DeleteModelHandlerFunc(func(params models.DeleteModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsDeleteModel has not yet been implemented")
		}),
		ModelsDownloadModelDefinitionHandler: models.DownloadModelDefinitionHandlerFunc(func(params models.DownloadModelDefinitionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsDownloadModelDefinition has not yet been implemented")
		}),
		ModelsDownloadTrainedModelHandler: models.DownloadTrainedModelHandlerFunc(func(params models.DownloadTrainedModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsDownloadTrainedModel has not yet been implemented")
		}),
		ExperimentsExportExperimentHandler: experiments.ExportExperimentHandlerFunc(func(params experiments.ExportExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsExportExperiment has not yet been implemented")
		}),
		ExperimentsExportExperimentDssHandler: experiments.ExportExperimentDssHandlerFunc(func(params experiments.ExportExperimentDssParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsExportExperimentDss has not yet been implemented")
		}),
		ModelsExportModelHandler: models.ExportModelHandlerFunc(func(params models.ExportModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsExportModel has not yet been implemented")
		}),
		GetDashboardsHandler: GetDashboardsHandlerFunc(func(params GetDashboardsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetDashboards has not yet been implemented")
		}),
		DssUserInfoGetDssUserInfoHandler: dss_user_info.GetDssUserInfoHandlerFunc(func(params dss_user_info.GetDssUserInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DssUserInfoGetDssUserInfo has not yet been implemented")
		}),
		ExperimentsGetExperimentHandler: experiments.GetExperimentHandlerFunc(func(params experiments.GetExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsGetExperiment has not yet been implemented")
		}),
		ExperimentRunsGetExperimentRunHandler: experiment_runs.GetExperimentRunHandlerFunc(func(params experiment_runs.GetExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsGetExperimentRun has not yet been implemented")
		}),
		ExperimentRunsGetExperimentRunExecutionHandler: experiment_runs.GetExperimentRunExecutionHandlerFunc(func(params experiment_runs.GetExperimentRunExecutionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsGetExperimentRunExecution has not yet been implemented")
		}),
		ExperimentRunsGetExperimentRunLogHandler: experiment_runs.GetExperimentRunLogHandlerFunc(func(params experiment_runs.GetExperimentRunLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsGetExperimentRunLog has not yet been implemented")
		}),
		ExperimentRunsGetExperimentRunStatusHandler: experiment_runs.GetExperimentRunStatusHandlerFunc(func(params experiment_runs.GetExperimentRunStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsGetExperimentRunStatus has not yet been implemented")
		}),
		ExperimentRunsGetExperimentRunsHistoryHandler: experiment_runs.GetExperimentRunsHistoryHandlerFunc(func(params experiment_runs.GetExperimentRunsHistoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsGetExperimentRunsHistory has not yet been implemented")
		}),
		ModelsGetJobLogByLineHandler: models.GetJobLogByLineHandlerFunc(func(params models.GetJobLogByLineParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsGetJobLogByLine has not yet been implemented")
		}),
		LinkisJobGetLinkisJobLogHandler: linkis_job.GetLinkisJobLogHandlerFunc(func(params linkis_job.GetLinkisJobLogParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LinkisJobGetLinkisJobLog has not yet been implemented")
		}),
		LinkisJobGetLinkisJobStatusHandler: linkis_job.GetLinkisJobStatusHandlerFunc(func(params linkis_job.GetLinkisJobStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LinkisJobGetLinkisJobStatus has not yet been implemented")
		}),
		TrainingDataGetLoglinesHandler: training_data.GetLoglinesHandlerFunc(func(params training_data.GetLoglinesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TrainingDataGetLoglines has not yet been implemented")
		}),
		ModelsGetLogsHandler: models.GetLogsHandlerFunc(func(params models.GetLogsParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelsGetLogs has not yet been implemented")
		}),
		ModelsGetModelHandler: models.GetModelHandlerFunc(func(params models.GetModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsGetModel has not yet been implemented")
		}),
		ExperimentsImportExperimentHandler: experiments.ImportExperimentHandlerFunc(func(params experiments.ImportExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsImportExperiment has not yet been implemented")
		}),
		ExperimentsImportExperimentDssHandler: experiments.ImportExperimentDssHandlerFunc(func(params experiments.ImportExperimentDssParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsImportExperimentDss has not yet been implemented")
		}),
		ExperimentRunsKillExperimentRunHandler: experiment_runs.KillExperimentRunHandlerFunc(func(params experiment_runs.KillExperimentRunParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsKillExperimentRun has not yet been implemented")
		}),
		ExperimentRunsListExperimentRunsHandler: experiment_runs.ListExperimentRunsHandlerFunc(func(params experiment_runs.ListExperimentRunsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentRunsListExperimentRuns has not yet been implemented")
		}),
		ExperimentsListExperimentsHandler: experiments.ListExperimentsHandlerFunc(func(params experiments.ListExperimentsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsListExperiments has not yet been implemented")
		}),
		ModelsListModelsHandler: models.ListModelsHandlerFunc(func(params models.ListModelsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsListModels has not yet been implemented")
		}),
		ModelsPatchModelHandler: models.PatchModelHandlerFunc(func(params models.PatchModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsPatchModel has not yet been implemented")
		}),
		ModelsPostModelHandler: models.PostModelHandlerFunc(func(params models.PostModelParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ModelsPostModel has not yet been implemented")
		}),
		ExperimentsUpdateExperimentHandler: experiments.UpdateExperimentHandlerFunc(func(params experiments.UpdateExperimentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsUpdateExperiment has not yet been implemented")
		}),
		ExperimentsUpdateExperimentInfoHandler: experiments.UpdateExperimentInfoHandlerFunc(func(params experiments.UpdateExperimentInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ExperimentsUpdateExperimentInfo has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BasicAuthTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (basicAuthToken) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "X-Watson-Authorization-Token" header is set
		WatsonAuthTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (watsonAuthToken) X-Watson-Authorization-Token from header param [X-Watson-Authorization-Token] has not yet been implemented")
		},
		// Applies when the "watson-token" query is set
		WatsonAuthTokenQueryAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (watsonAuthTokenQuery) watson-token from query param [watson-token] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*DlaasAPI Prophecis Rest Service
 */
type DlaasAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer

	// BasicAuthTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BasicAuthTokenAuth func(string) (interface{}, error)

	// WatsonAuthTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-Watson-Authorization-Token provided in the header
	WatsonAuthTokenAuth func(string) (interface{}, error)

	// WatsonAuthTokenQueryAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key watson-token provided in the query
	WatsonAuthTokenQueryAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ModelsKillTrainingModelHandler sets the operation handler for the kill training model operation
	ModelsKillTrainingModelHandler models.KillTrainingModelHandler
	// ExperimentsCodeUploadHandler sets the operation handler for the code upload operation
	ExperimentsCodeUploadHandler experiments.CodeUploadHandler
	// ExperimentsCreateExperimentHandler sets the operation handler for the create experiment operation
	ExperimentsCreateExperimentHandler experiments.CreateExperimentHandler
	// ExperimentRunsCreateExperimentRunHandler sets the operation handler for the create experiment run operation
	ExperimentRunsCreateExperimentRunHandler experiment_runs.CreateExperimentRunHandler
	// ExperimentsCreateExperimentTagHandler sets the operation handler for the create experiment tag operation
	ExperimentsCreateExperimentTagHandler experiments.CreateExperimentTagHandler
	// ExperimentsDeleteExperimentHandler sets the operation handler for the delete experiment operation
	ExperimentsDeleteExperimentHandler experiments.DeleteExperimentHandler
	// ExperimentRunsDeleteExperimentRunHandler sets the operation handler for the delete experiment run operation
	ExperimentRunsDeleteExperimentRunHandler experiment_runs.DeleteExperimentRunHandler
	// ExperimentsDeleteExperimentTagHandler sets the operation handler for the delete experiment tag operation
	ExperimentsDeleteExperimentTagHandler experiments.DeleteExperimentTagHandler
	// ModelsDeleteModelHandler sets the operation handler for the delete model operation
	ModelsDeleteModelHandler models.DeleteModelHandler
	// ModelsDownloadModelDefinitionHandler sets the operation handler for the download model definition operation
	ModelsDownloadModelDefinitionHandler models.DownloadModelDefinitionHandler
	// ModelsDownloadTrainedModelHandler sets the operation handler for the download trained model operation
	ModelsDownloadTrainedModelHandler models.DownloadTrainedModelHandler
	// ExperimentsExportExperimentHandler sets the operation handler for the export experiment operation
	ExperimentsExportExperimentHandler experiments.ExportExperimentHandler
	// ExperimentsExportExperimentDssHandler sets the operation handler for the export experiment dss operation
	ExperimentsExportExperimentDssHandler experiments.ExportExperimentDssHandler
	// ModelsExportModelHandler sets the operation handler for the export model operation
	ModelsExportModelHandler models.ExportModelHandler
	// GetDashboardsHandler sets the operation handler for the get dashboards operation
	GetDashboardsHandler GetDashboardsHandler
	// DssUserInfoGetDssUserInfoHandler sets the operation handler for the get dss user info operation
	DssUserInfoGetDssUserInfoHandler dss_user_info.GetDssUserInfoHandler
	// ExperimentsGetExperimentHandler sets the operation handler for the get experiment operation
	ExperimentsGetExperimentHandler experiments.GetExperimentHandler
	// ExperimentRunsGetExperimentRunHandler sets the operation handler for the get experiment run operation
	ExperimentRunsGetExperimentRunHandler experiment_runs.GetExperimentRunHandler
	// ExperimentRunsGetExperimentRunExecutionHandler sets the operation handler for the get experiment run execution operation
	ExperimentRunsGetExperimentRunExecutionHandler experiment_runs.GetExperimentRunExecutionHandler
	// ExperimentRunsGetExperimentRunLogHandler sets the operation handler for the get experiment run log operation
	ExperimentRunsGetExperimentRunLogHandler experiment_runs.GetExperimentRunLogHandler
	// ExperimentRunsGetExperimentRunStatusHandler sets the operation handler for the get experiment run status operation
	ExperimentRunsGetExperimentRunStatusHandler experiment_runs.GetExperimentRunStatusHandler
	// ExperimentRunsGetExperimentRunsHistoryHandler sets the operation handler for the get experiment runs history operation
	ExperimentRunsGetExperimentRunsHistoryHandler experiment_runs.GetExperimentRunsHistoryHandler
	// ModelsGetJobLogByLineHandler sets the operation handler for the get job log by line operation
	ModelsGetJobLogByLineHandler models.GetJobLogByLineHandler
	// LinkisJobGetLinkisJobLogHandler sets the operation handler for the get linkis job log operation
	LinkisJobGetLinkisJobLogHandler linkis_job.GetLinkisJobLogHandler
	// LinkisJobGetLinkisJobStatusHandler sets the operation handler for the get linkis job status operation
	LinkisJobGetLinkisJobStatusHandler linkis_job.GetLinkisJobStatusHandler
	// TrainingDataGetLoglinesHandler sets the operation handler for the get loglines operation
	TrainingDataGetLoglinesHandler training_data.GetLoglinesHandler
	// ModelsGetLogsHandler sets the operation handler for the get logs operation
	ModelsGetLogsHandler models.GetLogsHandler
	// ModelsGetModelHandler sets the operation handler for the get model operation
	ModelsGetModelHandler models.GetModelHandler
	// ExperimentsImportExperimentHandler sets the operation handler for the import experiment operation
	ExperimentsImportExperimentHandler experiments.ImportExperimentHandler
	// ExperimentsImportExperimentDssHandler sets the operation handler for the import experiment dss operation
	ExperimentsImportExperimentDssHandler experiments.ImportExperimentDssHandler
	// ExperimentRunsKillExperimentRunHandler sets the operation handler for the kill experiment run operation
	ExperimentRunsKillExperimentRunHandler experiment_runs.KillExperimentRunHandler
	// ExperimentRunsListExperimentRunsHandler sets the operation handler for the list experiment runs operation
	ExperimentRunsListExperimentRunsHandler experiment_runs.ListExperimentRunsHandler
	// ExperimentsListExperimentsHandler sets the operation handler for the list experiments operation
	ExperimentsListExperimentsHandler experiments.ListExperimentsHandler
	// ModelsListModelsHandler sets the operation handler for the list models operation
	ModelsListModelsHandler models.ListModelsHandler
	// ModelsPatchModelHandler sets the operation handler for the patch model operation
	ModelsPatchModelHandler models.PatchModelHandler
	// ModelsPostModelHandler sets the operation handler for the post model operation
	ModelsPostModelHandler models.PostModelHandler
	// ExperimentsUpdateExperimentHandler sets the operation handler for the update experiment operation
	ExperimentsUpdateExperimentHandler experiments.UpdateExperimentHandler
	// ExperimentsUpdateExperimentInfoHandler sets the operation handler for the update experiment info operation
	ExperimentsUpdateExperimentInfoHandler experiments.UpdateExperimentInfoHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *DlaasAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DlaasAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DlaasAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DlaasAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DlaasAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DlaasAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DlaasAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DlaasAPI
func (o *DlaasAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.BasicAuthTokenAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.WatsonAuthTokenAuth == nil {
		unregistered = append(unregistered, "XWatsonAuthorizationTokenAuth")
	}

	if o.WatsonAuthTokenQueryAuth == nil {
		unregistered = append(unregistered, "WatsonTokenAuth")
	}

	if o.ModelsKillTrainingModelHandler == nil {
		unregistered = append(unregistered, "models.KillTrainingModelHandler")
	}

	if o.ExperimentsCodeUploadHandler == nil {
		unregistered = append(unregistered, "experiments.CodeUploadHandler")
	}

	if o.ExperimentsCreateExperimentHandler == nil {
		unregistered = append(unregistered, "experiments.CreateExperimentHandler")
	}

	if o.ExperimentRunsCreateExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_runs.CreateExperimentRunHandler")
	}

	if o.ExperimentsCreateExperimentTagHandler == nil {
		unregistered = append(unregistered, "experiments.CreateExperimentTagHandler")
	}

	if o.ExperimentsDeleteExperimentHandler == nil {
		unregistered = append(unregistered, "experiments.DeleteExperimentHandler")
	}

	if o.ExperimentRunsDeleteExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_runs.DeleteExperimentRunHandler")
	}

	if o.ExperimentsDeleteExperimentTagHandler == nil {
		unregistered = append(unregistered, "experiments.DeleteExperimentTagHandler")
	}

	if o.ModelsDeleteModelHandler == nil {
		unregistered = append(unregistered, "models.DeleteModelHandler")
	}

	if o.ModelsDownloadModelDefinitionHandler == nil {
		unregistered = append(unregistered, "models.DownloadModelDefinitionHandler")
	}

	if o.ModelsDownloadTrainedModelHandler == nil {
		unregistered = append(unregistered, "models.DownloadTrainedModelHandler")
	}

	if o.ExperimentsExportExperimentHandler == nil {
		unregistered = append(unregistered, "experiments.ExportExperimentHandler")
	}

	if o.ExperimentsExportExperimentDssHandler == nil {
		unregistered = append(unregistered, "experiments.ExportExperimentDssHandler")
	}

	if o.ModelsExportModelHandler == nil {
		unregistered = append(unregistered, "models.ExportModelHandler")
	}

	if o.GetDashboardsHandler == nil {
		unregistered = append(unregistered, "GetDashboardsHandler")
	}

	if o.DssUserInfoGetDssUserInfoHandler == nil {
		unregistered = append(unregistered, "dss_user_info.GetDssUserInfoHandler")
	}

	if o.ExperimentsGetExperimentHandler == nil {
		unregistered = append(unregistered, "experiments.GetExperimentHandler")
	}

	if o.ExperimentRunsGetExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_runs.GetExperimentRunHandler")
	}

	if o.ExperimentRunsGetExperimentRunExecutionHandler == nil {
		unregistered = append(unregistered, "experiment_runs.GetExperimentRunExecutionHandler")
	}

	if o.ExperimentRunsGetExperimentRunLogHandler == nil {
		unregistered = append(unregistered, "experiment_runs.GetExperimentRunLogHandler")
	}

	if o.ExperimentRunsGetExperimentRunStatusHandler == nil {
		unregistered = append(unregistered, "experiment_runs.GetExperimentRunStatusHandler")
	}

	if o.ExperimentRunsGetExperimentRunsHistoryHandler == nil {
		unregistered = append(unregistered, "experiment_runs.GetExperimentRunsHistoryHandler")
	}

	if o.ModelsGetJobLogByLineHandler == nil {
		unregistered = append(unregistered, "models.GetJobLogByLineHandler")
	}

	if o.LinkisJobGetLinkisJobLogHandler == nil {
		unregistered = append(unregistered, "linkis_job.GetLinkisJobLogHandler")
	}

	if o.LinkisJobGetLinkisJobStatusHandler == nil {
		unregistered = append(unregistered, "linkis_job.GetLinkisJobStatusHandler")
	}

	if o.TrainingDataGetLoglinesHandler == nil {
		unregistered = append(unregistered, "training_data.GetLoglinesHandler")
	}

	if o.ModelsGetLogsHandler == nil {
		unregistered = append(unregistered, "models.GetLogsHandler")
	}

	if o.ModelsGetModelHandler == nil {
		unregistered = append(unregistered, "models.GetModelHandler")
	}

	if o.ExperimentsImportExperimentHandler == nil {
		unregistered = append(unregistered, "experiments.ImportExperimentHandler")
	}

	if o.ExperimentsImportExperimentDssHandler == nil {
		unregistered = append(unregistered, "experiments.ImportExperimentDssHandler")
	}

	if o.ExperimentRunsKillExperimentRunHandler == nil {
		unregistered = append(unregistered, "experiment_runs.KillExperimentRunHandler")
	}

	if o.ExperimentRunsListExperimentRunsHandler == nil {
		unregistered = append(unregistered, "experiment_runs.ListExperimentRunsHandler")
	}

	if o.ExperimentsListExperimentsHandler == nil {
		unregistered = append(unregistered, "experiments.ListExperimentsHandler")
	}

	if o.ModelsListModelsHandler == nil {
		unregistered = append(unregistered, "models.ListModelsHandler")
	}

	if o.ModelsPatchModelHandler == nil {
		unregistered = append(unregistered, "models.PatchModelHandler")
	}

	if o.ModelsPostModelHandler == nil {
		unregistered = append(unregistered, "models.PostModelHandler")
	}

	if o.ExperimentsUpdateExperimentHandler == nil {
		unregistered = append(unregistered, "experiments.UpdateExperimentHandler")
	}

	if o.ExperimentsUpdateExperimentInfoHandler == nil {
		unregistered = append(unregistered, "experiments.UpdateExperimentInfoHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DlaasAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DlaasAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {

		case "basicAuthToken":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BasicAuthTokenAuth)

		case "watsonAuthToken":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.WatsonAuthTokenAuth)

		case "watsonAuthTokenQuery":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.WatsonAuthTokenQueryAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *DlaasAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *DlaasAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *DlaasAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DlaasAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the dlaas API
func (o *DlaasAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DlaasAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models/{model_id}/kill"] = models.NewKillTrainingModel(o.context, o.ModelsKillTrainingModelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/codeUpload"] = experiments.NewCodeUpload(o.context, o.ExperimentsCodeUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/experiment"] = experiments.NewCreateExperiment(o.context, o.ExperimentsCreateExperimentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/experimentRun/{exp_id}"] = experiment_runs.NewCreateExperimentRun(o.context, o.ExperimentRunsCreateExperimentRunHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/experimentTag"] = experiments.NewCreateExperimentTag(o.context, o.ExperimentsCreateExperimentTagHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v1/experiment/{id}"] = experiments.NewDeleteExperiment(o.context, o.ExperimentsDeleteExperimentHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v1/experimentRun/{id}"] = experiment_runs.NewDeleteExperimentRun(o.context, o.ExperimentRunsDeleteExperimentRunHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v1/experimentTag/{id}"] = experiments.NewDeleteExperimentTag(o.context, o.ExperimentsDeleteExperimentTagHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/di/v1/models/{model_id}"] = models.NewDeleteModel(o.context, o.ModelsDeleteModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models/{model_id}/definition"] = models.NewDownloadModelDefinition(o.context, o.ModelsDownloadModelDefinitionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models/{model_id}/trained_model"] = models.NewDownloadTrainedModel(o.context, o.ModelsDownloadTrainedModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experiment/{id}/export"] = experiments.NewExportExperiment(o.context, o.ExperimentsExportExperimentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experiment/{id}/exportdss"] = experiments.NewExportExperimentDss(o.context, o.ExperimentsExportExperimentDssHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models/{model_id}/export"] = models.NewExportModel(o.context, o.ModelsExportModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/dashboards"] = NewGetDashboards(o.context, o.GetDashboardsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/dssUserInfo"] = dss_user_info.NewGetDssUserInfo(o.context, o.DssUserInfoGetDssUserInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experiment/{id}"] = experiments.NewGetExperiment(o.context, o.ExperimentsGetExperimentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRun/{id}"] = experiment_runs.NewGetExperimentRun(o.context, o.ExperimentRunsGetExperimentRunHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRun/{exec_id}/execution"] = experiment_runs.NewGetExperimentRunExecution(o.context, o.ExperimentRunsGetExperimentRunExecutionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRun/{id}/log"] = experiment_runs.NewGetExperimentRunLog(o.context, o.ExperimentRunsGetExperimentRunLogHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRun/{id}/status"] = experiment_runs.NewGetExperimentRunStatus(o.context, o.ExperimentRunsGetExperimentRunStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRunsHistory/{exp_id}"] = experiment_runs.NewGetExperimentRunsHistory(o.context, o.ExperimentRunsGetExperimentRunsHistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/job/{training_id}/log"] = models.NewGetJobLogByLine(o.context, o.ModelsGetJobLogByLineHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentJob/{linkis_task_id}/log"] = linkis_job.NewGetLinkisJobLog(o.context, o.LinkisJobGetLinkisJobLogHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentJob/{linkis_exec_id}/status"] = linkis_job.NewGetLinkisJobStatus(o.context, o.LinkisJobGetLinkisJobStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/logs/{model_id}/loglines"] = training_data.NewGetLoglines(o.context, o.TrainingDataGetLoglinesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models/{model_id}/logs"] = models.NewGetLogs(o.context, o.ModelsGetLogsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models/{model_id}"] = models.NewGetModel(o.context, o.ModelsGetModelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/experiment/import"] = experiments.NewImportExperiment(o.context, o.ExperimentsImportExperimentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/experiment/importdss"] = experiments.NewImportExperimentDss(o.context, o.ExperimentsImportExperimentDssHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRun/{id}/kill"] = experiment_runs.NewKillExperimentRun(o.context, o.ExperimentRunsKillExperimentRunHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experimentRuns"] = experiment_runs.NewListExperimentRuns(o.context, o.ExperimentRunsListExperimentRunsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/experiments"] = experiments.NewListExperiments(o.context, o.ExperimentsListExperimentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/di/v1/models"] = models.NewListModels(o.context, o.ModelsListModelsHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/di/v1/models/{model_id}"] = models.NewPatchModel(o.context, o.ModelsPatchModelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/di/v1/models"] = models.NewPostModel(o.context, o.ModelsPostModelHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/di/v1/experiment"] = experiments.NewUpdateExperiment(o.context, o.ExperimentsUpdateExperimentHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/di/v1/experiment/{id}"] = experiments.NewUpdateExperimentInfo(o.context, o.ExperimentsUpdateExperimentInfoHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DlaasAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DlaasAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DlaasAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DlaasAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
