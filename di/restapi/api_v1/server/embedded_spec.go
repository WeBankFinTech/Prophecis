// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Prophecis Rest Service\n",
    "title": "Prophecis Rest Service",
    "version": "1.0.0"
  },
  "host": "di.prophecis.com",
  "basePath": "/",
  "paths": {
    "/di/v1/codeUpload": {
      "post": {
        "description": "upload code.zip to s3",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Experiments"
        ],
        "summary": "upload code to s3",
        "operationId": "codeUpload",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CodeUploadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Code ZIP upload failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/dashboards": {
      "get": {
        "description": "Get dashboard.",
        "summary": "Get the dashboard belongs to a User",
        "operationId": "getDashboards",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "entity clusterName",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDashboardsResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The dashboard cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/logs/{model_id}/loglines": {
      "get": {
        "tags": [
          "TrainingData"
        ],
        "summary": "Get loglines, based on query",
        "operationId": "getLoglines",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "TERM",
              "NESTED",
              "MATCH"
            ],
            "type": "string",
            "default": "TERM",
            "name": "searchType",
            "in": "query"
          },
          {
            "type": "string",
            "format": "string",
            "default": "",
            "description": "Time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. If this value is a raw integer, it represents the time that the metric occured: representing the number of milliseconds since midnight January 1, 1970. If this value is a negative integer, it represents the number of lines to count backwards. If this value is empty, the logs since the beginning of the job will be returned",
            "name": "since_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of lines to output.",
            "name": "pagesize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If positive, line number from start, if negative line counting from end",
            "name": "pos",
            "in": "query"
          },
          {
            "type": "string",
            "default": "2017-10-01",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/v1LogLinesList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models": {
      "get": {
        "description": "Get a list of all available deep learning models and their configuration that a user can see.\n",
        "tags": [
          "Models"
        ],
        "summary": "Get a list of available deep learning models.",
        "operationId": "listModels",
        "parameters": [
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "",
            "description": "owner's userid.",
            "name": "userid",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "job's namespace.",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "entity clusterName",
            "name": "clusterName",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "experiment's id.",
            "name": "exp_id",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "experiment run's id.",
            "name": "exp_run_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of deep learning models.",
            "schema": {
              "$ref": "#/definitions/ModelList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Trains a deep neural network written in a DL framework supported by the DLaaS platform (such as Caffe, Tensorflow, etc.). The model code has to be uploaded and configuration parameters have to be provided.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Trains a new deep learning model.",
        "operationId": "postModel",
        "parameters": [
          {
            "type": "file",
            "description": "The deep learning model code as compressed archive (ZIP).",
            "name": "model_definition",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "The manifest providing configuration for the deep learning model, the training data and the training execution.",
            "name": "manifest",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Deep learning model successfully accepted.",
            "schema": {
              "$ref": "#/definitions/BasicNewModel"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location header containing the model id."
              }
            }
          },
          "400": {
            "description": "Error in the the model_definition or manifest.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}": {
      "get": {
        "description": "Get detailed information about a model such as training status.\n",
        "tags": [
          "Models"
        ],
        "summary": "Get detailed information about a model.",
        "operationId": "getModel",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed model and training information.",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes an existing model. It does not delete any data in the user's data store.\n",
        "tags": [
          "Models"
        ],
        "summary": "Deletes an existing model",
        "operationId": "deleteModel",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model deleted successfully.",
            "schema": {
              "$ref": "#/definitions/BasicModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Changes the status of the training progress to the given ` + "`" + `status` + "`" + ` value (currently ` + "`" + `halt` + "`" + ` only). Halt means the training will be stopped and the last snapshot will be stored and can be retrieved.",
        "tags": [
          "Models"
        ],
        "summary": "Changes the status of the training progress.",
        "operationId": "patchModel",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Currently accepts \"halt\" as the only valid value.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrainingUpdate"
            }
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Training successfully halted.",
            "schema": {
              "$ref": "#/definitions/BasicModel"
            }
          },
          "400": {
            "description": "Incorrect status specified.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/definition": {
      "get": {
        "description": "Downloads the model definition that was initial used for training as ZIP archive.",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Downloads the model definition.",
        "operationId": "downloadModelDefinition",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/export": {
      "get": {
        "description": "Export the model definition",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Export the model definition.",
        "operationId": "exportModel",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/logs": {
      "get": {
        "security": [],
        "description": "Get training logs for the given model as websocket stream. Each message can contain one or more log lines.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Get training logs as websocket stream.\n",
        "operationId": "getLogs",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "format": "boolean",
            "default": false,
            "description": "Follow the log stream if true. Default false.",
            "name": "follow",
            "in": "query"
          },
          {
            "type": "string",
            "format": "string",
            "default": "",
            "description": "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned.  If this value is in the future, no logs will be returned.",
            "name": "since_time",
            "in": "query"
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dump of the training log to-date",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/trained_model": {
      "get": {
        "description": "Downloads the trained model as ZIP archive.",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Downloads the trained model.",
        "operationId": "downloadTrainedModel",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The trained model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BasicModel": {
      "type": "object",
      "properties": {
        "model_id": {
          "description": "A unique id of the deep learning model.",
          "type": "string"
        }
      }
    },
    "BasicNewModel": {
      "allOf": [
        {
          "$ref": "#/definitions/BasicModel"
        },
        {
          "properties": {
            "location": {
              "description": "Location of the model to retrieve it.",
              "type": "string"
            }
          }
        }
      ]
    },
    "CodeUploadResponse": {
      "type": "object",
      "properties": {
        "s3Path": {
          "description": "S3 Path",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "Datastore": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data_store_id": {
          "description": "the id of the data store as defined in the manifest.",
          "type": "string"
        },
        "type": {
          "description": "the type of the data store as defined in the manifest.",
          "type": "string"
        }
      }
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "id": {
          "description": "the id of the endpoint",
          "type": "string"
        },
        "url": {
          "description": "the url of the endpoint",
          "type": "string"
        }
      }
    },
    "EndpointList": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Endpoint"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "Fields": {
      "description": "TFOS Archives \u0026 PyFile Fields",
      "type": "object",
      "properties": {
        "hdfs": {
          "description": "HDFS Path.",
          "type": "string"
        },
        "resource_id": {
          "description": "BML Resource ID.",
          "type": "string"
        },
        "version": {
          "description": "BML Resource Version.",
          "type": "string"
        }
      }
    },
    "Framework": {
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the deep learning framework (e.g. caffe, torch, tensorflow)",
          "type": "string"
        },
        "version": {
          "description": "the version of the specific framework to use.",
          "type": "string"
        }
      }
    },
    "GetDashboardsResponse": {
      "type": "object",
      "properties": {
        "cpus": {
          "description": "number of cpu.",
          "type": "string"
        },
        "runningInstances": {
          "description": "number of running instances.",
          "type": "string"
        },
        "totalInstances": {
          "description": "total number of instances.",
          "type": "string"
        }
      }
    },
    "Model": {
      "allOf": [
        {
          "$ref": "#/definitions/BasicNewModel"
        },
        {
          "properties": {
            "JobAlert": {
              "description": "Job Alert String.",
              "type": "string"
            },
            "JobType": {
              "description": "Job Type.",
              "type": "string"
            },
            "TFosRequest": {
              "description": "TFosRequest",
              "$ref": "#/definitions/TFosRequest"
            },
            "completed_timestamp": {
              "description": "completed timestamp of the job",
              "type": "string"
            },
            "data_stores": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Datastore"
              }
            },
            "description": {
              "description": "Detailed description of deep learning model.",
              "type": "string"
            },
            "expName": {
              "description": "Experiment Name",
              "type": "string"
            },
            "expRunId": {
              "description": "Experiment Run Id",
              "type": "string"
            },
            "fileName": {
              "description": "Code File's Name",
              "type": "string"
            },
            "filePath": {
              "description": "Code File's Path",
              "type": "string"
            },
            "framework": {
              "$ref": "#/definitions/Framework"
            },
            "job_namespace": {
              "description": "job's namespace.",
              "type": "string"
            },
            "name": {
              "description": "The name of the deep learning model.",
              "type": "string"
            },
            "ps_cpu": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "ps_image": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "ps_memory": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "pss": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "submission_timestamp": {
              "description": "submission timestamp of the job.",
              "type": "string"
            },
            "training": {
              "$ref": "#/definitions/Training"
            },
            "user_id": {
              "description": "user name.",
              "type": "string"
            }
          }
        }
      ]
    },
    "ModelList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "pages": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "TFosRequest": {
      "type": "object",
      "properties": {
        "Archives": {
          "description": "Archives Fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fields"
          }
        },
        "Command": {
          "description": "Experiment Description.",
          "type": "string"
        },
        "DriverMemory": {
          "description": "Queue Setting Driver Memory.",
          "type": "string"
        },
        "EntryPoint": {
          "description": "EntryPoint Fields.",
          "$ref": "#/definitions/Fields"
        },
        "ExecutorCores": {
          "description": "Queue Setting Executor Cores.",
          "type": "string"
        },
        "ExecutorMemory": {
          "description": "Queue Setting Executor Memory.",
          "type": "string"
        },
        "Executors": {
          "description": "Queue Setting Executor Number.",
          "type": "string"
        },
        "Queue": {
          "description": "Queue Setting.",
          "type": "string"
        },
        "TensorflowEnv": {
          "description": "Tensorflow Env Files.",
          "$ref": "#/definitions/Fields"
        },
        "py_file": {
          "description": "PyFiles Fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fields"
          }
        }
      }
    },
    "Training": {
      "type": "object",
      "properties": {
        "command": {
          "description": "the command invoked for running the training. This is specific to the DL framework",
          "type": "string"
        },
        "cpus": {
          "description": "Number of CPUs required",
          "type": "number",
          "format": "double"
        },
        "gpus": {
          "description": "Number of CPUs required",
          "type": "number",
          "format": "double"
        },
        "input_data": {
          "description": "Input data to the training, such as training data, pre-trained model. The input is specified as references to the data_store ids that contain the data.",
          "type": "array",
          "items": {
            "description": "Reference to a data store id.",
            "type": "string"
          }
        },
        "learners": {
          "description": "Number of learners required.",
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "description": "Amount of memory required",
          "type": "number",
          "format": "double"
        },
        "memory_unit": {
          "description": "Memory unit (default: MiB)\n",
          "type": "string",
          "default": "MiB",
          "enum": [
            "MiB",
            "MB",
            "GiB",
            "GB"
          ]
        },
        "output_data": {
          "description": "Output data of the training, such as trained models. The output is specified as references to the data_store ids that contain the data.",
          "type": "array",
          "items": {
            "description": "Reference to a data store id.",
            "type": "string"
          }
        },
        "size": {
          "description": "the pre-configured deployment size to used for training. The is used instead of directly specifying CPU, GPU, memory and learners.",
          "type": "string"
        },
        "training_status": {
          "$ref": "#/definitions/TrainingStatus"
        }
      }
    },
    "TrainingStatus": {
      "type": "object",
      "properties": {
        "completed": {
          "description": "Training completion timestamp (Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n",
          "type": "string"
        },
        "error_code": {
          "description": "A code identifying the cause of a status message.",
          "type": "string"
        },
        "status": {
          "description": "Status of the training.",
          "type": "string"
        },
        "status_description": {
          "description": "Description of the training status.",
          "type": "string"
        },
        "status_message": {
          "description": "A human readable message description of the training status.",
          "type": "string"
        },
        "submitted": {
          "description": "Training submission timestamp (Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n",
          "type": "string"
        }
      }
    },
    "TrainingUpdate": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status action to be executed on the training job. (Currently only ` + "`" + `halt` + "`" + ` is supported.)",
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "id"
      ],
      "properties": {
        "Name": {
          "description": "Flag of Delete.",
          "type": "string"
        },
        "Remarks": {
          "description": "Flag of Delete.",
          "type": "string"
        },
        "id": {
          "description": "Flag of Delete.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1LogLine": {
      "type": "object",
      "properties": {
        "line": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1MetaInfo"
        }
      }
    },
    "v1LogLinesList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogLine"
          }
        }
      }
    },
    "v1MetaInfo": {
      "type": "object",
      "properties": {
        "rindex": {
          "type": "number",
          "format": "int64",
          "title": "sequential index"
        },
        "time": {
          "description": "Time that the metric occured: representing the number of millisecond since midnight January 1, 1970.",
          "type": "number",
          "format": "int64"
        },
        "training_id": {
          "type": "string",
          "title": "Unique id identifying the training job"
        },
        "user_id": {
          "type": "string",
          "title": "Unique id identifying the user"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Prophecis Rest Service\n",
    "title": "Prophecis Rest Service",
    "version": "1.0.0"
  },
  "host": "di.prophecis.com",
  "basePath": "/",
  "paths": {
    "/di/v1/codeUpload": {
      "post": {
        "description": "upload code.zip to s3",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Experiments"
        ],
        "summary": "upload code to s3",
        "operationId": "codeUpload",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CodeUploadResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Code ZIP upload failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/dashboards": {
      "get": {
        "description": "Get dashboard.",
        "summary": "Get the dashboard belongs to a User",
        "operationId": "getDashboards",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "entity clusterName",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetDashboardsResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The dashboard cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/logs/{model_id}/loglines": {
      "get": {
        "tags": [
          "TrainingData"
        ],
        "summary": "Get loglines, based on query",
        "operationId": "getLoglines",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "TERM",
              "NESTED",
              "MATCH"
            ],
            "type": "string",
            "default": "TERM",
            "name": "searchType",
            "in": "query"
          },
          {
            "type": "string",
            "format": "string",
            "default": "",
            "description": "Time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. If this value is a raw integer, it represents the time that the metric occured: representing the number of milliseconds since midnight January 1, 1970. If this value is a negative integer, it represents the number of lines to count backwards. If this value is empty, the logs since the beginning of the job will be returned",
            "name": "since_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of lines to output.",
            "name": "pagesize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "If positive, line number from start, if negative line counting from end",
            "name": "pos",
            "in": "query"
          },
          {
            "type": "string",
            "default": "2017-10-01",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/v1LogLinesList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models": {
      "get": {
        "description": "Get a list of all available deep learning models and their configuration that a user can see.\n",
        "tags": [
          "Models"
        ],
        "summary": "Get a list of available deep learning models.",
        "operationId": "listModels",
        "parameters": [
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "",
            "description": "owner's userid.",
            "name": "userid",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "job's namespace.",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "entity clusterName",
            "name": "clusterName",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "experiment's id.",
            "name": "exp_id",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "description": "experiment run's id.",
            "name": "exp_run_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of deep learning models.",
            "schema": {
              "$ref": "#/definitions/ModelList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Trains a deep neural network written in a DL framework supported by the DLaaS platform (such as Caffe, Tensorflow, etc.). The model code has to be uploaded and configuration parameters have to be provided.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Trains a new deep learning model.",
        "operationId": "postModel",
        "parameters": [
          {
            "type": "file",
            "description": "The deep learning model code as compressed archive (ZIP).",
            "name": "model_definition",
            "in": "formData"
          },
          {
            "type": "file",
            "description": "The manifest providing configuration for the deep learning model, the training data and the training execution.",
            "name": "manifest",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Deep learning model successfully accepted.",
            "schema": {
              "$ref": "#/definitions/BasicNewModel"
            },
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location header containing the model id."
              }
            }
          },
          "400": {
            "description": "Error in the the model_definition or manifest.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}": {
      "get": {
        "description": "Get detailed information about a model such as training status.\n",
        "tags": [
          "Models"
        ],
        "summary": "Get detailed information about a model.",
        "operationId": "getModel",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed model and training information.",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes an existing model. It does not delete any data in the user's data store.\n",
        "tags": [
          "Models"
        ],
        "summary": "Deletes an existing model",
        "operationId": "deleteModel",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model deleted successfully.",
            "schema": {
              "$ref": "#/definitions/BasicModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "Changes the status of the training progress to the given ` + "`" + `status` + "`" + ` value (currently ` + "`" + `halt` + "`" + ` only). Halt means the training will be stopped and the last snapshot will be stored and can be retrieved.",
        "tags": [
          "Models"
        ],
        "summary": "Changes the status of the training progress.",
        "operationId": "patchModel",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Currently accepts \"halt\" as the only valid value.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrainingUpdate"
            }
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Training successfully halted.",
            "schema": {
              "$ref": "#/definitions/BasicModel"
            }
          },
          "400": {
            "description": "Incorrect status specified.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model with the given ID not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/definition": {
      "get": {
        "description": "Downloads the model definition that was initial used for training as ZIP archive.",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Downloads the model definition.",
        "operationId": "downloadModelDefinition",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/export": {
      "get": {
        "description": "Export the model definition",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Export the model definition.",
        "operationId": "exportModel",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/logs": {
      "get": {
        "security": [],
        "description": "Get training logs for the given model as websocket stream. Each message can contain one or more log lines.\n",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Get training logs as websocket stream.\n",
        "operationId": "getLogs",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "format": "boolean",
            "default": false,
            "description": "Follow the log stream if true. Default false.",
            "name": "follow",
            "in": "query"
          },
          {
            "type": "string",
            "format": "string",
            "default": "",
            "description": "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned.  If this value is in the future, no logs will be returned.",
            "name": "since_time",
            "in": "query"
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dump of the training log to-date",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/di/v1/models/{model_id}/trained_model": {
      "get": {
        "description": "Downloads the trained model as ZIP archive.",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "Models"
        ],
        "summary": "Downloads the trained model.",
        "operationId": "downloadTrainedModel",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "The id of the model.",
            "name": "model_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "2017-02-13",
            "description": "The release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format.",
            "name": "version",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model definition",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The trained model cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "If the trained model storage time has expired and it has been deleted. It only gets deleted if it not stored on an external data store.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BasicModel": {
      "type": "object",
      "properties": {
        "model_id": {
          "description": "A unique id of the deep learning model.",
          "type": "string"
        }
      }
    },
    "BasicNewModel": {
      "allOf": [
        {
          "$ref": "#/definitions/BasicModel"
        },
        {
          "properties": {
            "location": {
              "description": "Location of the model to retrieve it.",
              "type": "string"
            }
          }
        }
      ]
    },
    "CodeUploadResponse": {
      "type": "object",
      "properties": {
        "s3Path": {
          "description": "S3 Path",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "Datastore": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "data_store_id": {
          "description": "the id of the data store as defined in the manifest.",
          "type": "string"
        },
        "type": {
          "description": "the type of the data store as defined in the manifest.",
          "type": "string"
        }
      }
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "id": {
          "description": "the id of the endpoint",
          "type": "string"
        },
        "url": {
          "description": "the url of the endpoint",
          "type": "string"
        }
      }
    },
    "EndpointList": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Endpoint"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "Fields": {
      "description": "TFOS Archives \u0026 PyFile Fields",
      "type": "object",
      "properties": {
        "hdfs": {
          "description": "HDFS Path.",
          "type": "string"
        },
        "resource_id": {
          "description": "BML Resource ID.",
          "type": "string"
        },
        "version": {
          "description": "BML Resource Version.",
          "type": "string"
        }
      }
    },
    "Framework": {
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the deep learning framework (e.g. caffe, torch, tensorflow)",
          "type": "string"
        },
        "version": {
          "description": "the version of the specific framework to use.",
          "type": "string"
        }
      }
    },
    "GetDashboardsResponse": {
      "type": "object",
      "properties": {
        "cpus": {
          "description": "number of cpu.",
          "type": "string"
        },
        "runningInstances": {
          "description": "number of running instances.",
          "type": "string"
        },
        "totalInstances": {
          "description": "total number of instances.",
          "type": "string"
        }
      }
    },
    "Model": {
      "allOf": [
        {
          "$ref": "#/definitions/BasicNewModel"
        },
        {
          "properties": {
            "JobAlert": {
              "description": "Job Alert String.",
              "type": "string"
            },
            "JobType": {
              "description": "Job Type.",
              "type": "string"
            },
            "TFosRequest": {
              "description": "TFosRequest",
              "$ref": "#/definitions/TFosRequest"
            },
            "completed_timestamp": {
              "description": "completed timestamp of the job",
              "type": "string"
            },
            "data_stores": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Datastore"
              }
            },
            "description": {
              "description": "Detailed description of deep learning model.",
              "type": "string"
            },
            "expName": {
              "description": "Experiment Name",
              "type": "string"
            },
            "expRunId": {
              "description": "Experiment Run Id",
              "type": "string"
            },
            "fileName": {
              "description": "Code File's Name",
              "type": "string"
            },
            "filePath": {
              "description": "Code File's Path",
              "type": "string"
            },
            "framework": {
              "$ref": "#/definitions/Framework"
            },
            "job_namespace": {
              "description": "job's namespace.",
              "type": "string"
            },
            "name": {
              "description": "The name of the deep learning model.",
              "type": "string"
            },
            "ps_cpu": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "ps_image": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "ps_memory": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "pss": {
              "description": "Count of Param Server",
              "type": "string"
            },
            "submission_timestamp": {
              "description": "submission timestamp of the job.",
              "type": "string"
            },
            "training": {
              "$ref": "#/definitions/Training"
            },
            "user_id": {
              "description": "user name.",
              "type": "string"
            }
          }
        }
      ]
    },
    "ModelList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          }
        },
        "pages": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "TFosRequest": {
      "type": "object",
      "properties": {
        "Archives": {
          "description": "Archives Fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fields"
          }
        },
        "Command": {
          "description": "Experiment Description.",
          "type": "string"
        },
        "DriverMemory": {
          "description": "Queue Setting Driver Memory.",
          "type": "string"
        },
        "EntryPoint": {
          "description": "EntryPoint Fields.",
          "$ref": "#/definitions/Fields"
        },
        "ExecutorCores": {
          "description": "Queue Setting Executor Cores.",
          "type": "string"
        },
        "ExecutorMemory": {
          "description": "Queue Setting Executor Memory.",
          "type": "string"
        },
        "Executors": {
          "description": "Queue Setting Executor Number.",
          "type": "string"
        },
        "Queue": {
          "description": "Queue Setting.",
          "type": "string"
        },
        "TensorflowEnv": {
          "description": "Tensorflow Env Files.",
          "$ref": "#/definitions/Fields"
        },
        "py_file": {
          "description": "PyFiles Fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fields"
          }
        }
      }
    },
    "Training": {
      "type": "object",
      "properties": {
        "command": {
          "description": "the command invoked for running the training. This is specific to the DL framework",
          "type": "string"
        },
        "cpus": {
          "description": "Number of CPUs required",
          "type": "number",
          "format": "double"
        },
        "gpus": {
          "description": "Number of CPUs required",
          "type": "number",
          "format": "double"
        },
        "input_data": {
          "description": "Input data to the training, such as training data, pre-trained model. The input is specified as references to the data_store ids that contain the data.",
          "type": "array",
          "items": {
            "description": "Reference to a data store id.",
            "type": "string"
          }
        },
        "learners": {
          "description": "Number of learners required.",
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "description": "Amount of memory required",
          "type": "number",
          "format": "double"
        },
        "memory_unit": {
          "description": "Memory unit (default: MiB)\n",
          "type": "string",
          "default": "MiB",
          "enum": [
            "MiB",
            "MB",
            "GiB",
            "GB"
          ]
        },
        "output_data": {
          "description": "Output data of the training, such as trained models. The output is specified as references to the data_store ids that contain the data.",
          "type": "array",
          "items": {
            "description": "Reference to a data store id.",
            "type": "string"
          }
        },
        "size": {
          "description": "the pre-configured deployment size to used for training. The is used instead of directly specifying CPU, GPU, memory and learners.",
          "type": "string"
        },
        "training_status": {
          "$ref": "#/definitions/TrainingStatus"
        }
      }
    },
    "TrainingStatus": {
      "type": "object",
      "properties": {
        "completed": {
          "description": "Training completion timestamp (Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n",
          "type": "string"
        },
        "error_code": {
          "description": "A code identifying the cause of a status message.",
          "type": "string"
        },
        "status": {
          "description": "Status of the training.",
          "type": "string"
        },
        "status_description": {
          "description": "Description of the training status.",
          "type": "string"
        },
        "status_message": {
          "description": "A human readable message description of the training status.",
          "type": "string"
        },
        "submitted": {
          "description": "Training submission timestamp (Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n",
          "type": "string"
        }
      }
    },
    "TrainingUpdate": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status action to be executed on the training job. (Currently only ` + "`" + `halt` + "`" + ` is supported.)",
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "id"
      ],
      "properties": {
        "Name": {
          "description": "Flag of Delete.",
          "type": "string"
        },
        "Remarks": {
          "description": "Flag of Delete.",
          "type": "string"
        },
        "id": {
          "description": "Flag of Delete.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "v1LogLine": {
      "type": "object",
      "properties": {
        "line": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1MetaInfo"
        }
      }
    },
    "v1LogLinesList": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LogLine"
          }
        }
      }
    },
    "v1MetaInfo": {
      "type": "object",
      "properties": {
        "rindex": {
          "type": "number",
          "format": "int64",
          "title": "sequential index"
        },
        "time": {
          "description": "Time that the metric occured: representing the number of millisecond since midnight January 1, 1970.",
          "type": "number",
          "format": "int64"
        },
        "training_id": {
          "type": "string",
          "title": "Unique id identifying the training job"
        },
        "user_id": {
          "type": "string",
          "title": "Unique id identifying the user"
        }
      }
    }
  }
}`))
}
