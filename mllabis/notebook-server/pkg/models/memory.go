// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Memory memory
// swagger:model Memory
type Memory struct {

	// Amount of memory required
	// Required: true
	MemoryAmount *float64 `json:"memoryAmount"`

	// Memory unit (default: Mi)
	//
	// Enum: [Mi M Gi G]
	MemoryUnit string `json:"memoryUnit,omitempty"`
}

// Validate validates this memory
func (m *Memory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemoryAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Memory) validateMemoryAmount(formats strfmt.Registry) error {

	if err := validate.Required("memoryAmount", "body", m.MemoryAmount); err != nil {
		return err
	}

	return nil
}

var memoryTypeMemoryUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Mi","M","Gi","G"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memoryTypeMemoryUnitPropEnum = append(memoryTypeMemoryUnitPropEnum, v)
	}
}

const (

	// MemoryMemoryUnitMi captures enum value "Mi"
	MemoryMemoryUnitMi string = "Mi"

	// MemoryMemoryUnitM captures enum value "M"
	MemoryMemoryUnitM string = "M"

	// MemoryMemoryUnitGi captures enum value "Gi"
	MemoryMemoryUnitGi string = "Gi"

	// MemoryMemoryUnitG captures enum value "G"
	MemoryMemoryUnitG string = "G"
)

// prop value enum
func (m *Memory) validateMemoryUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, memoryTypeMemoryUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Memory) validateMemoryUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemoryUnitEnum("memoryUnit", "body", m.MemoryUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Memory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Memory) UnmarshalBinary(b []byte) error {
	var res Memory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
