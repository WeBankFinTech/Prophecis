// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewNotebookRequest new notebook request
// swagger:model NewNotebookRequest
type NewNotebookRequest struct {

	// Specify the total amount of CPU reserved by user's Notebook. For CPU-Intensive workloads,user can choose more than 1 CPU (e.g 1.5)
	// Required: true
	CPU *float64 `json:"cpu"`

	// data volume
	DataVolume *MountInfo `json:"dataVolume,omitempty"`

	// User driver memory in BDAP Yarn Cluster
	DriverMemory string `json:"driverMemory,omitempty"`

	// User excutor core setting in BDAP Yarn Cluster
	ExecutorCores string `json:"executorCores,omitempty"`

	// User excutor memory setting in BDAP Yarn Cluster
	ExecutorMemory string `json:"executorMemory,omitempty"`

	// User excutors setting in BDAP Yarn Cluster
	Executors string `json:"executors,omitempty"`

	// Reserve additional resources,for example, to reserve 2 GPUs: {"nvidia.com/gup": 2}
	//
	ExtraResources string `json:"extraResources,omitempty"`

	// image
	// Required: true
	Image *Image `json:"image"`

	// memory
	// Required: true
	Memory *Memory `json:"memory"`

	// Notebook name
	// Required: true
	Name *string `json:"name"`

	// Kubernetes Namespace where notebook will be created
	// Required: true
	Namespace *string `json:"namespace"`

	// BDAP Yarn Queue Setting
	//
	Queue string `json:"queue,omitempty"`

	// workspace volume
	WorkspaceVolume *MountInfo `json:"workspaceVolume,omitempty"`
}

// Validate validates this new notebook request
func (m *NewNotebookRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewNotebookRequest) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *NewNotebookRequest) validateDataVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.DataVolume) { // not required
		return nil
	}

	if m.DataVolume != nil {
		if err := m.DataVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataVolume")
			}
			return err
		}
	}

	return nil
}

func (m *NewNotebookRequest) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *NewNotebookRequest) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory")
			}
			return err
		}
	}

	return nil
}

func (m *NewNotebookRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewNotebookRequest) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *NewNotebookRequest) validateWorkspaceVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkspaceVolume) { // not required
		return nil
	}

	if m.WorkspaceVolume != nil {
		if err := m.WorkspaceVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaceVolume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewNotebookRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewNotebookRequest) UnmarshalBinary(b []byte) error {
	var res NewNotebookRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
