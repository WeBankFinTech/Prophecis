// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image image
// swagger:model Image
type Image struct {

	// Docker Image Name
	// Required: true
	ImageName *string `json:"imageName"`

	// Docker Image Type (default: Standard)
	//
	// Enum: [Standard Custom]
	ImageType *string `json:"imageType,omitempty"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateImageName(formats strfmt.Registry) error {

	if err := validate.Required("imageName", "body", m.ImageName); err != nil {
		return err
	}

	return nil
}

var imageTypeImageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard","Custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeImageTypePropEnum = append(imageTypeImageTypePropEnum, v)
	}
}

const (

	// ImageImageTypeStandard captures enum value "Standard"
	ImageImageTypeStandard string = "Standard"

	// ImageImageTypeCustom captures enum value "Custom"
	ImageImageTypeCustom string = "Custom"
)

// prop value enum
func (m *Image) validateImageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeImageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateImageType(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageTypeEnum("imageType", "body", *m.ImageType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
