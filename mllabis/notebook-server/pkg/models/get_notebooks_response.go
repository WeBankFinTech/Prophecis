// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNotebooksResponse get notebooks response
// swagger:model GetNotebooksResponse
type GetNotebooksResponse struct {

	// notebooks
	// Required: true
	Notebooks []*Notebook `json:"notebooks"`

	// page number
	// Required: true
	Pages *string `json:"pages"`

	// page size
	// Required: true
	Total *string `json:"total"`
}

// Validate validates this get notebooks response
func (m *GetNotebooksResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotebooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNotebooksResponse) validateNotebooks(formats strfmt.Registry) error {

	if err := validate.Required("notebooks", "body", m.Notebooks); err != nil {
		return err
	}

	for i := 0; i < len(m.Notebooks); i++ {
		if swag.IsZero(m.Notebooks[i]) { // not required
			continue
		}

		if m.Notebooks[i] != nil {
			if err := m.Notebooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notebooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetNotebooksResponse) validatePages(formats strfmt.Registry) error {

	if err := validate.Required("pages", "body", m.Pages); err != nil {
		return err
	}

	return nil
}

func (m *GetNotebooksResponse) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetNotebooksResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNotebooksResponse) UnmarshalBinary(b []byte) error {
	var res GetNotebooksResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
