// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "webank/AIDE/notebook-server/pkg/models"
)

// GetUserNotebooksOKCode is the HTTP code returned for type GetUserNotebooksOK
const GetUserNotebooksOKCode int = 200

/*GetUserNotebooksOK OK

swagger:response getUserNotebooksOK
*/
type GetUserNotebooksOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetNotebooksResponse `json:"body,omitempty"`
}

// NewGetUserNotebooksOK creates GetUserNotebooksOK with default headers values
func NewGetUserNotebooksOK() *GetUserNotebooksOK {

	return &GetUserNotebooksOK{}
}

// WithPayload adds the payload to the get user notebooks o k response
func (o *GetUserNotebooksOK) WithPayload(payload *models.GetNotebooksResponse) *GetUserNotebooksOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user notebooks o k response
func (o *GetUserNotebooksOK) SetPayload(payload *models.GetNotebooksResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserNotebooksOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserNotebooksUnauthorizedCode is the HTTP code returned for type GetUserNotebooksUnauthorized
const GetUserNotebooksUnauthorizedCode int = 401

/*GetUserNotebooksUnauthorized Unauthorized

swagger:response getUserNotebooksUnauthorized
*/
type GetUserNotebooksUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserNotebooksUnauthorized creates GetUserNotebooksUnauthorized with default headers values
func NewGetUserNotebooksUnauthorized() *GetUserNotebooksUnauthorized {

	return &GetUserNotebooksUnauthorized{}
}

// WithPayload adds the payload to the get user notebooks unauthorized response
func (o *GetUserNotebooksUnauthorized) WithPayload(payload *models.Error) *GetUserNotebooksUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user notebooks unauthorized response
func (o *GetUserNotebooksUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserNotebooksUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserNotebooksNotFoundCode is the HTTP code returned for type GetUserNotebooksNotFound
const GetUserNotebooksNotFoundCode int = 404

/*GetUserNotebooksNotFound The Notebook cannot be found

swagger:response getUserNotebooksNotFound
*/
type GetUserNotebooksNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserNotebooksNotFound creates GetUserNotebooksNotFound with default headers values
func NewGetUserNotebooksNotFound() *GetUserNotebooksNotFound {

	return &GetUserNotebooksNotFound{}
}

// WithPayload adds the payload to the get user notebooks not found response
func (o *GetUserNotebooksNotFound) WithPayload(payload *models.Error) *GetUserNotebooksNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user notebooks not found response
func (o *GetUserNotebooksNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserNotebooksNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
