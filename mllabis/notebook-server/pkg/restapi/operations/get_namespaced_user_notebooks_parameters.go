// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNamespacedUserNotebooksParams creates a new GetNamespacedUserNotebooksParams object
// with the default values initialized.
func NewGetNamespacedUserNotebooksParams() GetNamespacedUserNotebooksParams {

	var (
		// initialize parameters with default values

		clusterNameDefault = string("")

		pageDefault = string("1")
		sizeDefault = string("10")

		workDirDefault = string("")
	)

	return GetNamespacedUserNotebooksParams{
		ClusterName: &clusterNameDefault,

		Page: &pageDefault,

		Size: &sizeDefault,

		WorkDir: &workDirDefault,
	}
}

// GetNamespacedUserNotebooksParams contains all the bound params for the get namespaced user notebooks operation
// typically these are obtained from a http.Request
//
// swagger:parameters getNamespacedUserNotebooks
type GetNamespacedUserNotebooksParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	  Default: ""
	*/
	ClusterName *string
	/*
	  Required: true
	  In: path
	*/
	Namespace string
	/*
	  In: query
	  Default: "1"
	*/
	Page *string
	/*
	  In: query
	  Default: "10"
	*/
	Size *string
	/*
	  Required: true
	  In: path
	*/
	User string
	/*
	  In: query
	  Default: ""
	*/
	WorkDir *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetNamespacedUserNotebooksParams() beforehand.
func (o *GetNamespacedUserNotebooksParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClusterName, qhkClusterName, _ := qs.GetOK("clusterName")
	if err := o.bindClusterName(qClusterName, qhkClusterName, route.Formats); err != nil {
		res = append(res, err)
	}

	rNamespace, rhkNamespace, _ := route.Params.GetOK("namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSize, qhkSize, _ := qs.GetOK("size")
	if err := o.bindSize(qSize, qhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	rUser, rhkUser, _ := route.Params.GetOK("user")
	if err := o.bindUser(rUser, rhkUser, route.Formats); err != nil {
		res = append(res, err)
	}

	qWorkDir, qhkWorkDir, _ := qs.GetOK("workDir")
	if err := o.bindWorkDir(qWorkDir, qhkWorkDir, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClusterName binds and validates parameter ClusterName from query.
func (o *GetNamespacedUserNotebooksParams) bindClusterName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNamespacedUserNotebooksParams()
		return nil
	}

	o.ClusterName = &raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from path.
func (o *GetNamespacedUserNotebooksParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Namespace = raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetNamespacedUserNotebooksParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNamespacedUserNotebooksParams()
		return nil
	}

	o.Page = &raw

	return nil
}

// bindSize binds and validates parameter Size from query.
func (o *GetNamespacedUserNotebooksParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNamespacedUserNotebooksParams()
		return nil
	}

	o.Size = &raw

	return nil
}

// bindUser binds and validates parameter User from path.
func (o *GetNamespacedUserNotebooksParams) bindUser(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.User = raw

	return nil
}

// bindWorkDir binds and validates parameter WorkDir from query.
func (o *GetNamespacedUserNotebooksParams) bindWorkDir(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetNamespacedUserNotebooksParams()
		return nil
	}

	o.WorkDir = &raw

	return nil
}
