// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "webank/AIDE/notebook-server/pkg/models"
)

// GetNamespacedNotebookLogOKCode is the HTTP code returned for type GetNamespacedNotebookLogOK
const GetNamespacedNotebookLogOKCode int = 200

/*GetNamespacedNotebookLogOK OK

swagger:response getNamespacedNotebookLogOK
*/
type GetNamespacedNotebookLogOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetNotebookLogResponse `json:"body,omitempty"`
}

// NewGetNamespacedNotebookLogOK creates GetNamespacedNotebookLogOK with default headers values
func NewGetNamespacedNotebookLogOK() *GetNamespacedNotebookLogOK {

	return &GetNamespacedNotebookLogOK{}
}

// WithPayload adds the payload to the get namespaced notebook log o k response
func (o *GetNamespacedNotebookLogOK) WithPayload(payload *models.GetNotebookLogResponse) *GetNamespacedNotebookLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get namespaced notebook log o k response
func (o *GetNamespacedNotebookLogOK) SetPayload(payload *models.GetNotebookLogResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamespacedNotebookLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNamespacedNotebookLogUnauthorizedCode is the HTTP code returned for type GetNamespacedNotebookLogUnauthorized
const GetNamespacedNotebookLogUnauthorizedCode int = 401

/*GetNamespacedNotebookLogUnauthorized Unauthorized

swagger:response getNamespacedNotebookLogUnauthorized
*/
type GetNamespacedNotebookLogUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNamespacedNotebookLogUnauthorized creates GetNamespacedNotebookLogUnauthorized with default headers values
func NewGetNamespacedNotebookLogUnauthorized() *GetNamespacedNotebookLogUnauthorized {

	return &GetNamespacedNotebookLogUnauthorized{}
}

// WithPayload adds the payload to the get namespaced notebook log unauthorized response
func (o *GetNamespacedNotebookLogUnauthorized) WithPayload(payload *models.Error) *GetNamespacedNotebookLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get namespaced notebook log unauthorized response
func (o *GetNamespacedNotebookLogUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamespacedNotebookLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNamespacedNotebookLogNotFoundCode is the HTTP code returned for type GetNamespacedNotebookLogNotFound
const GetNamespacedNotebookLogNotFoundCode int = 404

/*GetNamespacedNotebookLogNotFound The Notebook cannot be found

swagger:response getNamespacedNotebookLogNotFound
*/
type GetNamespacedNotebookLogNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNamespacedNotebookLogNotFound creates GetNamespacedNotebookLogNotFound with default headers values
func NewGetNamespacedNotebookLogNotFound() *GetNamespacedNotebookLogNotFound {

	return &GetNamespacedNotebookLogNotFound{}
}

// WithPayload adds the payload to the get namespaced notebook log not found response
func (o *GetNamespacedNotebookLogNotFound) WithPayload(payload *models.Error) *GetNamespacedNotebookLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get namespaced notebook log not found response
func (o *GetNamespacedNotebookLogNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamespacedNotebookLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
