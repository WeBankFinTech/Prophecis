// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostNamespacedNotebookHandlerFunc turns a function with the right signature into a post namespaced notebook handler
type PostNamespacedNotebookHandlerFunc func(PostNamespacedNotebookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNamespacedNotebookHandlerFunc) Handle(params PostNamespacedNotebookParams) middleware.Responder {
	return fn(params)
}

// PostNamespacedNotebookHandler interface for that can handle valid post namespaced notebook params
type PostNamespacedNotebookHandler interface {
	Handle(PostNamespacedNotebookParams) middleware.Responder
}

// NewPostNamespacedNotebook creates a new http.Handler for the post namespaced notebook operation
func NewPostNamespacedNotebook(ctx *middleware.Context, handler PostNamespacedNotebookHandler) *PostNamespacedNotebook {
	return &PostNamespacedNotebook{Context: ctx, Handler: handler}
}

/*PostNamespacedNotebook swagger:route POST /aide/v1/namespaces/{namespace}/notebooks postNamespacedNotebook

Create a Notebook in the given Namesapce

Post Notebooks.

*/
type PostNamespacedNotebook struct {
	Context *middleware.Context
	Handler PostNamespacedNotebookHandler
}

func (o *PostNamespacedNotebook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNamespacedNotebookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
