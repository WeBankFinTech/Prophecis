// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"fmt"
	"github.com/go-openapi/loads"
	"github.com/spf13/viper"
	"github.com/tylerb/graceful"
	"net/http"
	"os"
	"time"
	"webank/AIDE/notebook-server/pkg/commons/config"
	"webank/AIDE/notebook-server/pkg/commons/logger"
	"webank/AIDE/notebook-server/pkg/restapi"
	"webank/AIDE/notebook-server/pkg/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	config.InitViper()
	logger.Logger().Printf("notebook server, startPort: %s", os.Getenv("START_PORT"))
	logger.Logger().Printf("notebook server, endPort: %s", os.Getenv("END_PORT"))

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		logger.Logger().Fatalln(err)
	}

	api := operations.NewJupyterServerAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	server.Port = viper.GetInt(config.PortKey)
	server.ConfigureAPI()

	mux := http.NewServeMux()
	mux.Handle("/", server.GetHandler())
	mux.HandleFunc("/health", restapi.GetHealth)

	address := fmt.Sprintf(":%d", server.Port)

	logger.Logger().Printf("Jupyter Notebook Service REST API v1 serving on %s", address)

	err = graceful.RunWithErr(address, 10*time.Second, mux)
	if err != nil {
		logger.Logger().Fatalln(err)
	}
}
