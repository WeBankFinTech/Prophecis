apiVersion: v1
kind: ConfigMap
metadata:
  name: bdap-ui-config
  namespace: {{.Values.namespace}}
data:
  nginx-conf: |
    worker_processes  1;
    events {
        worker_connections  1024;
    }
    error_log  /var/log/nginx/error.log warn;
    http {
        include       mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"'
                          '"cookie: prophecis_cookies" "$cookie_PROPHECIS" ';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;
        keepalive_timeout  65;
        include /etc/nginx/conf.d/*.conf;
        server_tokens off;
    }  

  ui-conf: |
    upstream cc {
        server {{.Values.ui.cc.server}};
    }
    upstream aide {
        server {{.Values.ui.aide.server}};
    }
    server {
      listen 80;
      # should be real domain
      server_name mlss-aide-gw.webank.oa.com;
      # resolver kube-dns.kube-system.svc.cluster.local valid=60s;
      underscores_in_headers on;
      client_max_body_size 0;
      chunked_transfer_encoding on;
      add_header X-Frame-Options SAMEORIGIN;
      add_header Access-Control-Allow-Origin http://127.0.0.1;
      location = /auth {
        internal;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header MLSS-RealIP $mlss_realip;
        proxy_set_header MLSS-Token $cookie_PROPHECIS;
        proxy_pass $auth_request_uri;
      }
      location /notebook {
        resolver kube-dns.kube-system.svc.cluster.local valid=60s;
        set $mlss_token $cookie_PROPHECIS;
        if ($request_uri ~* (notebook\/([\w-]*)) ) {
          set $mlss_namespace $2;
        }
        if ($request_uri ~* (notebook\/([\w-]*\/([\w-]*))) ) {
          set $mlss_notebook $3;
        }
        set $mlss_realip $remote_addr;
        set $auth_request_uri "http://cc/cc/v1/auth/access/namespaces/$mlss_namespace/notebooks/$mlss_notebook";
        auth_request /auth;
        proxy_http_version 1.1;
        proxy_read_timeout 1800s;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_pass http://$mlss_notebook.$mlss_namespace.svc.cluster.local:80$request_uri;
      }

      location /userAuth {
        internal;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header MLSS-Token $cookie_PROPHECIS;
        proxy_pass $auth_request_uri;
      }
      location /api {
        proxy_set_header MLSS-Token $cookie_PROPHECIS;
        proxy_set_header MLSS-RealIP $remote_addr;
        proxy_set_header MLSS-Userid $http_mlss_userid;
        proxy_set_header MLSS-Auth-Type $http_mlss_auth_type;
        proxy_set_header MLSS-Ticket $http_mlss_ticket;
        proxy_set_header MLSS-UIURL $http_mlss_uiurl;
        proxy_set_header MLSS-Passwd $http_mlss_passwd;
        proxy_set_header MLSS-APPID $http_mlss_appid;
        proxy_set_header MLSS-APPTimestamp $http_mlss_apptimestamp;
        proxy_set_header MLSS-APPSignature $http_mlss_appsignature;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_http_version 1.1;
        proxy_pass http://cc;
      }
      location /cc {
        proxy_set_header MLSS-Token $cookie_PROPHECIS;
        proxy_set_header MLSS-RealIP $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header MLSS-Userid $http_mlss_userid;
        proxy_set_header MLSS-Auth-Type $http_mlss_auth_type;
        proxy_set_header MLSS-Ticket $http_mlss_ticket;
        proxy_set_header MLSS-UIURL $http_mlss_uiurl;
        proxy_set_header MLSS-Passwd $http_mlss_passwd;
        proxy_set_header MLSS-APPID $http_mlss_appid;
        proxy_set_header MLSS-APPTimestamp $http_mlss_apptimestamp;
        proxy_set_header MLSS-APPSignature $http_mlss_appsignature;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_http_version 1.1;
        proxy_pass http://cc;
      }
      location /aide {
        proxy_set_header MLSS-Token $cookie_PROPHECIS;
        proxy_set_header MLSS-RealIP $remote_addr;
        proxy_set_header MLSS-Userid $http_mlss_userid;
        proxy_set_header MLSS-Auth-Type $http_mlss_auth_type;
        proxy_set_header MLSS-Ticket $http_mlss_ticket;
        proxy_set_header MLSS-UIURL $http_mlss_iurl;
        proxy_set_header MLSS-Passwd $http_mlss_passwd;
        proxy_set_header MLSS-APPID $http_mlss_appid;
        proxy_set_header MLSS-APPTimestamp $http_mlss_apptimestamp;
        proxy_set_header MLSS-APPSignature $http_mlss_appsignature;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_http_version 1.1;
        proxy_pass http://aide;
      }

      location / {
          root /var/www/html;
          index index.html;
      }
    }

  env-config-js: |
    var mlssEnvConfig = {
        'production': {
            'diApiVersion': '{{.Values.ui.diApiVersion}}',
            'aideApiVersion': '{{.Values.ui.aideApiVersion}}',
            'ccApiVersion': '{{.Values.ui.ccApiVersion}}',
            'AIDE': {
                'defineImage': '{{.Values.ui.aide.image.repository}}',
                'imageOption': [{{range .Values.ui.aide.image.notebookTags}}'{{.name}}',{{end}}]
            },
            'basisPlatform': {
                'grafanaUrl': '{{.Values.ui.grafana.url}}',
                'dashboardUrl': '{{.Values.ui.dashboard.url}}',
                'prometheusUrl': '{{.Values.ui.prometheus.url}}',
                'kibanaUrl': '{{.Values.ui.kibana.url}}'
            },
            'ns': {
                'platformNamespace': '{{.Values.namespace}}'
            },
        }
    }
    
