// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ModelVersionPushEvent model version push event
// swagger:model ModelVersionPushEvent
type ModelVersionPushEvent struct {

	// Timestamp recorded when this model_version was created.
	CreationTimestamp string `json:"creation_timestamp,omitempty"`

	// enable flag
	EnableFlag int8 `json:"enable_flag,omitempty"`

	// event
	Event *Event `json:"event,omitempty"`

	// file name
	FileName string `json:"file_name,omitempty"`

	// Running status of this model_version.
	Filepath string `json:"filepath,omitempty"`

	// Id for the ModelVersion.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Timestamp recorded when metadata for this model_version was last updated.
	LatestFlag int64 `json:"latest_flag,omitempty"`

	// model
	Model *ModelBase `json:"model,omitempty"`

	// Description of this model_version.
	ModelID int64 `json:"model_id,omitempty"`

	// push id
	PushID int64 `json:"push_id,omitempty"`

	// Timestamp pushed.
	PushTimestamp string `json:"push_timestamp,omitempty"`

	// User that created this model_version.
	Source string `json:"source,omitempty"`

	// The flag that whether generated by model operator.
	TrainingFlag int8 `json:"training_flag,omitempty"`

	// The id of training
	TrainingID string `json:"training_id,omitempty"`

	// user
	User *UserInfo `json:"user,omitempty"`

	// Modelâ€™s version number.
	Version string `json:"version,omitempty"`
}

// Validate validates this model version push event
func (m *ModelVersionPushEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelVersionPushEvent) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *ModelVersionPushEvent) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *ModelVersionPushEvent) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelVersionPushEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelVersionPushEvent) UnmarshalBinary(b []byte) error {
	var res ModelVersionPushEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
