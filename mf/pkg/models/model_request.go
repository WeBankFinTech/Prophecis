// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ModelRequest model request
// swagger:model ModelRequest
type ModelRequest struct {

	// S3 path
	ChildPath string `json:"child_path,omitempty"`

	// File Name
	FileName string `json:"file_name,omitempty"`

	// Group Id of User.
	GroupID int64 `json:"group_id,omitempty"`

	// Name for the model
	ModelName string `json:"model_name,omitempty"`

	// Type for the model
	ModelType string `json:"model_type,omitempty"`

	// Lastest version
	ModelVersion *ModelVersion `json:"model_version,omitempty"`

	// S3 path
	RootPath string `json:"root_path,omitempty"`

	// S3 path
	S3Path string `json:"s3_path,omitempty"`
}

// Validate validates this model request
func (m *ModelRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModelVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelRequest) validateModelVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ModelVersion) { // not required
		return nil
	}

	if m.ModelVersion != nil {
		if err := m.ModelVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelRequest) UnmarshalBinary(b []byte) error {
	var res ModelRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
