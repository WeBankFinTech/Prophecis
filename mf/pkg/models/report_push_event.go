// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportPushEvent report push event
// swagger:model ReportPushEvent
type ReportPushEvent struct {

	// create timestamp
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creation_timestamp,omitempty"`

	// 1 normal; 0 freeze
	EnableFlag *int8 `json:"enable_flag,omitempty"`

	// group
	Group *Group `json:"group,omitempty"`

	// report id
	ID int64 `json:"id,omitempty"`

	// model information
	Model *ModelInfo `json:"model,omitempty"`

	// status of lasted push
	PushStatus string `json:"push_status,omitempty"`

	// latest report version id
	ReportLatestVersionID int64 `json:"report_latest_version_id,omitempty"`

	// report version events
	ReportVersionEvents []*ReportVersion `json:"report_version_events"`

	// report pushed timestamp
	// Format: date-time
	UpdateTimestamp strfmt.DateTime `json:"update_timestamp,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this report push event
func (m *ReportPushEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportVersionEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportPushEvent) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_timestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportPushEvent) validateGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *ReportPushEvent) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *ReportPushEvent) validateReportVersionEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportVersionEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ReportVersionEvents); i++ {
		if swag.IsZero(m.ReportVersionEvents[i]) { // not required
			continue
		}

		if m.ReportVersionEvents[i] != nil {
			if err := m.ReportVersionEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report_version_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportPushEvent) validateUpdateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("update_timestamp", "body", "date-time", m.UpdateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportPushEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportPushEvent) UnmarshalBinary(b []byte) error {
	var res ReportPushEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
