// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportVersion report version
// swagger:model ReportVersion
type ReportVersion struct {

	// create timestamp
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creation_timestamp,omitempty"`

	// 1 normal; 0 freeze
	EnableFlag *int8 `json:"enable_flag,omitempty"`

	// event
	Event *Event `json:"event,omitempty"`

	// file name
	FileName string `json:"file_name,omitempty"`

	// directory of report file storage
	Filepath string `json:"filepath,omitempty"`

	// report version id
	ID int64 `json:"id,omitempty"`

	// current version report id of push event
	PushID int64 `json:"push_id,omitempty"`

	// report id
	ReportID int64 `json:"report_id,omitempty"`

	// report name
	ReportName string `json:"report_name,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// report pushed timestamp
	// Format: date-time
	UpdateTimestamp strfmt.DateTime `json:"update_timestamp,omitempty"`

	// user
	User *UserInfo `json:"user,omitempty"`

	// report version
	Version string `json:"version,omitempty"`
}

// Validate validates this report version
func (m *ReportVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportVersion) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_timestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportVersion) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *ReportVersion) validateUpdateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("update_timestamp", "body", "date-time", m.UpdateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportVersion) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportVersion) UnmarshalBinary(b []byte) error {
	var res ReportVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
