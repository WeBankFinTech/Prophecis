// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportBase report base
// swagger:model ReportBase
type ReportBase struct {

	// create timestamp
	// Format: date-time
	CreationTimestamp strfmt.DateTime `json:"creation_timestamp,omitempty"`

	// 1 normal; 0 freeze
	EnableFlag *int8 `json:"enable_flag,omitempty"`

	// group id
	GroupID int64 `json:"group_id,omitempty"`

	// report id
	ID int64 `json:"id,omitempty"`

	// model id
	ModelID int64 `json:"model_id,omitempty"`

	// model version id
	ModelVersionID int64 `json:"model_version_id,omitempty"`

	// latest report version id
	ReportLatestVersionID int64 `json:"report_latest_version_id,omitempty"`

	// report name
	ReportName string `json:"report_name,omitempty"`

	// report pushed timestamp
	// Format: date-time
	UpdateTimestamp strfmt.DateTime `json:"update_timestamp,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this report base
func (m *ReportBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportBase) validateCreationTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_timestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportBase) validateUpdateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("update_timestamp", "body", "date-time", m.UpdateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportBase) UnmarshalBinary(b []byte) error {
	var res ReportBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
