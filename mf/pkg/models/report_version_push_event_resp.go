// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReportVersionPushEventResp report version push event resp
// swagger:model ReportVersionPushEventResp
type ReportVersionPushEventResp struct {

	// events
	Events []*ReportVersionPushEventRespBase `json:"events"`

	// report
	Report *ReportBase `json:"report,omitempty"`

	// report version
	ReportVersion *ReportVersionBase `json:"reportVersion,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this report version push event resp
func (m *ReportVersionPushEventResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportVersionPushEventResp) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportVersionPushEventResp) validateReport(formats strfmt.Registry) error {

	if swag.IsZero(m.Report) { // not required
		return nil
	}

	if m.Report != nil {
		if err := m.Report.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

func (m *ReportVersionPushEventResp) validateReportVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportVersion) { // not required
		return nil
	}

	if m.ReportVersion != nil {
		if err := m.ReportVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reportVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportVersionPushEventResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportVersionPushEventResp) UnmarshalBinary(b []byte) error {
	var res ReportVersionPushEventResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
