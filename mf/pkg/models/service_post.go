// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServicePost service post
// swagger:model ServicePost
type ServicePost struct {

	// Serivce CPU resource.
	// Required: true
	CPU *float64 `json:"cpu"`

	// creation timestamp of service.
	CreationTimestamp string `json:"creation_timestamp,omitempty"`

	// Serivce GPU resource.
	// Required: true
	Gpu *string `json:"gpu"`

	// the group id of this service.
	GroupID int64 `json:"group_id,omitempty"`

	// last update timestamp of this service.
	LastUpdatedTimestamp string `json:"last_updated_timestamp,omitempty"`

	// The location of log path.
	LogPath string `json:"log_path,omitempty"`

	// Service memory resource.
	// Required: true
	Memory *float64 `json:"memory"`

	// Service NameSpace.
	// Required: true
	Namespace *string `json:"namespace"`

	// The location path of the model material.
	Remark string `json:"remark,omitempty"`

	// Service Id.
	ServiceID int64 `json:"service_id,omitempty"`

	// Service Name.
	// Required: true
	ServiceName *string `json:"service_name"`

	// the modelversion id of this service.
	ServicePostModels ServicePostModels `json:"service_post_models,omitempty"`

	// Service Type, Include Single, ABTest, Graph.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this service post
func (m *ServicePost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicePostModels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicePost) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *ServicePost) validateGpu(formats strfmt.Registry) error {

	if err := validate.Required("gpu", "body", m.Gpu); err != nil {
		return err
	}

	return nil
}

func (m *ServicePost) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *ServicePost) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *ServicePost) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("service_name", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *ServicePost) validateServicePostModels(formats strfmt.Registry) error {

	if swag.IsZero(m.ServicePostModels) { // not required
		return nil
	}

	if err := m.ServicePostModels.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("service_post_models")
		}
		return err
	}

	return nil
}

func (m *ServicePost) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServicePost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicePost) UnmarshalBinary(b []byte) error {
	var res ServicePost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
