// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/octet-stream",
    "text/plain; charset=utf-8"
  ],
  "produces": [
    "application/json",
    "application/octet-stream",
    "text/plain; charset=utf-8"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Model Factory Service",
    "title": "mf-server",
    "version": "1.0.0"
  },
  "host": "gateway.mlss.mf",
  "basePath": "/",
  "paths": {
    "/mf/v1/dashboard": {
      "get": {
        "description": "Service Dashborad",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get service's dashborad",
        "operationId": "serviceDashborad",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "entity clusterName",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Service dashboard get failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/image": {
      "post": {
        "description": "Create Image.",
        "tags": [
          "image"
        ],
        "summary": "Create image by given info.",
        "operationId": "createImage",
        "parameters": [
          {
            "description": "The Image Put Request",
            "name": "image",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImagePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/image/{image_id}": {
      "get": {
        "description": "Get ModelVersion.",
        "tags": [
          "image"
        ],
        "summary": "Get the ModelVersion in given model id",
        "operationId": "getImage",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "image_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update Image.",
        "tags": [
          "image"
        ],
        "summary": "Update image by given info",
        "operationId": "updateImage",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "image_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The Image Put Request",
            "name": "image",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImagePutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete Image.",
        "tags": [
          "image"
        ],
        "summary": "Delete the Image in given image id",
        "operationId": "deleteImage",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "image_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/images": {
      "get": {
        "description": "List Image.",
        "tags": [
          "image"
        ],
        "summary": "List Image",
        "operationId": "listImage",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Images"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Images cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/images/{model_version_id}": {
      "get": {
        "description": "List Image By Model Version Id.",
        "tags": [
          "image"
        ],
        "summary": "List Image By Model Version Id",
        "operationId": "listImageByModelVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "model_version_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Images"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Images cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/": {
      "post": {
        "description": "Post Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Create a Model.",
        "operationId": "postModel",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostModelResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/push/{modelId}": {
      "post": {
        "description": "push model by model id",
        "tags": [
          "modelStorage"
        ],
        "summary": "push model by model id",
        "operationId": "pushModelByModelId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "description": "The model push event Request",
            "name": "modelPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/uploadModel": {
      "post": {
        "description": "Upload Model's File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "modelStorage"
        ],
        "summary": "Upload Model",
        "operationId": "uploadModel",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "modelType",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadModelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model upload failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/{modelID}": {
      "get": {
        "description": "Get Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get a Model in the given Model ID.",
        "operationId": "getModel",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Update a Model in the given Model ID",
        "operationId": "updateModel",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelRequest"
            }
          },
          {
            "type": "number",
            "format": "int64",
            "name": "modelID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model update failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Delete a Model in the given Model ID",
        "operationId": "deleteModel",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model delete failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/{modelId}/export": {
      "get": {
        "description": "export Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Export Model",
        "operationId": "exportModel",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model export failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelDownload/{modelId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "modelStorage"
        ],
        "summary": "Download model by model id",
        "operationId": "DownloadModelById",
        "parameters": [
          {
            "type": "string",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelVersion/modelName/{modelName}/groupId/{groupId}/version/{version}": {
      "get": {
        "description": "Get ModelVersion.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the ModelVersion in given model name, group id and versoin.",
        "operationId": "getModelVersionByNameAndVersion",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/getModelVersionResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelVersion/push/{modelVersionId}": {
      "get": {
        "tags": [
          "modelStorage"
        ],
        "summary": "get model version push events list",
        "operationId": "listModelVersionPushEventsByModelVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelVersionId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelVersionPushEventResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "push model by model version id",
        "tags": [
          "modelStorage"
        ],
        "summary": "push model by model version id",
        "operationId": "pushModelByModelVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelVersionId",
            "in": "path",
            "required": true
          },
          {
            "description": "The model push event Request",
            "name": "modelPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelVersionDownload/{modelVersionId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "modelStorage"
        ],
        "summary": "Download model version by model version id",
        "operationId": "DownloadModelVersionById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelVersionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model version download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/models": {
      "get": {
        "description": "Get Models list.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the list of Models",
        "operationId": "getModels",
        "parameters": [
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/models/name/{modelName}/groupId/{groupId}": {
      "get": {
        "description": "Get Models.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get models by model name and group id",
        "operationId": "getModelsByGroupIdAndModelName",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/models/{cluster}": {
      "get": {
        "description": "Get Models list.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the list of Models in the given cluster.",
        "operationId": "getModelsByCluster",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "name": "cluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelsByGroupID/{groupID}": {
      "get": {
        "description": "List Models",
        "tags": [
          "modelStorage"
        ],
        "summary": "List Models By Group Id.",
        "operationId": "listModelsByGroupID",
        "parameters": [
          {
            "type": "string",
            "name": "groupID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelversions/{modelId}": {
      "get": {
        "description": "Get ModelVersion.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the ModelVersion in given model id",
        "operationId": "getModelVersion",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/getModelVersionResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/pushEvent/{eventId}": {
      "get": {
        "description": "get push event",
        "tags": [
          "report"
        ],
        "summary": "get push event by eventId",
        "operationId": "getPushEventById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "report"
        ],
        "summary": "Create report by given info.",
        "operationId": "createReport",
        "parameters": [
          {
            "description": "The report Post Request",
            "name": "report",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportRequestPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostReportResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The report cannot be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/name/{modelName}/version/{modelVersion}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get report by model name and model version",
        "operationId": "getReportByModelNameAndModelVersion",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "modelVersion",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Report"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/push/{reportId}": {
      "post": {
        "description": "push report",
        "tags": [
          "report"
        ],
        "summary": "push report by report id",
        "operationId": "pushReportByReportId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          },
          {
            "description": "The report push event Request",
            "name": "reportPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushReportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/reportDownload/{reportId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "report"
        ],
        "summary": "Download report by report id",
        "operationId": "DownloadReportById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "report download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/reportUpload": {
      "post": {
        "description": "Upload Report's File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "report"
        ],
        "summary": "Upload Report",
        "operationId": "uploadReport",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadReportResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model upload failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/{reportId}": {
      "get": {
        "description": "get report",
        "tags": [
          "report"
        ],
        "summary": "get report by id",
        "operationId": "getReportById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Report"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "delete report",
        "tags": [
          "report"
        ],
        "summary": "delete report by id",
        "operationId": "deleteReportById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The report cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/reportVersion/Push/{reportVersionId}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "get push events list",
        "operationId": "listReportVersionPushEventsByReportVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportVersionId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportVersionPushEventResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "push report by report version id",
        "tags": [
          "report"
        ],
        "summary": "push report by report version id",
        "operationId": "pushReportByReportVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportVersionId",
            "in": "path",
            "required": true
          },
          {
            "description": "The report push event Request",
            "name": "reportPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushReportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/reports": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get reports list",
        "operationId": "listReports",
        "parameters": [
          {
            "type": "string",
            "description": "fuzzy query by model_name, model_version, training_id",
            "name": "queryStr",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReportsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report list fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/reportversions/{reportId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "report"
        ],
        "summary": "get all version of specified report",
        "operationId": "listReportVersionsByReportId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportVersions"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The report cannot be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/result": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "model_result"
        ],
        "summary": "create result",
        "operationId": "createResult",
        "parameters": [
          {
            "description": "The result post request",
            "name": "result",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResultRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The result cannot be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/result/id/{resultId}": {
      "put": {
        "description": "update result",
        "tags": [
          "model_result"
        ],
        "summary": "update result",
        "operationId": "updateResultById",
        "parameters": [
          {
            "description": "The result put request",
            "name": "result",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResultRequest"
            }
          },
          {
            "type": "number",
            "format": "int64",
            "name": "resultId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The result cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "delete result",
        "tags": [
          "model_result"
        ],
        "summary": "delete result by id",
        "operationId": "deleteResultById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "resultId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The result cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/result/{modelName}": {
      "get": {
        "tags": [
          "model_result"
        ],
        "summary": "Get report by model name and model version",
        "operationId": "getResultByModelName",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Results"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Result get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/rmbLog/Download/{eventId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "rmb"
        ],
        "summary": "Download rmb log file by event id",
        "operationId": "DownloadRmbLogByEventId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "report download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service": {
      "post": {
        "description": "Post Service.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Create a Service in the given Namesapce",
        "operationId": "postService",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service/containers/{namespace}/{service_name}": {
      "get": {
        "tags": [
          "container"
        ],
        "summary": "Get Container list by namespace and seldonDeployment",
        "operationId": "listContainer",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "service_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pods"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Container list failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service/{id}": {
      "get": {
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get Service by Service Id",
        "operationId": "getService",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetService"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "modelDeploy"
        ],
        "summary": "Update a Service in the given Namesapce",
        "operationId": "updateService",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The Model Request",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Service put failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "modelDeploy"
        ],
        "summary": "Delete a Service in the given Namesapce",
        "operationId": "deleteService",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service/{service_name}/namespace/{namespace}/container/{container_name}/log": {
      "get": {
        "description": "Get container of service log.",
        "tags": [
          "container"
        ],
        "summary": "Get log of service'container in the given namespace",
        "operationId": "getNamespacedServiceContainerLog",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "service_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "container_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "whether sort by time  in asc, default false (desc).",
            "name": "asc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetServiceContainerLogResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The service container cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/serviceRun": {
      "post": {
        "description": "Run Service.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Run a Service CRD Object.",
        "operationId": "createNamespacedServiceRun",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/serviceStop/{namespace}/{name}/{id}": {
      "get": {
        "description": "Get Services list.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get the list of Services in the given Namespace",
        "operationId": "stopNamespacedService",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/services": {
      "get": {
        "description": "Get Services list.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get the list of Services in the given Namespace",
        "operationId": "listServices.",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Services"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Container": {
      "type": "object",
      "properties": {
        "container_name": {
          "description": "Name for the container.",
          "type": "string"
        },
        "cpu": {
          "description": "CPU.",
          "type": "number",
          "format": "int64"
        },
        "finished_time": {
          "description": "The time that container fineshed to launch.",
          "type": "string"
        },
        "gpu": {
          "description": "GPU.",
          "type": "number",
          "format": "int64"
        },
        "image": {
          "description": "Image's name for the container.",
          "type": "string"
        },
        "image_id": {
          "description": "Image's Id for the container.",
          "type": "string"
        },
        "memory": {
          "description": "Memory size.",
          "type": "string"
        },
        "namespace": {
          "description": "k8s namespaces.",
          "type": "string"
        },
        "pod_name": {
          "description": "Name of pod that this container belong to.",
          "type": "string"
        },
        "started_time": {
          "description": "The time that container started to create.",
          "type": "string"
        },
        "status": {
          "description": "Status of the container.",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "id",
        "file_type",
        "file_id",
        "file_name",
        "fps_file_id",
        "hash_value",
        "params",
        "idc",
        "dcn",
        "status",
        "enable_flag",
        "creation_timestamp",
        "update_timestamp"
      ],
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "dcn": {
          "description": "DCN of RMB",
          "type": "string",
          "format": "string"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "file_id": {
          "description": "report id or model id",
          "type": "integer",
          "format": "int64"
        },
        "file_name": {
          "type": "string",
          "format": "string"
        },
        "file_type": {
          "description": "file type eg:MODEL, DATA",
          "type": "string",
          "format": "string"
        },
        "fps_file_id": {
          "description": "file id from FPS",
          "type": "string",
          "format": "string"
        },
        "hash_value": {
          "description": "hash from FPS",
          "type": "string",
          "format": "string"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "idc": {
          "description": "IDC of RMB",
          "type": "string",
          "format": "string"
        },
        "params": {
          "type": "string",
          "format": "string"
        },
        "rmb_resp_file_name": {
          "type": "string",
          "format": "string"
        },
        "rmb_s3path": {
          "type": "string",
          "format": "string"
        },
        "status": {
          "description": "hash from FPS",
          "type": "string",
          "format": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "string"
        }
      }
    },
    "GetService": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "creation_timestamp": {
          "description": "creation timestamp of service.",
          "type": "string"
        },
        "endpoint_type": {
          "description": "Service's Endpoint Type",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "group_id": {
          "description": "the group id of this service.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "image": {
          "description": "The service's image",
          "type": "string"
        },
        "last_updated_timestamp": {
          "description": "last update timestamp of this service.",
          "type": "string"
        },
        "log_path": {
          "description": "The location of log path.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "modelversion": {
          "description": "models of servier.",
          "$ref": "#/definitions/ServiceModelVersions"
        },
        "namespace": {
          "description": "Service NameSpace.",
          "type": "string"
        },
        "parameters": {
          "description": "models of servier.",
          "$ref": "#/definitions/ModelParametersList"
        },
        "remark": {
          "description": "The location path of the model material.",
          "type": "string"
        },
        "service_name": {
          "description": "Service Name.",
          "type": "string"
        },
        "status": {
          "description": "Service's Status",
          "type": "string"
        },
        "type": {
          "description": "Service Type, Include Single, ABTest, Graph.",
          "type": "string"
        },
        "user_id": {
          "description": "the owner id of this service.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "GetServiceContainerLogResponse": {
      "type": "object",
      "required": [
        "total"
      ],
      "properties": {
        "log_list": {
          "description": "container log info list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceContainerLog"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "description": "Group's cluster name",
          "type": "string"
        },
        "department_id": {
          "description": "Group's department id",
          "type": "string"
        },
        "department_name": {
          "description": "Group's department name",
          "type": "string"
        },
        "group_type": {
          "description": "Group's type",
          "type": "string"
        },
        "id": {
          "description": "Id for the Group",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "name": {
          "description": "Group's name",
          "type": "string"
        },
        "remarks": {
          "description": "Group's remarks",
          "type": "string"
        },
        "rmb_dcn": {
          "type": "string"
        },
        "rmb_idc": {
          "type": "string"
        },
        "service_id": {
          "type": "number",
          "format": "int64"
        },
        "subsystem_id": {
          "description": "Group's subsystem id",
          "type": "number",
          "format": "int64"
        },
        "subsystem_name": {
          "description": "Group's subsystem name",
          "type": "string"
        }
      }
    },
    "Groups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Group"
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Creation timestamp.",
          "type": "string"
        },
        "id": {
          "description": "Image Id.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "image_name": {
          "description": "Image Name.",
          "type": "string"
        },
        "last_updated_timestamp": {
          "description": "Last updated timestame.",
          "type": "string"
        },
        "model_version_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "status": {
          "description": "Image CI Status of Image, contains building, deploying, complete.",
          "type": "string"
        },
        "user_id": {
          "description": "Creation user of this image.",
          "type": "string"
        }
      }
    },
    "ImagePostRequest": {
      "type": "object",
      "properties": {
        "group_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "image_name": {
          "description": "Image Name.",
          "type": "string"
        },
        "model_version_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "remarks": {
          "description": "Remark.",
          "type": "string"
        },
        "user_name": {
          "description": "Creation user of this image.",
          "type": "string"
        }
      }
    },
    "ImagePutRequest": {
      "type": "object",
      "properties": {
        "image_name": {
          "description": "Image Name.",
          "type": "string"
        },
        "model_version_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "remarks": {
          "description": "Remark.",
          "type": "string"
        }
      }
    },
    "Images": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Image"
      }
    },
    "ListReportVersionBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "directory of report file storage",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "report version id",
          "type": "integer",
          "format": "int64"
        },
        "push_id": {
          "description": "current version report id of push event",
          "type": "integer",
          "format": "int64"
        },
        "report": {
          "$ref": "#/definitions/ReportBase"
        },
        "report_id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "report version",
          "type": "string"
        }
      }
    },
    "ListReportVersionResp": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListReportVersionBase"
      }
    },
    "ListReportsResp": {
      "type": "object",
      "properties": {
        "Reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Model": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "enable_flag": {
          "description": "Latest model versions for this model.",
          "type": "integer",
          "format": "int8"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "model_version": {
          "description": "Lastest version",
          "type": "object",
          "$ref": "#/definitions/ModelVersion"
        },
        "modelversions": {
          "description": "models of servier.",
          "$ref": "#/definitions/ModelVersions"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "Update time",
          "type": "string"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "enable_flag": {
          "description": "Latest model versions for this model.",
          "type": "integer",
          "format": "int8"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_latest_version_id": {
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "Update time",
          "type": "string"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelInfo": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_latest_version_id": {
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "model_version": {
          "description": "models of servier.",
          "$ref": "#/definitions/ModelVersionInfo"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "Update time",
          "type": "string"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelParameters": {
      "type": "object",
      "properties": {
        "name": {
          "description": "params name",
          "type": "string"
        },
        "type": {
          "description": "params type, STRING",
          "type": "string"
        },
        "value": {
          "description": "params value",
          "type": "string"
        }
      }
    },
    "ModelParametersList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModelParameters"
      }
    },
    "ModelRequest": {
      "type": "object",
      "properties": {
        "child_path": {
          "description": "S3 path",
          "type": "string"
        },
        "file_name": {
          "description": "File Name",
          "type": "string"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model",
          "type": "string"
        },
        "model_type": {
          "description": "Type for the model",
          "type": "string"
        },
        "model_version": {
          "description": "Lastest version",
          "type": "object",
          "$ref": "#/definitions/ModelVersion"
        },
        "root_path": {
          "description": "S3 path",
          "type": "string"
        },
        "s3_path": {
          "description": "S3 path",
          "type": "string"
        }
      }
    },
    "ModelVersion": {
      "type": "object",
      "required": [
        "filepath",
        "source",
        "version"
      ],
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "params": {
          "type": "string"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionInfo": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionPushEvent": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model": {
          "$ref": "#/definitions/ModelBase"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionPushEventResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelVersionPushEventRespBase"
          }
        },
        "model": {
          "$ref": "#/definitions/ModelBase"
        },
        "model_version": {
          "$ref": "#/definitions/ModelVersionBase"
        },
        "total": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelVersionPushEventRespBase": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/Event"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "ModelVersions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModelVersion"
      }
    },
    "Models": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model"
      }
    },
    "Pod": {
      "type": "object",
      "properties": {
        "containers": {
          "description": "containers in this pod.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Container"
          }
        },
        "message": {
          "description": "The message why pod's status that it is.",
          "type": "string"
        },
        "name": {
          "description": "pod's name",
          "type": "string"
        },
        "namespace": {
          "description": "pod's namespaces",
          "type": "string"
        },
        "reason": {
          "description": "The reason why pod's status that it is.",
          "type": "string"
        },
        "status": {
          "description": "pod's status",
          "type": "string"
        }
      }
    },
    "Pods": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pod"
      }
    },
    "PostModelRequest": {
      "type": "object",
      "required": [
        "group_id",
        "model_name",
        "model_type"
      ],
      "properties": {
        "child_path": {
          "description": "File's child path",
          "type": "string"
        },
        "file_name": {
          "description": "File's name",
          "type": "string"
        },
        "filepath": {
          "description": "directory of file storage",
          "type": "string"
        },
        "group_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_name": {
          "type": "string"
        },
        "model_type": {
          "description": "Type for the model",
          "type": "string"
        },
        "model_version": {
          "description": "model version , eg v1, v2 ...",
          "type": "string"
        },
        "root_path": {
          "description": "File's root path",
          "type": "string"
        },
        "s3_path": {
          "description": "S3Path",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        }
      }
    },
    "PostModelResp": {
      "type": "object",
      "properties": {
        "model_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_version": {
          "type": "string"
        },
        "model_version_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PostReportResp": {
      "type": "object",
      "properties": {
        "report_id": {
          "type": "integer",
          "format": "int64"
        },
        "report_version": {
          "type": "string"
        },
        "report_version_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PushModelRequest": {
      "type": "object",
      "required": [
        "factory_name",
        "model_type",
        "model_usage"
      ],
      "properties": {
        "factory_name": {
          "type": "string"
        },
        "model_type": {
          "type": "string"
        },
        "model_usage": {
          "type": "string"
        }
      }
    },
    "PushReportRequest": {
      "type": "object",
      "required": [
        "factory_name"
      ],
      "properties": {
        "factory_name": {
          "type": "string"
        }
      }
    },
    "Report": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "latest_report_version": {
          "$ref": "#/definitions/ReportVersionBase"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelBase"
        },
        "model_version": {
          "$ref": "#/definitions/ModelVersionBase"
        },
        "report_latest_version_id": {
          "description": "latest report version id",
          "type": "integer",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "group_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "model_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_version_id": {
          "type": "integer",
          "format": "int64"
        },
        "report_latest_version_id": {
          "description": "latest report version id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportPushEvent": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelInfo"
        },
        "push_status": {
          "description": "status of lasted push",
          "type": "string"
        },
        "report_latest_version_id": {
          "description": "latest report version id",
          "type": "integer",
          "format": "int64"
        },
        "report_version_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportVersion"
          }
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportRequestPost": {
      "type": "object",
      "required": [
        "group_id",
        "model_name",
        "model_version",
        "report_name"
      ],
      "properties": {
        "child_path": {
          "description": "File's child path",
          "type": "string"
        },
        "file_name": {
          "description": "File's name",
          "type": "string"
        },
        "group_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_name": {
          "type": "string"
        },
        "model_version": {
          "description": "model version , eg v1, v2 ...",
          "type": "string"
        },
        "report_name": {
          "type": "string"
        },
        "report_version": {
          "description": "if report_id + report_version not exist in report_version table, create report_version",
          "type": "string"
        },
        "root_path": {
          "description": "File's root path",
          "type": "string"
        },
        "s3_path": {
          "type": "string"
        }
      }
    },
    "ReportVersion": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "directory of report file storage",
          "type": "string"
        },
        "id": {
          "description": "report version id",
          "type": "integer",
          "format": "int64"
        },
        "push_id": {
          "description": "current version report id of push event",
          "type": "integer",
          "format": "int64"
        },
        "report_id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "report version",
          "type": "string"
        }
      }
    },
    "ReportVersionBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "directory of report file storage",
          "type": "string"
        },
        "id": {
          "description": "report version id",
          "type": "integer",
          "format": "int64"
        },
        "push_id": {
          "description": "current version report id of push event",
          "type": "integer",
          "format": "int64"
        },
        "report_id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "description": "report version",
          "type": "string"
        }
      }
    },
    "ReportVersionPushEventResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportVersionPushEventRespBase"
          }
        },
        "report": {
          "$ref": "#/definitions/ReportBase"
        },
        "reportVersion": {
          "$ref": "#/definitions/ReportVersionBase"
        },
        "total": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ReportVersionPushEventRespBase": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/Event"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "ReportVersions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportVersion"
      }
    },
    "Reports": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Report"
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelInfo"
        },
        "result_msg": {
          "type": "string"
        },
        "training_id": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "update timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResultRequest": {
      "type": "object",
      "required": [
        "training_id",
        "result_msg"
      ],
      "properties": {
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "model_id": {
          "description": "model id",
          "type": "number",
          "format": "int64"
        },
        "model_version_id": {
          "description": "model version id",
          "type": "number",
          "format": "int64"
        },
        "result_msg": {
          "type": "string"
        },
        "training_id": {
          "type": "string"
        }
      }
    },
    "Results": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Result"
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "creation_timestamp": {
          "description": "creation timestamp of service.",
          "type": "string"
        },
        "endpoint_type": {
          "description": "Endpoint type",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "group_id": {
          "description": "the group id of this service.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "last_updated_timestamp": {
          "description": "last update timestamp of this service.",
          "type": "string"
        },
        "log_path": {
          "description": "The location of log path.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "modelversion": {
          "description": "models of servier.",
          "$ref": "#/definitions/ServiceModelVersions"
        },
        "namespace": {
          "description": "Service NameSpace.",
          "type": "string"
        },
        "remark": {
          "description": "The location path of the model material.",
          "type": "string"
        },
        "service_name": {
          "description": "Service Name.",
          "type": "string"
        },
        "type": {
          "description": "Service Type, Include Single, ABTest, Graph.",
          "type": "string"
        },
        "user_id": {
          "description": "the owner id of this service.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ServiceContainerLog": {
      "type": "object",
      "properties": {
        "log": {
          "type": "string"
        }
      }
    },
    "ServiceModel": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ServiceModelVersion": {
      "type": "object",
      "required": [
        "filepath",
        "source",
        "version"
      ],
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model": {
          "description": "Description of this model_version.",
          "type": "object",
          "$ref": "#/definitions/ServiceModel"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ServiceModelVersions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceModelVersion"
      }
    },
    "ServicePatchRequest": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "model_id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "name": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "namespace": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        }
      }
    },
    "ServicePost": {
      "type": "object",
      "required": [
        "service_name",
        "type",
        "namespace",
        "cpu",
        "gpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "creation_timestamp": {
          "description": "creation timestamp of service.",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "group_id": {
          "description": "the group id of this service.",
          "type": "number",
          "format": "int64"
        },
        "last_updated_timestamp": {
          "description": "last update timestamp of this service.",
          "type": "string"
        },
        "log_path": {
          "description": "The location of log path.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "namespace": {
          "description": "Service NameSpace.",
          "type": "string"
        },
        "remark": {
          "description": "The location path of the model material.",
          "type": "string"
        },
        "service_id": {
          "description": "Service Id.",
          "type": "number",
          "format": "int64"
        },
        "service_name": {
          "description": "Service Name.",
          "type": "string"
        },
        "service_post_models": {
          "description": "the modelversion id of this service.",
          "type": "object",
          "$ref": "#/definitions/ServicePostModels"
        },
        "type": {
          "description": "Service Type, Include Single, ABTest, Graph.",
          "type": "string"
        }
      }
    },
    "ServicePostModel": {
      "type": "object",
      "properties": {
        "endpoint_type": {
          "description": "serivce model name",
          "type": "string"
        },
        "group_name": {
          "description": "serivce model name",
          "type": "string"
        },
        "image": {
          "description": "Custom image",
          "type": "string"
        },
        "model_name": {
          "description": "serivce model name",
          "type": "string"
        },
        "model_type": {
          "description": "serivce model name",
          "type": "string"
        },
        "model_version": {
          "description": "serivce model name",
          "type": "string"
        },
        "modelversion_id": {
          "description": "the modelversion id of this service.",
          "type": "number",
          "format": "int64"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelParameters"
          }
        },
        "source": {
          "description": "model s3 path",
          "type": "string"
        }
      }
    },
    "ServicePostModels": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServicePostModel"
      }
    },
    "ServicePut": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "modelversion": {
          "description": "the modelversion id of this service.",
          "type": "string"
        },
        "modelversion_id": {
          "description": "the modelversion id of this service.",
          "type": "number",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace of this service.",
          "type": "string"
        },
        "remark": {
          "description": "service remark",
          "type": "string"
        },
        "service_id": {
          "description": "the service id of this service.",
          "type": "number",
          "format": "int64"
        },
        "service_name": {
          "description": "the namespace of this service.",
          "type": "string"
        },
        "source": {
          "description": "the modelversion id of this service.",
          "type": "string"
        }
      }
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    },
    "UploadModelResponse": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "s3Path": {
          "description": "S3 Path",
          "type": "string"
        }
      }
    },
    "UploadReportResponse": {
      "type": "object",
      "properties": {
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "type": "string"
        },
        "s3Path": {
          "description": "S3 Path",
          "type": "string"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "gid": {
          "type": "number",
          "format": "int64"
        },
        "guid_check": {
          "type": "integer",
          "format": "int8"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "remarks": {
          "type": "string"
        },
        "uid": {
          "type": "number",
          "format": "int64"
        },
        "user_type": {
          "type": "string"
        }
      }
    },
    "getModelVersionResp": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/getModelVersionRespBase"
      }
    },
    "getModelVersionRespBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelBase"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "params": {
          "type": "string"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "description": "Basic Athentication credentials for using the API",
      "type": "basic"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/octet-stream",
    "text/plain; charset=utf-8"
  ],
  "produces": [
    "application/json",
    "application/octet-stream",
    "text/plain; charset=utf-8"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Model Factory Service",
    "title": "mf-server",
    "version": "1.0.0"
  },
  "host": "gateway.mlss.mf",
  "basePath": "/",
  "paths": {
    "/mf/v1/dashboard": {
      "get": {
        "description": "Service Dashborad",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get service's dashborad",
        "operationId": "serviceDashborad",
        "parameters": [
          {
            "type": "string",
            "default": "",
            "description": "entity clusterName",
            "name": "clusterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Service dashboard get failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/image": {
      "post": {
        "description": "Create Image.",
        "tags": [
          "image"
        ],
        "summary": "Create image by given info.",
        "operationId": "createImage",
        "parameters": [
          {
            "description": "The Image Put Request",
            "name": "image",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImagePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/image/{image_id}": {
      "get": {
        "description": "Get ModelVersion.",
        "tags": [
          "image"
        ],
        "summary": "Get the ModelVersion in given model id",
        "operationId": "getImage",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "image_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update Image.",
        "tags": [
          "image"
        ],
        "summary": "Update image by given info",
        "operationId": "updateImage",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "image_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The Image Put Request",
            "name": "image",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImagePutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete Image.",
        "tags": [
          "image"
        ],
        "summary": "Delete the Image in given image id",
        "operationId": "deleteImage",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "image_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/images": {
      "get": {
        "description": "List Image.",
        "tags": [
          "image"
        ],
        "summary": "List Image",
        "operationId": "listImage",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Images"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Images cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/images/{model_version_id}": {
      "get": {
        "description": "List Image By Model Version Id.",
        "tags": [
          "image"
        ],
        "summary": "List Image By Model Version Id",
        "operationId": "listImageByModelVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "model_version_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Images"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Images cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/": {
      "post": {
        "description": "Post Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Create a Model.",
        "operationId": "postModel",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostModelResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/push/{modelId}": {
      "post": {
        "description": "push model by model id",
        "tags": [
          "modelStorage"
        ],
        "summary": "push model by model id",
        "operationId": "pushModelByModelId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "description": "The model push event Request",
            "name": "modelPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/uploadModel": {
      "post": {
        "description": "Upload Model's File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "modelStorage"
        ],
        "summary": "Upload Model",
        "operationId": "uploadModel",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "modelType",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadModelResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model upload failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/{modelID}": {
      "get": {
        "description": "Get Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get a Model in the given Model ID.",
        "operationId": "getModel",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Update a Model in the given Model ID",
        "operationId": "updateModel",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelRequest"
            }
          },
          {
            "type": "number",
            "format": "int64",
            "name": "modelID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model update failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Delete a Model in the given Model ID",
        "operationId": "deleteModel",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model delete failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/model/{modelId}/export": {
      "get": {
        "description": "export Model.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Export Model",
        "operationId": "exportModel",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Model",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model export failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelDownload/{modelId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "modelStorage"
        ],
        "summary": "Download model by model id",
        "operationId": "DownloadModelById",
        "parameters": [
          {
            "type": "string",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelVersion/modelName/{modelName}/groupId/{groupId}/version/{version}": {
      "get": {
        "description": "Get ModelVersion.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the ModelVersion in given model name, group id and versoin.",
        "operationId": "getModelVersionByNameAndVersion",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/getModelVersionResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelVersion/push/{modelVersionId}": {
      "get": {
        "tags": [
          "modelStorage"
        ],
        "summary": "get model version push events list",
        "operationId": "listModelVersionPushEventsByModelVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelVersionId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelVersionPushEventResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "push model by model version id",
        "tags": [
          "modelStorage"
        ],
        "summary": "push model by model version id",
        "operationId": "pushModelByModelVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelVersionId",
            "in": "path",
            "required": true
          },
          {
            "description": "The model push event Request",
            "name": "modelPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushModelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelVersionDownload/{modelVersionId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "modelStorage"
        ],
        "summary": "Download model version by model version id",
        "operationId": "DownloadModelVersionById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelVersionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model version download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/models": {
      "get": {
        "description": "Get Models list.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the list of Models",
        "operationId": "getModels",
        "parameters": [
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/models/name/{modelName}/groupId/{groupId}": {
      "get": {
        "description": "Get Models.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get models by model name and group id",
        "operationId": "getModelsByGroupIdAndModelName",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/models/{cluster}": {
      "get": {
        "description": "Get Models list.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the list of Models in the given cluster.",
        "operationId": "getModelsByCluster",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "name": "cluster",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelsByGroupID/{groupID}": {
      "get": {
        "description": "List Models",
        "tags": [
          "modelStorage"
        ],
        "summary": "List Models By Group Id.",
        "operationId": "listModelsByGroupID",
        "parameters": [
          {
            "type": "string",
            "name": "groupID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/modelversions/{modelId}": {
      "get": {
        "description": "Get ModelVersion.",
        "tags": [
          "modelStorage"
        ],
        "summary": "Get the ModelVersion in given model id",
        "operationId": "getModelVersion",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/getModelVersionResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/pushEvent/{eventId}": {
      "get": {
        "description": "get push event",
        "tags": [
          "report"
        ],
        "summary": "get push event by eventId",
        "operationId": "getPushEventById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "report"
        ],
        "summary": "Create report by given info.",
        "operationId": "createReport",
        "parameters": [
          {
            "description": "The report Post Request",
            "name": "report",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportRequestPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostReportResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The report cannot be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/name/{modelName}/version/{modelVersion}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get report by model name and model version",
        "operationId": "getReportByModelNameAndModelVersion",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "modelVersion",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Report"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/push/{reportId}": {
      "post": {
        "description": "push report",
        "tags": [
          "report"
        ],
        "summary": "push report by report id",
        "operationId": "pushReportByReportId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          },
          {
            "description": "The report push event Request",
            "name": "reportPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushReportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/reportDownload/{reportId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "report"
        ],
        "summary": "Download report by report id",
        "operationId": "DownloadReportById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "report download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/reportUpload": {
      "post": {
        "description": "Upload Report's File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "report"
        ],
        "summary": "Upload Report",
        "operationId": "uploadReport",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadReportResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model upload failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/report/{reportId}": {
      "get": {
        "description": "get report",
        "tags": [
          "report"
        ],
        "summary": "get report by id",
        "operationId": "getReportById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Report"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "delete report",
        "tags": [
          "report"
        ],
        "summary": "delete report by id",
        "operationId": "deleteReportById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The report cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/reportVersion/Push/{reportVersionId}": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "get push events list",
        "operationId": "listReportVersionPushEventsByReportVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportVersionId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "format": "int64",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportVersionPushEventResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "push report by report version id",
        "tags": [
          "report"
        ],
        "summary": "push report by report version id",
        "operationId": "pushReportByReportVersionId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportVersionId",
            "in": "path",
            "required": true
          },
          {
            "description": "The report push event Request",
            "name": "reportPushEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushReportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report push fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/reports": {
      "get": {
        "tags": [
          "report"
        ],
        "summary": "Get reports list",
        "operationId": "listReports",
        "parameters": [
          {
            "type": "string",
            "description": "fuzzy query by model_name, model_version, training_id",
            "name": "queryStr",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListReportsResp"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Report list fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/reportversions/{reportId}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "report"
        ],
        "summary": "get all version of specified report",
        "operationId": "listReportVersionsByReportId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportVersions"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The report cannot be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/result": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "model_result"
        ],
        "summary": "create result",
        "operationId": "createResult",
        "parameters": [
          {
            "description": "The result post request",
            "name": "result",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResultRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The result cannot be created",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/result/id/{resultId}": {
      "put": {
        "description": "update result",
        "tags": [
          "model_result"
        ],
        "summary": "update result",
        "operationId": "updateResultById",
        "parameters": [
          {
            "description": "The result put request",
            "name": "result",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResultRequest"
            }
          },
          {
            "type": "number",
            "format": "int64",
            "name": "resultId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The result cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "delete result",
        "tags": [
          "model_result"
        ],
        "summary": "delete result by id",
        "operationId": "deleteResultById",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "resultId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The result cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/result/{modelName}": {
      "get": {
        "tags": [
          "model_result"
        ],
        "summary": "Get report by model name and model version",
        "operationId": "getResultByModelName",
        "parameters": [
          {
            "type": "string",
            "name": "modelName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Results"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Result get fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/rmbLog/Download/{eventId}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "rmb"
        ],
        "summary": "Download rmb log file by event id",
        "operationId": "DownloadRmbLogByEventId",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "eventId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "report download fail",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service": {
      "post": {
        "description": "Post Service.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Create a Service in the given Namesapce",
        "operationId": "postService",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service/containers/{namespace}/{service_name}": {
      "get": {
        "tags": [
          "container"
        ],
        "summary": "Get Container list by namespace and seldonDeployment",
        "operationId": "listContainer",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "service_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pods"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Container list failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service/{id}": {
      "get": {
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get Service by Service Id",
        "operationId": "getService",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetService"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "modelDeploy"
        ],
        "summary": "Update a Service in the given Namesapce",
        "operationId": "updateService",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The Model Request",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Service put failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "modelDeploy"
        ],
        "summary": "Delete a Service in the given Namesapce",
        "operationId": "deleteService",
        "parameters": [
          {
            "type": "number",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/service/{service_name}/namespace/{namespace}/container/{container_name}/log": {
      "get": {
        "description": "Get container of service log.",
        "tags": [
          "container"
        ],
        "summary": "Get log of service'container in the given namespace",
        "operationId": "getNamespacedServiceContainerLog",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "service_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "container_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "whether sort by time  in asc, default false (desc).",
            "name": "asc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetServiceContainerLogResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The service container cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/serviceRun": {
      "post": {
        "description": "Run Service.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Run a Service CRD Object.",
        "operationId": "createNamespacedServiceRun",
        "parameters": [
          {
            "description": "The Model Request",
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Model create failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/serviceStop/{namespace}/{name}/{id}": {
      "get": {
        "description": "Get Services list.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get the list of Services in the given Namespace",
        "operationId": "stopNamespacedService",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/mf/v1/services": {
      "get": {
        "description": "Get Services list.",
        "tags": [
          "modelDeploy"
        ],
        "summary": "Get the list of Services in the given Namespace",
        "operationId": "listServices.",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "page number.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "entity number per page.",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "name": "query_str",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Services"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The Models cannot be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Container": {
      "type": "object",
      "properties": {
        "container_name": {
          "description": "Name for the container.",
          "type": "string"
        },
        "cpu": {
          "description": "CPU.",
          "type": "number",
          "format": "int64"
        },
        "finished_time": {
          "description": "The time that container fineshed to launch.",
          "type": "string"
        },
        "gpu": {
          "description": "GPU.",
          "type": "number",
          "format": "int64"
        },
        "image": {
          "description": "Image's name for the container.",
          "type": "string"
        },
        "image_id": {
          "description": "Image's Id for the container.",
          "type": "string"
        },
        "memory": {
          "description": "Memory size.",
          "type": "string"
        },
        "namespace": {
          "description": "k8s namespaces.",
          "type": "string"
        },
        "pod_name": {
          "description": "Name of pod that this container belong to.",
          "type": "string"
        },
        "started_time": {
          "description": "The time that container started to create.",
          "type": "string"
        },
        "status": {
          "description": "Status of the container.",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "id",
        "file_type",
        "file_id",
        "file_name",
        "fps_file_id",
        "hash_value",
        "params",
        "idc",
        "dcn",
        "status",
        "enable_flag",
        "creation_timestamp",
        "update_timestamp"
      ],
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "dcn": {
          "description": "DCN of RMB",
          "type": "string",
          "format": "string"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "file_id": {
          "description": "report id or model id",
          "type": "integer",
          "format": "int64"
        },
        "file_name": {
          "type": "string",
          "format": "string"
        },
        "file_type": {
          "description": "file type eg:MODEL, DATA",
          "type": "string",
          "format": "string"
        },
        "fps_file_id": {
          "description": "file id from FPS",
          "type": "string",
          "format": "string"
        },
        "hash_value": {
          "description": "hash from FPS",
          "type": "string",
          "format": "string"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "idc": {
          "description": "IDC of RMB",
          "type": "string",
          "format": "string"
        },
        "params": {
          "type": "string",
          "format": "string"
        },
        "rmb_resp_file_name": {
          "type": "string",
          "format": "string"
        },
        "rmb_s3path": {
          "type": "string",
          "format": "string"
        },
        "status": {
          "description": "hash from FPS",
          "type": "string",
          "format": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "string"
        }
      }
    },
    "GetService": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "creation_timestamp": {
          "description": "creation timestamp of service.",
          "type": "string"
        },
        "endpoint_type": {
          "description": "Service's Endpoint Type",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "group_id": {
          "description": "the group id of this service.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "image": {
          "description": "The service's image",
          "type": "string"
        },
        "last_updated_timestamp": {
          "description": "last update timestamp of this service.",
          "type": "string"
        },
        "log_path": {
          "description": "The location of log path.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "modelversion": {
          "description": "models of servier.",
          "$ref": "#/definitions/ServiceModelVersions"
        },
        "namespace": {
          "description": "Service NameSpace.",
          "type": "string"
        },
        "parameters": {
          "description": "models of servier.",
          "$ref": "#/definitions/ModelParametersList"
        },
        "remark": {
          "description": "The location path of the model material.",
          "type": "string"
        },
        "service_name": {
          "description": "Service Name.",
          "type": "string"
        },
        "status": {
          "description": "Service's Status",
          "type": "string"
        },
        "type": {
          "description": "Service Type, Include Single, ABTest, Graph.",
          "type": "string"
        },
        "user_id": {
          "description": "the owner id of this service.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "GetServiceContainerLogResponse": {
      "type": "object",
      "required": [
        "total"
      ],
      "properties": {
        "log_list": {
          "description": "container log info list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceContainerLog"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "description": "Group's cluster name",
          "type": "string"
        },
        "department_id": {
          "description": "Group's department id",
          "type": "string"
        },
        "department_name": {
          "description": "Group's department name",
          "type": "string"
        },
        "group_type": {
          "description": "Group's type",
          "type": "string"
        },
        "id": {
          "description": "Id for the Group",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "name": {
          "description": "Group's name",
          "type": "string"
        },
        "remarks": {
          "description": "Group's remarks",
          "type": "string"
        },
        "rmb_dcn": {
          "type": "string"
        },
        "rmb_idc": {
          "type": "string"
        },
        "service_id": {
          "type": "number",
          "format": "int64"
        },
        "subsystem_id": {
          "description": "Group's subsystem id",
          "type": "number",
          "format": "int64"
        },
        "subsystem_name": {
          "description": "Group's subsystem name",
          "type": "string"
        }
      }
    },
    "Groups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Group"
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Creation timestamp.",
          "type": "string"
        },
        "id": {
          "description": "Image Id.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "image_name": {
          "description": "Image Name.",
          "type": "string"
        },
        "last_updated_timestamp": {
          "description": "Last updated timestame.",
          "type": "string"
        },
        "model_version_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "status": {
          "description": "Image CI Status of Image, contains building, deploying, complete.",
          "type": "string"
        },
        "user_id": {
          "description": "Creation user of this image.",
          "type": "string"
        }
      }
    },
    "ImagePostRequest": {
      "type": "object",
      "properties": {
        "group_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "image_name": {
          "description": "Image Name.",
          "type": "string"
        },
        "model_version_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "remarks": {
          "description": "Remark.",
          "type": "string"
        },
        "user_name": {
          "description": "Creation user of this image.",
          "type": "string"
        }
      }
    },
    "ImagePutRequest": {
      "type": "object",
      "properties": {
        "image_name": {
          "description": "Image Name.",
          "type": "string"
        },
        "model_version_id": {
          "description": "Model Version id.",
          "type": "number",
          "format": "int64"
        },
        "remarks": {
          "description": "Remark.",
          "type": "string"
        }
      }
    },
    "Images": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Image"
      }
    },
    "ListReportVersionBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "directory of report file storage",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "report version id",
          "type": "integer",
          "format": "int64"
        },
        "push_id": {
          "description": "current version report id of push event",
          "type": "integer",
          "format": "int64"
        },
        "report": {
          "$ref": "#/definitions/ReportBase"
        },
        "report_id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "report version",
          "type": "string"
        }
      }
    },
    "ListReportVersionResp": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ListReportVersionBase"
      }
    },
    "ListReportsResp": {
      "type": "object",
      "properties": {
        "Reports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Model": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "enable_flag": {
          "description": "Latest model versions for this model.",
          "type": "integer",
          "format": "int8"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "model_version": {
          "description": "Lastest version",
          "type": "object",
          "$ref": "#/definitions/ModelVersion"
        },
        "modelversions": {
          "description": "models of servier.",
          "$ref": "#/definitions/ModelVersions"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "Update time",
          "type": "string"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "enable_flag": {
          "description": "Latest model versions for this model.",
          "type": "integer",
          "format": "int8"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_latest_version_id": {
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "Update time",
          "type": "string"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelInfo": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_latest_version_id": {
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "model_version": {
          "description": "models of servier.",
          "$ref": "#/definitions/ModelVersionInfo"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "Update time",
          "type": "string"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelParameters": {
      "type": "object",
      "properties": {
        "name": {
          "description": "params name",
          "type": "string"
        },
        "type": {
          "description": "params type, STRING",
          "type": "string"
        },
        "value": {
          "description": "params value",
          "type": "string"
        }
      }
    },
    "ModelParametersList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModelParameters"
      }
    },
    "ModelRequest": {
      "type": "object",
      "properties": {
        "child_path": {
          "description": "S3 path",
          "type": "string"
        },
        "file_name": {
          "description": "File Name",
          "type": "string"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model",
          "type": "string"
        },
        "model_type": {
          "description": "Type for the model",
          "type": "string"
        },
        "model_version": {
          "description": "Lastest version",
          "type": "object",
          "$ref": "#/definitions/ModelVersion"
        },
        "root_path": {
          "description": "S3 path",
          "type": "string"
        },
        "s3_path": {
          "description": "S3 path",
          "type": "string"
        }
      }
    },
    "ModelVersion": {
      "type": "object",
      "required": [
        "filepath",
        "source",
        "version"
      ],
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "params": {
          "type": "string"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionInfo": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionPushEvent": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model": {
          "$ref": "#/definitions/ModelBase"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ModelVersionPushEventResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelVersionPushEventRespBase"
          }
        },
        "model": {
          "$ref": "#/definitions/ModelBase"
        },
        "model_version": {
          "$ref": "#/definitions/ModelVersionBase"
        },
        "total": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ModelVersionPushEventRespBase": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/Event"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "ModelVersions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModelVersion"
      }
    },
    "Models": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model"
      }
    },
    "Pod": {
      "type": "object",
      "properties": {
        "containers": {
          "description": "containers in this pod.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Container"
          }
        },
        "message": {
          "description": "The message why pod's status that it is.",
          "type": "string"
        },
        "name": {
          "description": "pod's name",
          "type": "string"
        },
        "namespace": {
          "description": "pod's namespaces",
          "type": "string"
        },
        "reason": {
          "description": "The reason why pod's status that it is.",
          "type": "string"
        },
        "status": {
          "description": "pod's status",
          "type": "string"
        }
      }
    },
    "Pods": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pod"
      }
    },
    "PostModelRequest": {
      "type": "object",
      "required": [
        "group_id",
        "model_name",
        "model_type"
      ],
      "properties": {
        "child_path": {
          "description": "File's child path",
          "type": "string"
        },
        "file_name": {
          "description": "File's name",
          "type": "string"
        },
        "filepath": {
          "description": "directory of file storage",
          "type": "string"
        },
        "group_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_name": {
          "type": "string"
        },
        "model_type": {
          "description": "Type for the model",
          "type": "string"
        },
        "model_version": {
          "description": "model version , eg v1, v2 ...",
          "type": "string"
        },
        "root_path": {
          "description": "File's root path",
          "type": "string"
        },
        "s3_path": {
          "description": "S3Path",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        }
      }
    },
    "PostModelResp": {
      "type": "object",
      "properties": {
        "model_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_version": {
          "type": "string"
        },
        "model_version_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PostReportResp": {
      "type": "object",
      "properties": {
        "report_id": {
          "type": "integer",
          "format": "int64"
        },
        "report_version": {
          "type": "string"
        },
        "report_version_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PushModelRequest": {
      "type": "object",
      "required": [
        "factory_name",
        "model_type",
        "model_usage"
      ],
      "properties": {
        "factory_name": {
          "type": "string"
        },
        "model_type": {
          "type": "string"
        },
        "model_usage": {
          "type": "string"
        }
      }
    },
    "PushReportRequest": {
      "type": "object",
      "required": [
        "factory_name"
      ],
      "properties": {
        "factory_name": {
          "type": "string"
        }
      }
    },
    "Report": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "latest_report_version": {
          "$ref": "#/definitions/ReportVersionBase"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelBase"
        },
        "model_version": {
          "$ref": "#/definitions/ModelVersionBase"
        },
        "report_latest_version_id": {
          "description": "latest report version id",
          "type": "integer",
          "format": "int64"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "group_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "model_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_version_id": {
          "type": "integer",
          "format": "int64"
        },
        "report_latest_version_id": {
          "description": "latest report version id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportPushEvent": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelInfo"
        },
        "push_status": {
          "description": "status of lasted push",
          "type": "string"
        },
        "report_latest_version_id": {
          "description": "latest report version id",
          "type": "integer",
          "format": "int64"
        },
        "report_version_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportVersion"
          }
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ReportRequestPost": {
      "type": "object",
      "required": [
        "group_id",
        "model_name",
        "model_version",
        "report_name"
      ],
      "properties": {
        "child_path": {
          "description": "File's child path",
          "type": "string"
        },
        "file_name": {
          "description": "File's name",
          "type": "string"
        },
        "group_id": {
          "type": "integer",
          "format": "int64"
        },
        "model_name": {
          "type": "string"
        },
        "model_version": {
          "description": "model version , eg v1, v2 ...",
          "type": "string"
        },
        "report_name": {
          "type": "string"
        },
        "report_version": {
          "description": "if report_id + report_version not exist in report_version table, create report_version",
          "type": "string"
        },
        "root_path": {
          "description": "File's root path",
          "type": "string"
        },
        "s3_path": {
          "type": "string"
        }
      }
    },
    "ReportVersion": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "event": {
          "$ref": "#/definitions/Event"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "directory of report file storage",
          "type": "string"
        },
        "id": {
          "description": "report version id",
          "type": "integer",
          "format": "int64"
        },
        "push_id": {
          "description": "current version report id of push event",
          "type": "integer",
          "format": "int64"
        },
        "report_id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "report version",
          "type": "string"
        }
      }
    },
    "ReportVersionBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "description": "1 normal; 0 freeze",
          "type": "integer",
          "format": "int8",
          "default": 1
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "directory of report file storage",
          "type": "string"
        },
        "id": {
          "description": "report version id",
          "type": "integer",
          "format": "int64"
        },
        "push_id": {
          "description": "current version report id of push event",
          "type": "integer",
          "format": "int64"
        },
        "report_id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "report_name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "report pushed timestamp",
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "description": "report version",
          "type": "string"
        }
      }
    },
    "ReportVersionPushEventResp": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportVersionPushEventRespBase"
          }
        },
        "report": {
          "$ref": "#/definitions/ReportBase"
        },
        "reportVersion": {
          "$ref": "#/definitions/ReportVersionBase"
        },
        "total": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ReportVersionPushEventRespBase": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/Event"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "ReportVersions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReportVersion"
      }
    },
    "Reports": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Report"
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "create timestamp",
          "type": "string",
          "format": "date-time"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "id": {
          "description": "report id",
          "type": "integer",
          "format": "int64"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelInfo"
        },
        "result_msg": {
          "type": "string"
        },
        "training_id": {
          "type": "string"
        },
        "update_timestamp": {
          "description": "update timestamp",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResultRequest": {
      "type": "object",
      "required": [
        "training_id",
        "result_msg"
      ],
      "properties": {
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "model_id": {
          "description": "model id",
          "type": "number",
          "format": "int64"
        },
        "model_version_id": {
          "description": "model version id",
          "type": "number",
          "format": "int64"
        },
        "result_msg": {
          "type": "string"
        },
        "training_id": {
          "type": "string"
        }
      }
    },
    "Results": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Result"
      }
    },
    "Service": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "creation_timestamp": {
          "description": "creation timestamp of service.",
          "type": "string"
        },
        "endpoint_type": {
          "description": "Endpoint type",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "group_id": {
          "description": "the group id of this service.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "last_updated_timestamp": {
          "description": "last update timestamp of this service.",
          "type": "string"
        },
        "log_path": {
          "description": "The location of log path.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "modelversion": {
          "description": "models of servier.",
          "$ref": "#/definitions/ServiceModelVersions"
        },
        "namespace": {
          "description": "Service NameSpace.",
          "type": "string"
        },
        "remark": {
          "description": "The location path of the model material.",
          "type": "string"
        },
        "service_name": {
          "description": "Service Name.",
          "type": "string"
        },
        "type": {
          "description": "Service Type, Include Single, ABTest, Graph.",
          "type": "string"
        },
        "user_id": {
          "description": "the owner id of this service.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ServiceContainerLog": {
      "type": "object",
      "properties": {
        "log": {
          "type": "string"
        }
      }
    },
    "ServiceModel": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "string"
        },
        "group_id": {
          "description": "Group Id of User.",
          "type": "number",
          "format": "int64"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "model_name": {
          "description": "Name for the model.",
          "type": "string"
        },
        "model_type": {
          "description": "type of model, eg. tensorflow, sklearn, xgboost",
          "type": "string"
        },
        "position": {
          "description": "Timestamp recorded when metadata for this model was last updated.",
          "type": "integer"
        },
        "reamrk": {
          "description": "Description of this model",
          "type": "string"
        },
        "service_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        },
        "user_id": {
          "description": "User that created this model.",
          "type": "number",
          "format": "int64"
        }
      }
    },
    "ServiceModelVersion": {
      "type": "object",
      "required": [
        "filepath",
        "source",
        "version"
      ],
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model": {
          "description": "Description of this model_version.",
          "type": "object",
          "$ref": "#/definitions/ServiceModel"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    },
    "ServiceModelVersions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceModelVersion"
      }
    },
    "ServicePatchRequest": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "model_id": {
          "description": "Id for the Service.",
          "type": "number",
          "format": "int64"
        },
        "name": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "namespace": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        }
      }
    },
    "ServicePost": {
      "type": "object",
      "required": [
        "service_name",
        "type",
        "namespace",
        "cpu",
        "gpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "creation_timestamp": {
          "description": "creation timestamp of service.",
          "type": "string"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "group_id": {
          "description": "the group id of this service.",
          "type": "number",
          "format": "int64"
        },
        "last_updated_timestamp": {
          "description": "last update timestamp of this service.",
          "type": "string"
        },
        "log_path": {
          "description": "The location of log path.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "namespace": {
          "description": "Service NameSpace.",
          "type": "string"
        },
        "remark": {
          "description": "The location path of the model material.",
          "type": "string"
        },
        "service_id": {
          "description": "Service Id.",
          "type": "number",
          "format": "int64"
        },
        "service_name": {
          "description": "Service Name.",
          "type": "string"
        },
        "service_post_models": {
          "description": "the modelversion id of this service.",
          "type": "object",
          "$ref": "#/definitions/ServicePostModels"
        },
        "type": {
          "description": "Service Type, Include Single, ABTest, Graph.",
          "type": "string"
        }
      }
    },
    "ServicePostModel": {
      "type": "object",
      "properties": {
        "endpoint_type": {
          "description": "serivce model name",
          "type": "string"
        },
        "group_name": {
          "description": "serivce model name",
          "type": "string"
        },
        "image": {
          "description": "Custom image",
          "type": "string"
        },
        "model_name": {
          "description": "serivce model name",
          "type": "string"
        },
        "model_type": {
          "description": "serivce model name",
          "type": "string"
        },
        "model_version": {
          "description": "serivce model name",
          "type": "string"
        },
        "modelversion_id": {
          "description": "the modelversion id of this service.",
          "type": "number",
          "format": "int64"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelParameters"
          }
        },
        "source": {
          "description": "model s3 path",
          "type": "string"
        }
      }
    },
    "ServicePostModels": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServicePostModel"
      }
    },
    "ServicePut": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Serivce CPU resource.",
          "type": "number",
          "format": "double"
        },
        "gpu": {
          "description": "Serivce GPU resource.",
          "type": "string"
        },
        "memory": {
          "description": "Service memory resource.",
          "type": "number",
          "format": "double"
        },
        "modelversion": {
          "description": "the modelversion id of this service.",
          "type": "string"
        },
        "modelversion_id": {
          "description": "the modelversion id of this service.",
          "type": "number",
          "format": "int64"
        },
        "namespace": {
          "description": "the namespace of this service.",
          "type": "string"
        },
        "remark": {
          "description": "service remark",
          "type": "string"
        },
        "service_id": {
          "description": "the service id of this service.",
          "type": "number",
          "format": "int64"
        },
        "service_name": {
          "description": "the namespace of this service.",
          "type": "string"
        },
        "source": {
          "description": "the modelversion id of this service.",
          "type": "string"
        }
      }
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    },
    "UploadModelResponse": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "s3Path": {
          "description": "S3 Path",
          "type": "string"
        }
      }
    },
    "UploadReportResponse": {
      "type": "object",
      "properties": {
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "type": "string"
        },
        "s3Path": {
          "description": "S3 Path",
          "type": "string"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "gid": {
          "type": "number",
          "format": "int64"
        },
        "guid_check": {
          "type": "integer",
          "format": "int8"
        },
        "id": {
          "description": "id for the model.",
          "type": "number",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "remarks": {
          "type": "string"
        },
        "uid": {
          "type": "number",
          "format": "int64"
        },
        "user_type": {
          "type": "string"
        }
      }
    },
    "getModelVersionResp": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/getModelVersionRespBase"
      }
    },
    "getModelVersionRespBase": {
      "type": "object",
      "properties": {
        "creation_timestamp": {
          "description": "Timestamp recorded when this model_version was created.",
          "type": "string"
        },
        "enable_flag": {
          "type": "integer",
          "format": "int8"
        },
        "file_name": {
          "type": "string"
        },
        "filepath": {
          "description": "Running status of this model_version.",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "id": {
          "description": "Id for the ModelVersion.",
          "type": "number",
          "format": "int64",
          "readOnly": true
        },
        "latest_flag": {
          "description": "Timestamp recorded when metadata for this model_version was last updated.",
          "type": "integer"
        },
        "model": {
          "description": "model information",
          "$ref": "#/definitions/ModelBase"
        },
        "model_id": {
          "description": "Description of this model_version.",
          "type": "number",
          "format": "int64"
        },
        "params": {
          "type": "string"
        },
        "push_id": {
          "type": "number",
          "format": "int64"
        },
        "push_timestamp": {
          "description": "Timestamp pushed.",
          "type": "string"
        },
        "source": {
          "description": "User that created this model_version.",
          "type": "string"
        },
        "training_flag": {
          "description": "The flag that whether generated by model operator.",
          "type": "number",
          "format": "int8"
        },
        "training_id": {
          "description": "The id of training",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        },
        "version": {
          "description": "Model’s version number.",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "description": "Basic Athentication credentials for using the API",
      "type": "basic"
    }
  }
}`))
}
