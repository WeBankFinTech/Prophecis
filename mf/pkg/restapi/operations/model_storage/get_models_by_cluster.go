// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetModelsByClusterHandlerFunc turns a function with the right signature into a get models by cluster handler
type GetModelsByClusterHandlerFunc func(GetModelsByClusterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetModelsByClusterHandlerFunc) Handle(params GetModelsByClusterParams) middleware.Responder {
	return fn(params)
}

// GetModelsByClusterHandler interface for that can handle valid get models by cluster params
type GetModelsByClusterHandler interface {
	Handle(GetModelsByClusterParams) middleware.Responder
}

// NewGetModelsByCluster creates a new http.Handler for the get models by cluster operation
func NewGetModelsByCluster(ctx *middleware.Context, handler GetModelsByClusterHandler) *GetModelsByCluster {
	return &GetModelsByCluster{Context: ctx, Handler: handler}
}

/*GetModelsByCluster swagger:route GET /mf/v1/models/{cluster} modelStorage getModelsByCluster

Get the list of Models in the given cluster.

Get Models list.

*/
type GetModelsByCluster struct {
	Context *middleware.Context
	Handler GetModelsByClusterHandler
}

func (o *GetModelsByCluster) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetModelsByClusterParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
