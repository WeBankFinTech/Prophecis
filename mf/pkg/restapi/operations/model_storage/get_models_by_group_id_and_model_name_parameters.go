// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetModelsByGroupIDAndModelNameParams creates a new GetModelsByGroupIDAndModelNameParams object
// no default values defined in spec.
func NewGetModelsByGroupIDAndModelNameParams() GetModelsByGroupIDAndModelNameParams {

	return GetModelsByGroupIDAndModelNameParams{}
}

// GetModelsByGroupIDAndModelNameParams contains all the bound params for the get models by group Id and model name operation
// typically these are obtained from a http.Request
//
// swagger:parameters getModelsByGroupIdAndModelName
type GetModelsByGroupIDAndModelNameParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	CurrentPage *int64
	/*
	  Required: true
	  In: path
	*/
	GroupID string
	/*
	  Required: true
	  In: path
	*/
	ModelName string
	/*
	  In: query
	*/
	PageSize *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetModelsByGroupIDAndModelNameParams() beforehand.
func (o *GetModelsByGroupIDAndModelNameParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCurrentPage, qhkCurrentPage, _ := qs.GetOK("currentPage")
	if err := o.bindCurrentPage(qCurrentPage, qhkCurrentPage, route.Formats); err != nil {
		res = append(res, err)
	}

	rGroupID, rhkGroupID, _ := route.Params.GetOK("groupId")
	if err := o.bindGroupID(rGroupID, rhkGroupID, route.Formats); err != nil {
		res = append(res, err)
	}

	rModelName, rhkModelName, _ := route.Params.GetOK("modelName")
	if err := o.bindModelName(rModelName, rhkModelName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCurrentPage binds and validates parameter CurrentPage from query.
func (o *GetModelsByGroupIDAndModelNameParams) bindCurrentPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("currentPage", "query", "int64", raw)
	}
	o.CurrentPage = &value

	return nil
}

// bindGroupID binds and validates parameter GroupID from path.
func (o *GetModelsByGroupIDAndModelNameParams) bindGroupID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.GroupID = raw

	return nil
}

// bindModelName binds and validates parameter ModelName from path.
func (o *GetModelsByGroupIDAndModelNameParams) bindModelName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ModelName = raw

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetModelsByGroupIDAndModelNameParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	return nil
}
