// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// GetModelVersionOKCode is the HTTP code returned for type GetModelVersionOK
const GetModelVersionOKCode int = 200

/*GetModelVersionOK OK

swagger:response getModelVersionOK
*/
type GetModelVersionOK struct {

	/*
	  In: Body
	*/
	Payload models.GetModelVersionResp `json:"body,omitempty"`
}

// NewGetModelVersionOK creates GetModelVersionOK with default headers values
func NewGetModelVersionOK() *GetModelVersionOK {

	return &GetModelVersionOK{}
}

// WithPayload adds the payload to the get model version o k response
func (o *GetModelVersionOK) WithPayload(payload models.GetModelVersionResp) *GetModelVersionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get model version o k response
func (o *GetModelVersionOK) SetPayload(payload models.GetModelVersionResp) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetModelVersionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.GetModelVersionResp{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetModelVersionUnauthorizedCode is the HTTP code returned for type GetModelVersionUnauthorized
const GetModelVersionUnauthorizedCode int = 401

/*GetModelVersionUnauthorized Unauthorized

swagger:response getModelVersionUnauthorized
*/
type GetModelVersionUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetModelVersionUnauthorized creates GetModelVersionUnauthorized with default headers values
func NewGetModelVersionUnauthorized() *GetModelVersionUnauthorized {

	return &GetModelVersionUnauthorized{}
}

// WithPayload adds the payload to the get model version unauthorized response
func (o *GetModelVersionUnauthorized) WithPayload(payload *models.Error) *GetModelVersionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get model version unauthorized response
func (o *GetModelVersionUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetModelVersionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetModelVersionNotFoundCode is the HTTP code returned for type GetModelVersionNotFound
const GetModelVersionNotFoundCode int = 404

/*GetModelVersionNotFound The Models cannot be found

swagger:response getModelVersionNotFound
*/
type GetModelVersionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetModelVersionNotFound creates GetModelVersionNotFound with default headers values
func NewGetModelVersionNotFound() *GetModelVersionNotFound {

	return &GetModelVersionNotFound{}
}

// WithPayload adds the payload to the get model version not found response
func (o *GetModelVersionNotFound) WithPayload(payload *models.Error) *GetModelVersionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get model version not found response
func (o *GetModelVersionNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetModelVersionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
