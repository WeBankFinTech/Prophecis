// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetModelVersionByNameAneVersionHandlerFunc turns a function with the right signature into a get model version by name ane version handler
type GetModelVersionByNameAneVersionHandlerFunc func(GetModelVersionByNameAneVersionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetModelVersionByNameAneVersionHandlerFunc) Handle(params GetModelVersionByNameAneVersionParams) middleware.Responder {
	return fn(params)
}

// GetModelVersionByNameAneVersionHandler interface for that can handle valid get model version by name ane version params
type GetModelVersionByNameAneVersionHandler interface {
	Handle(GetModelVersionByNameAneVersionParams) middleware.Responder
}

// NewGetModelVersionByNameAneVersion creates a new http.Handler for the get model version by name ane version operation
func NewGetModelVersionByNameAneVersion(ctx *middleware.Context, handler GetModelVersionByNameAneVersionHandler) *GetModelVersionByNameAneVersion {
	return &GetModelVersionByNameAneVersion{Context: ctx, Handler: handler}
}

/*GetModelVersionByNameAneVersion swagger:route GET /mf/v1/modelVersion/modelName/{modelName}/groupId/{groupId}/version/{version} modelStorage getModelVersionByNameAneVersion

Get the ModelVersion in given model name, group id and versoin.

Get ModelVersion.

*/
type GetModelVersionByNameAneVersion struct {
	Context *middleware.Context
	Handler GetModelVersionByNameAneVersionHandler
}

func (o *GetModelVersionByNameAneVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetModelVersionByNameAneVersionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
