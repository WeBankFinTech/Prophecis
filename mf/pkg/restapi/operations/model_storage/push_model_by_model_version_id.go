// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PushModelByModelVersionIDHandlerFunc turns a function with the right signature into a push model by model version Id handler
type PushModelByModelVersionIDHandlerFunc func(PushModelByModelVersionIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PushModelByModelVersionIDHandlerFunc) Handle(params PushModelByModelVersionIDParams) middleware.Responder {
	return fn(params)
}

// PushModelByModelVersionIDHandler interface for that can handle valid push model by model version Id params
type PushModelByModelVersionIDHandler interface {
	Handle(PushModelByModelVersionIDParams) middleware.Responder
}

// NewPushModelByModelVersionID creates a new http.Handler for the push model by model version Id operation
func NewPushModelByModelVersionID(ctx *middleware.Context, handler PushModelByModelVersionIDHandler) *PushModelByModelVersionID {
	return &PushModelByModelVersionID{Context: ctx, Handler: handler}
}

/*PushModelByModelVersionID swagger:route POST /mf/v1/modelVersion/push/{modelVersionId} modelStorage pushModelByModelVersionId

push model by model version id

push model by model version id

*/
type PushModelByModelVersionID struct {
	Context *middleware.Context
	Handler PushModelByModelVersionIDHandler
}

func (o *PushModelByModelVersionID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPushModelByModelVersionIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
