// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// DownloadModelByIDOKCode is the HTTP code returned for type DownloadModelByIDOK
const DownloadModelByIDOKCode int = 200

/*DownloadModelByIDOK OK

swagger:response downloadModelByIdOK
*/
type DownloadModelByIDOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewDownloadModelByIDOK creates DownloadModelByIDOK with default headers values
func NewDownloadModelByIDOK() *DownloadModelByIDOK {

	return &DownloadModelByIDOK{}
}

// WithPayload adds the payload to the download model by Id o k response
func (o *DownloadModelByIDOK) WithPayload(payload io.ReadCloser) *DownloadModelByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download model by Id o k response
func (o *DownloadModelByIDOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadModelByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DownloadModelByIDUnauthorizedCode is the HTTP code returned for type DownloadModelByIDUnauthorized
const DownloadModelByIDUnauthorizedCode int = 401

/*DownloadModelByIDUnauthorized Unauthorized

swagger:response downloadModelByIdUnauthorized
*/
type DownloadModelByIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDownloadModelByIDUnauthorized creates DownloadModelByIDUnauthorized with default headers values
func NewDownloadModelByIDUnauthorized() *DownloadModelByIDUnauthorized {

	return &DownloadModelByIDUnauthorized{}
}

// WithPayload adds the payload to the download model by Id unauthorized response
func (o *DownloadModelByIDUnauthorized) WithPayload(payload *models.Error) *DownloadModelByIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download model by Id unauthorized response
func (o *DownloadModelByIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadModelByIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DownloadModelByIDNotFoundCode is the HTTP code returned for type DownloadModelByIDNotFound
const DownloadModelByIDNotFoundCode int = 404

/*DownloadModelByIDNotFound Model download fail

swagger:response downloadModelByIdNotFound
*/
type DownloadModelByIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDownloadModelByIDNotFound creates DownloadModelByIDNotFound with default headers values
func NewDownloadModelByIDNotFound() *DownloadModelByIDNotFound {

	return &DownloadModelByIDNotFound{}
}

// WithPayload adds the payload to the download model by Id not found response
func (o *DownloadModelByIDNotFound) WithPayload(payload *models.Error) *DownloadModelByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download model by Id not found response
func (o *DownloadModelByIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadModelByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
