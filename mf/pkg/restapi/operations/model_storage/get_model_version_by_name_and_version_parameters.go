// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetModelVersionByNameAndVersionParams creates a new GetModelVersionByNameAndVersionParams object
// no default values defined in spec.
func NewGetModelVersionByNameAndVersionParams() GetModelVersionByNameAndVersionParams {

	return GetModelVersionByNameAndVersionParams{}
}

// GetModelVersionByNameAndVersionParams contains all the bound params for the get model version by name and version operation
// typically these are obtained from a http.Request
//
// swagger:parameters getModelVersionByNameAndVersion
type GetModelVersionByNameAndVersionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	GroupID int64
	/*
	  Required: true
	  In: path
	*/
	ModelName string
	/*
	  Required: true
	  In: path
	*/
	Version string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetModelVersionByNameAndVersionParams() beforehand.
func (o *GetModelVersionByNameAndVersionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rGroupID, rhkGroupID, _ := route.Params.GetOK("groupId")
	if err := o.bindGroupID(rGroupID, rhkGroupID, route.Formats); err != nil {
		res = append(res, err)
	}

	rModelName, rhkModelName, _ := route.Params.GetOK("modelName")
	if err := o.bindModelName(rModelName, rhkModelName, route.Formats); err != nil {
		res = append(res, err)
	}

	rVersion, rhkVersion, _ := route.Params.GetOK("version")
	if err := o.bindVersion(rVersion, rhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGroupID binds and validates parameter GroupID from path.
func (o *GetModelVersionByNameAndVersionParams) bindGroupID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("groupId", "path", "int64", raw)
	}
	o.GroupID = value

	return nil
}

// bindModelName binds and validates parameter ModelName from path.
func (o *GetModelVersionByNameAndVersionParams) bindModelName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ModelName = raw

	return nil
}

// bindVersion binds and validates parameter Version from path.
func (o *GetModelVersionByNameAndVersionParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Version = raw

	return nil
}
