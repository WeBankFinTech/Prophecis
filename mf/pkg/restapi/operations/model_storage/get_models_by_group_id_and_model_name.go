// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetModelsByGroupIDAndModelNameHandlerFunc turns a function with the right signature into a get models by group Id and model name handler
type GetModelsByGroupIDAndModelNameHandlerFunc func(GetModelsByGroupIDAndModelNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetModelsByGroupIDAndModelNameHandlerFunc) Handle(params GetModelsByGroupIDAndModelNameParams) middleware.Responder {
	return fn(params)
}

// GetModelsByGroupIDAndModelNameHandler interface for that can handle valid get models by group Id and model name params
type GetModelsByGroupIDAndModelNameHandler interface {
	Handle(GetModelsByGroupIDAndModelNameParams) middleware.Responder
}

// NewGetModelsByGroupIDAndModelName creates a new http.Handler for the get models by group Id and model name operation
func NewGetModelsByGroupIDAndModelName(ctx *middleware.Context, handler GetModelsByGroupIDAndModelNameHandler) *GetModelsByGroupIDAndModelName {
	return &GetModelsByGroupIDAndModelName{Context: ctx, Handler: handler}
}

/*GetModelsByGroupIDAndModelName swagger:route GET /mf/v1/models/name/{modelName}/groupId/{groupId} modelStorage getModelsByGroupIdAndModelName

Get models by model name and group id

Get Models.

*/
type GetModelsByGroupIDAndModelName struct {
	Context *middleware.Context
	Handler GetModelsByGroupIDAndModelNameHandler
}

func (o *GetModelsByGroupIDAndModelName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetModelsByGroupIDAndModelNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
