// Code generated by go-swagger; DO NOT EDIT.

package model_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// PushModelByModelIDOKCode is the HTTP code returned for type PushModelByModelIDOK
const PushModelByModelIDOKCode int = 200

/*PushModelByModelIDOK OK

swagger:response pushModelByModelIdOK
*/
type PushModelByModelIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewPushModelByModelIDOK creates PushModelByModelIDOK with default headers values
func NewPushModelByModelIDOK() *PushModelByModelIDOK {

	return &PushModelByModelIDOK{}
}

// WithPayload adds the payload to the push model by model Id o k response
func (o *PushModelByModelIDOK) WithPayload(payload *models.Event) *PushModelByModelIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the push model by model Id o k response
func (o *PushModelByModelIDOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PushModelByModelIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PushModelByModelIDUnauthorizedCode is the HTTP code returned for type PushModelByModelIDUnauthorized
const PushModelByModelIDUnauthorizedCode int = 401

/*PushModelByModelIDUnauthorized Unauthorized

swagger:response pushModelByModelIdUnauthorized
*/
type PushModelByModelIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPushModelByModelIDUnauthorized creates PushModelByModelIDUnauthorized with default headers values
func NewPushModelByModelIDUnauthorized() *PushModelByModelIDUnauthorized {

	return &PushModelByModelIDUnauthorized{}
}

// WithPayload adds the payload to the push model by model Id unauthorized response
func (o *PushModelByModelIDUnauthorized) WithPayload(payload *models.Error) *PushModelByModelIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the push model by model Id unauthorized response
func (o *PushModelByModelIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PushModelByModelIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PushModelByModelIDNotFoundCode is the HTTP code returned for type PushModelByModelIDNotFound
const PushModelByModelIDNotFoundCode int = 404

/*PushModelByModelIDNotFound Report push fail

swagger:response pushModelByModelIdNotFound
*/
type PushModelByModelIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPushModelByModelIDNotFound creates PushModelByModelIDNotFound with default headers values
func NewPushModelByModelIDNotFound() *PushModelByModelIDNotFound {

	return &PushModelByModelIDNotFound{}
}

// WithPayload adds the payload to the push model by model Id not found response
func (o *PushModelByModelIDNotFound) WithPayload(payload *models.Error) *PushModelByModelIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the push model by model Id not found response
func (o *PushModelByModelIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PushModelByModelIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
