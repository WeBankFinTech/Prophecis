// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"mlss-mf/pkg/restapi/operations/container"
	"mlss-mf/pkg/restapi/operations/image"
	"mlss-mf/pkg/restapi/operations/model_deploy"
	"mlss-mf/pkg/restapi/operations/model_result"
	"mlss-mf/pkg/restapi/operations/model_storage"
	"mlss-mf/pkg/restapi/operations/report"
	"mlss-mf/pkg/restapi/operations/rmb"
)

// NewMlssMfAPI creates a new MlssMf instance
func NewMlssMfAPI(spec *loads.Document) *MlssMfAPI {
	return &MlssMfAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		BinConsumer:           runtime.ByteStreamConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		TxtConsumer:           runtime.TextConsumer(),
		JSONProducer:          runtime.JSONProducer(),
		BinProducer:           runtime.ByteStreamProducer(),
		TxtProducer:           runtime.TextProducer(),
		ModelStorageDownloadModelByIDHandler: model_storage.DownloadModelByIDHandlerFunc(func(params model_storage.DownloadModelByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageDownloadModelByID has not yet been implemented")
		}),
		ModelStorageDownloadModelVersionByIDHandler: model_storage.DownloadModelVersionByIDHandlerFunc(func(params model_storage.DownloadModelVersionByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageDownloadModelVersionByID has not yet been implemented")
		}),
		ReportDownloadReportByIDHandler: report.DownloadReportByIDHandlerFunc(func(params report.DownloadReportByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportDownloadReportByID has not yet been implemented")
		}),
		RmbDownloadRmbLogByEventIDHandler: rmb.DownloadRmbLogByEventIDHandlerFunc(func(params rmb.DownloadRmbLogByEventIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RmbDownloadRmbLogByEventID has not yet been implemented")
		}),
		ImageCreateImageHandler: image.CreateImageHandlerFunc(func(params image.CreateImageParams) middleware.Responder {
			return middleware.NotImplemented("operation ImageCreateImage has not yet been implemented")
		}),
		ModelDeployCreateNamespacedServiceRunHandler: model_deploy.CreateNamespacedServiceRunHandlerFunc(func(params model_deploy.CreateNamespacedServiceRunParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployCreateNamespacedServiceRun has not yet been implemented")
		}),
		ReportCreateReportHandler: report.CreateReportHandlerFunc(func(params report.CreateReportParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportCreateReport has not yet been implemented")
		}),
		ModelResultCreateResultHandler: model_result.CreateResultHandlerFunc(func(params model_result.CreateResultParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelResultCreateResult has not yet been implemented")
		}),
		ImageDeleteImageHandler: image.DeleteImageHandlerFunc(func(params image.DeleteImageParams) middleware.Responder {
			return middleware.NotImplemented("operation ImageDeleteImage has not yet been implemented")
		}),
		ModelStorageDeleteModelHandler: model_storage.DeleteModelHandlerFunc(func(params model_storage.DeleteModelParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageDeleteModel has not yet been implemented")
		}),
		ReportDeleteReportByIDHandler: report.DeleteReportByIDHandlerFunc(func(params report.DeleteReportByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportDeleteReportByID has not yet been implemented")
		}),
		ModelResultDeleteResultByIDHandler: model_result.DeleteResultByIDHandlerFunc(func(params model_result.DeleteResultByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelResultDeleteResultByID has not yet been implemented")
		}),
		ModelDeployDeleteServiceHandler: model_deploy.DeleteServiceHandlerFunc(func(params model_deploy.DeleteServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployDeleteService has not yet been implemented")
		}),
		ModelStorageExportModelHandler: model_storage.ExportModelHandlerFunc(func(params model_storage.ExportModelParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageExportModel has not yet been implemented")
		}),
		ImageGetImageHandler: image.GetImageHandlerFunc(func(params image.GetImageParams) middleware.Responder {
			return middleware.NotImplemented("operation ImageGetImage has not yet been implemented")
		}),
		ModelStorageGetModelHandler: model_storage.GetModelHandlerFunc(func(params model_storage.GetModelParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageGetModel has not yet been implemented")
		}),
		ModelStorageGetModelVersionHandler: model_storage.GetModelVersionHandlerFunc(func(params model_storage.GetModelVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageGetModelVersion has not yet been implemented")
		}),
		ModelStorageGetModelVersionByNameAndVersionHandler: model_storage.GetModelVersionByNameAndVersionHandlerFunc(func(params model_storage.GetModelVersionByNameAndVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageGetModelVersionByNameAndVersion has not yet been implemented")
		}),
		ModelStorageGetModelsHandler: model_storage.GetModelsHandlerFunc(func(params model_storage.GetModelsParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageGetModels has not yet been implemented")
		}),
		ModelStorageGetModelsByClusterHandler: model_storage.GetModelsByClusterHandlerFunc(func(params model_storage.GetModelsByClusterParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageGetModelsByCluster has not yet been implemented")
		}),
		ModelStorageGetModelsByGroupIDAndModelNameHandler: model_storage.GetModelsByGroupIDAndModelNameHandlerFunc(func(params model_storage.GetModelsByGroupIDAndModelNameParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageGetModelsByGroupIDAndModelName has not yet been implemented")
		}),
		ContainerGetNamespacedServiceContainerLogHandler: container.GetNamespacedServiceContainerLogHandlerFunc(func(params container.GetNamespacedServiceContainerLogParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainerGetNamespacedServiceContainerLog has not yet been implemented")
		}),
		ReportGetPushEventByIDHandler: report.GetPushEventByIDHandlerFunc(func(params report.GetPushEventByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportGetPushEventByID has not yet been implemented")
		}),
		ReportGetReportByIDHandler: report.GetReportByIDHandlerFunc(func(params report.GetReportByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportGetReportByID has not yet been implemented")
		}),
		ReportGetReportByModelNameAndModelVersionHandler: report.GetReportByModelNameAndModelVersionHandlerFunc(func(params report.GetReportByModelNameAndModelVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportGetReportByModelNameAndModelVersion has not yet been implemented")
		}),
		ModelResultGetResultByModelNameHandler: model_result.GetResultByModelNameHandlerFunc(func(params model_result.GetResultByModelNameParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelResultGetResultByModelName has not yet been implemented")
		}),
		ModelDeployGetServiceHandler: model_deploy.GetServiceHandlerFunc(func(params model_deploy.GetServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployGetService has not yet been implemented")
		}),
		ContainerListContainerHandler: container.ListContainerHandlerFunc(func(params container.ListContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainerListContainer has not yet been implemented")
		}),
		ImageListImageHandler: image.ListImageHandlerFunc(func(params image.ListImageParams) middleware.Responder {
			return middleware.NotImplemented("operation ImageListImage has not yet been implemented")
		}),
		ImageListImageByModelVersionIDHandler: image.ListImageByModelVersionIDHandlerFunc(func(params image.ListImageByModelVersionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ImageListImageByModelVersionID has not yet been implemented")
		}),
		ModelStorageListModelVersionPushEventsByModelVersionIDHandler: model_storage.ListModelVersionPushEventsByModelVersionIDHandlerFunc(func(params model_storage.ListModelVersionPushEventsByModelVersionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageListModelVersionPushEventsByModelVersionID has not yet been implemented")
		}),
		ModelStorageListModelsByGroupIDHandler: model_storage.ListModelsByGroupIDHandlerFunc(func(params model_storage.ListModelsByGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageListModelsByGroupID has not yet been implemented")
		}),
		ReportListReportVersionPushEventsByReportVersionIDHandler: report.ListReportVersionPushEventsByReportVersionIDHandlerFunc(func(params report.ListReportVersionPushEventsByReportVersionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportListReportVersionPushEventsByReportVersionID has not yet been implemented")
		}),
		ReportListReportVersionsByReportIDHandler: report.ListReportVersionsByReportIDHandlerFunc(func(params report.ListReportVersionsByReportIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportListReportVersionsByReportID has not yet been implemented")
		}),
		ReportListReportsHandler: report.ListReportsHandlerFunc(func(params report.ListReportsParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportListReports has not yet been implemented")
		}),
		ModelDeployListServicesHandler: model_deploy.ListServicesHandlerFunc(func(params model_deploy.ListServicesParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployListServices has not yet been implemented")
		}),
		ModelStoragePostModelHandler: model_storage.PostModelHandlerFunc(func(params model_storage.PostModelParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStoragePostModel has not yet been implemented")
		}),
		ModelDeployPostServiceHandler: model_deploy.PostServiceHandlerFunc(func(params model_deploy.PostServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployPostService has not yet been implemented")
		}),
		ModelStoragePushModelByModelIDHandler: model_storage.PushModelByModelIDHandlerFunc(func(params model_storage.PushModelByModelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStoragePushModelByModelID has not yet been implemented")
		}),
		ModelStoragePushModelByModelVersionIDHandler: model_storage.PushModelByModelVersionIDHandlerFunc(func(params model_storage.PushModelByModelVersionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStoragePushModelByModelVersionID has not yet been implemented")
		}),
		ReportPushReportByReportIDHandler: report.PushReportByReportIDHandlerFunc(func(params report.PushReportByReportIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportPushReportByReportID has not yet been implemented")
		}),
		ReportPushReportByReportVersionIDHandler: report.PushReportByReportVersionIDHandlerFunc(func(params report.PushReportByReportVersionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportPushReportByReportVersionID has not yet been implemented")
		}),
		ModelDeployServiceDashboradHandler: model_deploy.ServiceDashboradHandlerFunc(func(params model_deploy.ServiceDashboradParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployServiceDashborad has not yet been implemented")
		}),
		ModelDeployStopNamespacedServiceHandler: model_deploy.StopNamespacedServiceHandlerFunc(func(params model_deploy.StopNamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployStopNamespacedService has not yet been implemented")
		}),
		ImageUpdateImageHandler: image.UpdateImageHandlerFunc(func(params image.UpdateImageParams) middleware.Responder {
			return middleware.NotImplemented("operation ImageUpdateImage has not yet been implemented")
		}),
		ModelStorageUpdateModelHandler: model_storage.UpdateModelHandlerFunc(func(params model_storage.UpdateModelParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageUpdateModel has not yet been implemented")
		}),
		ModelResultUpdateResultByIDHandler: model_result.UpdateResultByIDHandlerFunc(func(params model_result.UpdateResultByIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelResultUpdateResultByID has not yet been implemented")
		}),
		ModelDeployUpdateServiceHandler: model_deploy.UpdateServiceHandlerFunc(func(params model_deploy.UpdateServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeployUpdateService has not yet been implemented")
		}),
		ModelStorageUploadModelHandler: model_storage.UploadModelHandlerFunc(func(params model_storage.UploadModelParams) middleware.Responder {
			return middleware.NotImplemented("operation ModelStorageUploadModel has not yet been implemented")
		}),
		ReportUploadReportHandler: report.UploadReportHandlerFunc(func(params report.UploadReportParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportUploadReport has not yet been implemented")
		}),
	}
}

/*MlssMfAPI Model Factory Service */
type MlssMfAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer
	// TxtConsumer registers a consumer for a "text/plain; charset=utf-8" mime type
	TxtConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain; charset=utf-8" mime type
	TxtProducer runtime.Producer

	// ModelStorageDownloadModelByIDHandler sets the operation handler for the download model by Id operation
	ModelStorageDownloadModelByIDHandler model_storage.DownloadModelByIDHandler
	// ModelStorageDownloadModelVersionByIDHandler sets the operation handler for the download model version by Id operation
	ModelStorageDownloadModelVersionByIDHandler model_storage.DownloadModelVersionByIDHandler
	// ReportDownloadReportByIDHandler sets the operation handler for the download report by Id operation
	ReportDownloadReportByIDHandler report.DownloadReportByIDHandler
	// RmbDownloadRmbLogByEventIDHandler sets the operation handler for the download rmb log by event Id operation
	RmbDownloadRmbLogByEventIDHandler rmb.DownloadRmbLogByEventIDHandler
	// ImageCreateImageHandler sets the operation handler for the create image operation
	ImageCreateImageHandler image.CreateImageHandler
	// ModelDeployCreateNamespacedServiceRunHandler sets the operation handler for the create namespaced service run operation
	ModelDeployCreateNamespacedServiceRunHandler model_deploy.CreateNamespacedServiceRunHandler
	// ReportCreateReportHandler sets the operation handler for the create report operation
	ReportCreateReportHandler report.CreateReportHandler
	// ModelResultCreateResultHandler sets the operation handler for the create result operation
	ModelResultCreateResultHandler model_result.CreateResultHandler
	// ImageDeleteImageHandler sets the operation handler for the delete image operation
	ImageDeleteImageHandler image.DeleteImageHandler
	// ModelStorageDeleteModelHandler sets the operation handler for the delete model operation
	ModelStorageDeleteModelHandler model_storage.DeleteModelHandler
	// ReportDeleteReportByIDHandler sets the operation handler for the delete report by Id operation
	ReportDeleteReportByIDHandler report.DeleteReportByIDHandler
	// ModelResultDeleteResultByIDHandler sets the operation handler for the delete result by Id operation
	ModelResultDeleteResultByIDHandler model_result.DeleteResultByIDHandler
	// ModelDeployDeleteServiceHandler sets the operation handler for the delete service operation
	ModelDeployDeleteServiceHandler model_deploy.DeleteServiceHandler
	// ModelStorageExportModelHandler sets the operation handler for the export model operation
	ModelStorageExportModelHandler model_storage.ExportModelHandler
	// ImageGetImageHandler sets the operation handler for the get image operation
	ImageGetImageHandler image.GetImageHandler
	// ModelStorageGetModelHandler sets the operation handler for the get model operation
	ModelStorageGetModelHandler model_storage.GetModelHandler
	// ModelStorageGetModelVersionHandler sets the operation handler for the get model version operation
	ModelStorageGetModelVersionHandler model_storage.GetModelVersionHandler
	// ModelStorageGetModelVersionByNameAndVersionHandler sets the operation handler for the get model version by name and version operation
	ModelStorageGetModelVersionByNameAndVersionHandler model_storage.GetModelVersionByNameAndVersionHandler
	// ModelStorageGetModelsHandler sets the operation handler for the get models operation
	ModelStorageGetModelsHandler model_storage.GetModelsHandler
	// ModelStorageGetModelsByClusterHandler sets the operation handler for the get models by cluster operation
	ModelStorageGetModelsByClusterHandler model_storage.GetModelsByClusterHandler
	// ModelStorageGetModelsByGroupIDAndModelNameHandler sets the operation handler for the get models by group Id and model name operation
	ModelStorageGetModelsByGroupIDAndModelNameHandler model_storage.GetModelsByGroupIDAndModelNameHandler
	// ContainerGetNamespacedServiceContainerLogHandler sets the operation handler for the get namespaced service container log operation
	ContainerGetNamespacedServiceContainerLogHandler container.GetNamespacedServiceContainerLogHandler
	// ReportGetPushEventByIDHandler sets the operation handler for the get push event by Id operation
	ReportGetPushEventByIDHandler report.GetPushEventByIDHandler
	// ReportGetReportByIDHandler sets the operation handler for the get report by Id operation
	ReportGetReportByIDHandler report.GetReportByIDHandler
	// ReportGetReportByModelNameAndModelVersionHandler sets the operation handler for the get report by model name and model version operation
	ReportGetReportByModelNameAndModelVersionHandler report.GetReportByModelNameAndModelVersionHandler
	// ModelResultGetResultByModelNameHandler sets the operation handler for the get result by model name operation
	ModelResultGetResultByModelNameHandler model_result.GetResultByModelNameHandler
	// ModelDeployGetServiceHandler sets the operation handler for the get service operation
	ModelDeployGetServiceHandler model_deploy.GetServiceHandler
	// ContainerListContainerHandler sets the operation handler for the list container operation
	ContainerListContainerHandler container.ListContainerHandler
	// ImageListImageHandler sets the operation handler for the list image operation
	ImageListImageHandler image.ListImageHandler
	// ImageListImageByModelVersionIDHandler sets the operation handler for the list image by model version Id operation
	ImageListImageByModelVersionIDHandler image.ListImageByModelVersionIDHandler
	// ModelStorageListModelVersionPushEventsByModelVersionIDHandler sets the operation handler for the list model version push events by model version Id operation
	ModelStorageListModelVersionPushEventsByModelVersionIDHandler model_storage.ListModelVersionPushEventsByModelVersionIDHandler
	// ModelStorageListModelsByGroupIDHandler sets the operation handler for the list models by group ID operation
	ModelStorageListModelsByGroupIDHandler model_storage.ListModelsByGroupIDHandler
	// ReportListReportVersionPushEventsByReportVersionIDHandler sets the operation handler for the list report version push events by report version Id operation
	ReportListReportVersionPushEventsByReportVersionIDHandler report.ListReportVersionPushEventsByReportVersionIDHandler
	// ReportListReportVersionsByReportIDHandler sets the operation handler for the list report versions by report Id operation
	ReportListReportVersionsByReportIDHandler report.ListReportVersionsByReportIDHandler
	// ReportListReportsHandler sets the operation handler for the list reports operation
	ReportListReportsHandler report.ListReportsHandler
	// ModelDeployListServicesHandler sets the operation handler for the list services operation
	ModelDeployListServicesHandler model_deploy.ListServicesHandler
	// ModelStoragePostModelHandler sets the operation handler for the post model operation
	ModelStoragePostModelHandler model_storage.PostModelHandler
	// ModelDeployPostServiceHandler sets the operation handler for the post service operation
	ModelDeployPostServiceHandler model_deploy.PostServiceHandler
	// ModelStoragePushModelByModelIDHandler sets the operation handler for the push model by model Id operation
	ModelStoragePushModelByModelIDHandler model_storage.PushModelByModelIDHandler
	// ModelStoragePushModelByModelVersionIDHandler sets the operation handler for the push model by model version Id operation
	ModelStoragePushModelByModelVersionIDHandler model_storage.PushModelByModelVersionIDHandler
	// ReportPushReportByReportIDHandler sets the operation handler for the push report by report Id operation
	ReportPushReportByReportIDHandler report.PushReportByReportIDHandler
	// ReportPushReportByReportVersionIDHandler sets the operation handler for the push report by report version Id operation
	ReportPushReportByReportVersionIDHandler report.PushReportByReportVersionIDHandler
	// ModelDeployServiceDashboradHandler sets the operation handler for the service dashborad operation
	ModelDeployServiceDashboradHandler model_deploy.ServiceDashboradHandler
	// ModelDeployStopNamespacedServiceHandler sets the operation handler for the stop namespaced service operation
	ModelDeployStopNamespacedServiceHandler model_deploy.StopNamespacedServiceHandler
	// ImageUpdateImageHandler sets the operation handler for the update image operation
	ImageUpdateImageHandler image.UpdateImageHandler
	// ModelStorageUpdateModelHandler sets the operation handler for the update model operation
	ModelStorageUpdateModelHandler model_storage.UpdateModelHandler
	// ModelResultUpdateResultByIDHandler sets the operation handler for the update result by Id operation
	ModelResultUpdateResultByIDHandler model_result.UpdateResultByIDHandler
	// ModelDeployUpdateServiceHandler sets the operation handler for the update service operation
	ModelDeployUpdateServiceHandler model_deploy.UpdateServiceHandler
	// ModelStorageUploadModelHandler sets the operation handler for the upload model operation
	ModelStorageUploadModelHandler model_storage.UploadModelHandler
	// ReportUploadReportHandler sets the operation handler for the upload report operation
	ReportUploadReportHandler report.UploadReportHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MlssMfAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MlssMfAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MlssMfAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MlssMfAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MlssMfAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MlssMfAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MlssMfAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MlssMfAPI
func (o *MlssMfAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.ModelStorageDownloadModelByIDHandler == nil {
		unregistered = append(unregistered, "model_storage.DownloadModelByIDHandler")
	}

	if o.ModelStorageDownloadModelVersionByIDHandler == nil {
		unregistered = append(unregistered, "model_storage.DownloadModelVersionByIDHandler")
	}

	if o.ReportDownloadReportByIDHandler == nil {
		unregistered = append(unregistered, "report.DownloadReportByIDHandler")
	}

	if o.RmbDownloadRmbLogByEventIDHandler == nil {
		unregistered = append(unregistered, "rmb.DownloadRmbLogByEventIDHandler")
	}

	if o.ImageCreateImageHandler == nil {
		unregistered = append(unregistered, "image.CreateImageHandler")
	}

	if o.ModelDeployCreateNamespacedServiceRunHandler == nil {
		unregistered = append(unregistered, "model_deploy.CreateNamespacedServiceRunHandler")
	}

	if o.ReportCreateReportHandler == nil {
		unregistered = append(unregistered, "report.CreateReportHandler")
	}

	if o.ModelResultCreateResultHandler == nil {
		unregistered = append(unregistered, "model_result.CreateResultHandler")
	}

	if o.ImageDeleteImageHandler == nil {
		unregistered = append(unregistered, "image.DeleteImageHandler")
	}

	if o.ModelStorageDeleteModelHandler == nil {
		unregistered = append(unregistered, "model_storage.DeleteModelHandler")
	}

	if o.ReportDeleteReportByIDHandler == nil {
		unregistered = append(unregistered, "report.DeleteReportByIDHandler")
	}

	if o.ModelResultDeleteResultByIDHandler == nil {
		unregistered = append(unregistered, "model_result.DeleteResultByIDHandler")
	}

	if o.ModelDeployDeleteServiceHandler == nil {
		unregistered = append(unregistered, "model_deploy.DeleteServiceHandler")
	}

	if o.ModelStorageExportModelHandler == nil {
		unregistered = append(unregistered, "model_storage.ExportModelHandler")
	}

	if o.ImageGetImageHandler == nil {
		unregistered = append(unregistered, "image.GetImageHandler")
	}

	if o.ModelStorageGetModelHandler == nil {
		unregistered = append(unregistered, "model_storage.GetModelHandler")
	}

	if o.ModelStorageGetModelVersionHandler == nil {
		unregistered = append(unregistered, "model_storage.GetModelVersionHandler")
	}

	if o.ModelStorageGetModelVersionByNameAndVersionHandler == nil {
		unregistered = append(unregistered, "model_storage.GetModelVersionByNameAndVersionHandler")
	}

	if o.ModelStorageGetModelsHandler == nil {
		unregistered = append(unregistered, "model_storage.GetModelsHandler")
	}

	if o.ModelStorageGetModelsByClusterHandler == nil {
		unregistered = append(unregistered, "model_storage.GetModelsByClusterHandler")
	}

	if o.ModelStorageGetModelsByGroupIDAndModelNameHandler == nil {
		unregistered = append(unregistered, "model_storage.GetModelsByGroupIDAndModelNameHandler")
	}

	if o.ContainerGetNamespacedServiceContainerLogHandler == nil {
		unregistered = append(unregistered, "container.GetNamespacedServiceContainerLogHandler")
	}

	if o.ReportGetPushEventByIDHandler == nil {
		unregistered = append(unregistered, "report.GetPushEventByIDHandler")
	}

	if o.ReportGetReportByIDHandler == nil {
		unregistered = append(unregistered, "report.GetReportByIDHandler")
	}

	if o.ReportGetReportByModelNameAndModelVersionHandler == nil {
		unregistered = append(unregistered, "report.GetReportByModelNameAndModelVersionHandler")
	}

	if o.ModelResultGetResultByModelNameHandler == nil {
		unregistered = append(unregistered, "model_result.GetResultByModelNameHandler")
	}

	if o.ModelDeployGetServiceHandler == nil {
		unregistered = append(unregistered, "model_deploy.GetServiceHandler")
	}

	if o.ContainerListContainerHandler == nil {
		unregistered = append(unregistered, "container.ListContainerHandler")
	}

	if o.ImageListImageHandler == nil {
		unregistered = append(unregistered, "image.ListImageHandler")
	}

	if o.ImageListImageByModelVersionIDHandler == nil {
		unregistered = append(unregistered, "image.ListImageByModelVersionIDHandler")
	}

	if o.ModelStorageListModelVersionPushEventsByModelVersionIDHandler == nil {
		unregistered = append(unregistered, "model_storage.ListModelVersionPushEventsByModelVersionIDHandler")
	}

	if o.ModelStorageListModelsByGroupIDHandler == nil {
		unregistered = append(unregistered, "model_storage.ListModelsByGroupIDHandler")
	}

	if o.ReportListReportVersionPushEventsByReportVersionIDHandler == nil {
		unregistered = append(unregistered, "report.ListReportVersionPushEventsByReportVersionIDHandler")
	}

	if o.ReportListReportVersionsByReportIDHandler == nil {
		unregistered = append(unregistered, "report.ListReportVersionsByReportIDHandler")
	}

	if o.ReportListReportsHandler == nil {
		unregistered = append(unregistered, "report.ListReportsHandler")
	}

	if o.ModelDeployListServicesHandler == nil {
		unregistered = append(unregistered, "model_deploy.ListServicesHandler")
	}

	if o.ModelStoragePostModelHandler == nil {
		unregistered = append(unregistered, "model_storage.PostModelHandler")
	}

	if o.ModelDeployPostServiceHandler == nil {
		unregistered = append(unregistered, "model_deploy.PostServiceHandler")
	}

	if o.ModelStoragePushModelByModelIDHandler == nil {
		unregistered = append(unregistered, "model_storage.PushModelByModelIDHandler")
	}

	if o.ModelStoragePushModelByModelVersionIDHandler == nil {
		unregistered = append(unregistered, "model_storage.PushModelByModelVersionIDHandler")
	}

	if o.ReportPushReportByReportIDHandler == nil {
		unregistered = append(unregistered, "report.PushReportByReportIDHandler")
	}

	if o.ReportPushReportByReportVersionIDHandler == nil {
		unregistered = append(unregistered, "report.PushReportByReportVersionIDHandler")
	}

	if o.ModelDeployServiceDashboradHandler == nil {
		unregistered = append(unregistered, "model_deploy.ServiceDashboradHandler")
	}

	if o.ModelDeployStopNamespacedServiceHandler == nil {
		unregistered = append(unregistered, "model_deploy.StopNamespacedServiceHandler")
	}

	if o.ImageUpdateImageHandler == nil {
		unregistered = append(unregistered, "image.UpdateImageHandler")
	}

	if o.ModelStorageUpdateModelHandler == nil {
		unregistered = append(unregistered, "model_storage.UpdateModelHandler")
	}

	if o.ModelResultUpdateResultByIDHandler == nil {
		unregistered = append(unregistered, "model_result.UpdateResultByIDHandler")
	}

	if o.ModelDeployUpdateServiceHandler == nil {
		unregistered = append(unregistered, "model_deploy.UpdateServiceHandler")
	}

	if o.ModelStorageUploadModelHandler == nil {
		unregistered = append(unregistered, "model_storage.UploadModelHandler")
	}

	if o.ReportUploadReportHandler == nil {
		unregistered = append(unregistered, "report.UploadReportHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MlssMfAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MlssMfAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *MlssMfAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *MlssMfAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		case "text/plain":
			result["text/plain"] = o.TxtConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MlssMfAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MlssMfAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mlss mf API
func (o *MlssMfAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MlssMfAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/modelDownload/{modelId}"] = model_storage.NewDownloadModelByID(o.context, o.ModelStorageDownloadModelByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/modelVersionDownload/{modelVersionId}"] = model_storage.NewDownloadModelVersionByID(o.context, o.ModelStorageDownloadModelVersionByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/report/reportDownload/{reportId}"] = report.NewDownloadReportByID(o.context, o.ReportDownloadReportByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/rmbLog/Download/{eventId}"] = rmb.NewDownloadRmbLogByEventID(o.context, o.RmbDownloadRmbLogByEventIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/image"] = image.NewCreateImage(o.context, o.ImageCreateImageHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/serviceRun"] = model_deploy.NewCreateNamespacedServiceRun(o.context, o.ModelDeployCreateNamespacedServiceRunHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/report"] = report.NewCreateReport(o.context, o.ReportCreateReportHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/result"] = model_result.NewCreateResult(o.context, o.ModelResultCreateResultHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mf/v1/image/{image_id}"] = image.NewDeleteImage(o.context, o.ImageDeleteImageHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mf/v1/model/{modelID}"] = model_storage.NewDeleteModel(o.context, o.ModelStorageDeleteModelHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mf/v1/report/{reportId}"] = report.NewDeleteReportByID(o.context, o.ReportDeleteReportByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mf/v1/result/id/{resultId}"] = model_result.NewDeleteResultByID(o.context, o.ModelResultDeleteResultByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/mf/v1/service/{id}"] = model_deploy.NewDeleteService(o.context, o.ModelDeployDeleteServiceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/model/{modelId}/export"] = model_storage.NewExportModel(o.context, o.ModelStorageExportModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/image/{image_id}"] = image.NewGetImage(o.context, o.ImageGetImageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/model/{modelID}"] = model_storage.NewGetModel(o.context, o.ModelStorageGetModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/modelversions/{modelId}"] = model_storage.NewGetModelVersion(o.context, o.ModelStorageGetModelVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/modelVersion/modelName/{modelName}/groupId/{groupId}/version/{version}"] = model_storage.NewGetModelVersionByNameAndVersion(o.context, o.ModelStorageGetModelVersionByNameAndVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/models"] = model_storage.NewGetModels(o.context, o.ModelStorageGetModelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/models/{cluster}"] = model_storage.NewGetModelsByCluster(o.context, o.ModelStorageGetModelsByClusterHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/models/name/{modelName}/groupId/{groupId}"] = model_storage.NewGetModelsByGroupIDAndModelName(o.context, o.ModelStorageGetModelsByGroupIDAndModelNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/service/{service_name}/namespace/{namespace}/container/{container_name}/log"] = container.NewGetNamespacedServiceContainerLog(o.context, o.ContainerGetNamespacedServiceContainerLogHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/pushEvent/{eventId}"] = report.NewGetPushEventByID(o.context, o.ReportGetPushEventByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/report/{reportId}"] = report.NewGetReportByID(o.context, o.ReportGetReportByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/report/name/{modelName}/version/{modelVersion}"] = report.NewGetReportByModelNameAndModelVersion(o.context, o.ReportGetReportByModelNameAndModelVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/result/{modelName}"] = model_result.NewGetResultByModelName(o.context, o.ModelResultGetResultByModelNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/service/{id}"] = model_deploy.NewGetService(o.context, o.ModelDeployGetServiceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/service/containers/{namespace}/{service_name}"] = container.NewListContainer(o.context, o.ContainerListContainerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/images"] = image.NewListImage(o.context, o.ImageListImageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/images/{model_version_id}"] = image.NewListImageByModelVersionID(o.context, o.ImageListImageByModelVersionIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/modelVersion/push/{modelVersionId}"] = model_storage.NewListModelVersionPushEventsByModelVersionID(o.context, o.ModelStorageListModelVersionPushEventsByModelVersionIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/modelsByGroupID/{groupID}"] = model_storage.NewListModelsByGroupID(o.context, o.ModelStorageListModelsByGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/reportVersion/Push/{reportVersionId}"] = report.NewListReportVersionPushEventsByReportVersionID(o.context, o.ReportListReportVersionPushEventsByReportVersionIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/reportversions/{reportId}"] = report.NewListReportVersionsByReportID(o.context, o.ReportListReportVersionsByReportIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/reports"] = report.NewListReports(o.context, o.ReportListReportsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/services"] = model_deploy.NewListServices(o.context, o.ModelDeployListServicesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/model"] = model_storage.NewPostModel(o.context, o.ModelStoragePostModelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/service"] = model_deploy.NewPostService(o.context, o.ModelDeployPostServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/model/push/{modelId}"] = model_storage.NewPushModelByModelID(o.context, o.ModelStoragePushModelByModelIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/modelVersion/push/{modelVersionId}"] = model_storage.NewPushModelByModelVersionID(o.context, o.ModelStoragePushModelByModelVersionIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/report/push/{reportId}"] = report.NewPushReportByReportID(o.context, o.ReportPushReportByReportIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/reportVersion/Push/{reportVersionId}"] = report.NewPushReportByReportVersionID(o.context, o.ReportPushReportByReportVersionIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/dashboard"] = model_deploy.NewServiceDashborad(o.context, o.ModelDeployServiceDashboradHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/mf/v1/serviceStop/{namespace}/{name}/{id}"] = model_deploy.NewStopNamespacedService(o.context, o.ModelDeployStopNamespacedServiceHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mf/v1/image/{image_id}"] = image.NewUpdateImage(o.context, o.ImageUpdateImageHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mf/v1/model/{modelID}"] = model_storage.NewUpdateModel(o.context, o.ModelStorageUpdateModelHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mf/v1/result/id/{resultId}"] = model_result.NewUpdateResultByID(o.context, o.ModelResultUpdateResultByIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/mf/v1/service/{id}"] = model_deploy.NewUpdateService(o.context, o.ModelDeployUpdateServiceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/model/uploadModel"] = model_storage.NewUploadModel(o.context, o.ModelStorageUploadModelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/mf/v1/report/reportUpload"] = report.NewUploadReport(o.context, o.ReportUploadReportHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MlssMfAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MlssMfAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MlssMfAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MlssMfAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
