// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateImageHandlerFunc turns a function with the right signature into a update image handler
type UpdateImageHandlerFunc func(UpdateImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateImageHandlerFunc) Handle(params UpdateImageParams) middleware.Responder {
	return fn(params)
}

// UpdateImageHandler interface for that can handle valid update image params
type UpdateImageHandler interface {
	Handle(UpdateImageParams) middleware.Responder
}

// NewUpdateImage creates a new http.Handler for the update image operation
func NewUpdateImage(ctx *middleware.Context, handler UpdateImageHandler) *UpdateImage {
	return &UpdateImage{Context: ctx, Handler: handler}
}

/*UpdateImage swagger:route PUT /mf/v1/image/{image_id} image updateImage

Update image by given info

Update Image.

*/
type UpdateImage struct {
	Context *middleware.Context
	Handler UpdateImageHandler
}

func (o *UpdateImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
