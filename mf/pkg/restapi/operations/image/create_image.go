// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateImageHandlerFunc turns a function with the right signature into a create image handler
type CreateImageHandlerFunc func(CreateImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateImageHandlerFunc) Handle(params CreateImageParams) middleware.Responder {
	return fn(params)
}

// CreateImageHandler interface for that can handle valid create image params
type CreateImageHandler interface {
	Handle(CreateImageParams) middleware.Responder
}

// NewCreateImage creates a new http.Handler for the create image operation
func NewCreateImage(ctx *middleware.Context, handler CreateImageHandler) *CreateImage {
	return &CreateImage{Context: ctx, Handler: handler}
}

/*CreateImage swagger:route POST /mf/v1/image image createImage

Create image by given info.

Create Image.

*/
type CreateImage struct {
	Context *middleware.Context
	Handler CreateImageHandler
}

func (o *CreateImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateImageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
