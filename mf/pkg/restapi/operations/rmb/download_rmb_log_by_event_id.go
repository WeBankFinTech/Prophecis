// Code generated by go-swagger; DO NOT EDIT.

package rmb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DownloadRmbLogByEventIDHandlerFunc turns a function with the right signature into a download rmb log by event Id handler
type DownloadRmbLogByEventIDHandlerFunc func(DownloadRmbLogByEventIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadRmbLogByEventIDHandlerFunc) Handle(params DownloadRmbLogByEventIDParams) middleware.Responder {
	return fn(params)
}

// DownloadRmbLogByEventIDHandler interface for that can handle valid download rmb log by event Id params
type DownloadRmbLogByEventIDHandler interface {
	Handle(DownloadRmbLogByEventIDParams) middleware.Responder
}

// NewDownloadRmbLogByEventID creates a new http.Handler for the download rmb log by event Id operation
func NewDownloadRmbLogByEventID(ctx *middleware.Context, handler DownloadRmbLogByEventIDHandler) *DownloadRmbLogByEventID {
	return &DownloadRmbLogByEventID{Context: ctx, Handler: handler}
}

/*DownloadRmbLogByEventID swagger:route GET /mf/v1/rmbLog/Download/{eventId} rmb downloadRmbLogByEventId

Download rmb log file by event id

*/
type DownloadRmbLogByEventID struct {
	Context *middleware.Context
	Handler DownloadRmbLogByEventIDHandler
}

func (o *DownloadRmbLogByEventID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDownloadRmbLogByEventIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
