// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// GetNamespacedServiceContainerLogOKCode is the HTTP code returned for type GetNamespacedServiceContainerLogOK
const GetNamespacedServiceContainerLogOKCode int = 200

/*GetNamespacedServiceContainerLogOK OK

swagger:response getNamespacedServiceContainerLogOK
*/
type GetNamespacedServiceContainerLogOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetServiceContainerLogResponse `json:"body,omitempty"`
}

// NewGetNamespacedServiceContainerLogOK creates GetNamespacedServiceContainerLogOK with default headers values
func NewGetNamespacedServiceContainerLogOK() *GetNamespacedServiceContainerLogOK {

	return &GetNamespacedServiceContainerLogOK{}
}

// WithPayload adds the payload to the get namespaced service container log o k response
func (o *GetNamespacedServiceContainerLogOK) WithPayload(payload *models.GetServiceContainerLogResponse) *GetNamespacedServiceContainerLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get namespaced service container log o k response
func (o *GetNamespacedServiceContainerLogOK) SetPayload(payload *models.GetServiceContainerLogResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamespacedServiceContainerLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNamespacedServiceContainerLogUnauthorizedCode is the HTTP code returned for type GetNamespacedServiceContainerLogUnauthorized
const GetNamespacedServiceContainerLogUnauthorizedCode int = 401

/*GetNamespacedServiceContainerLogUnauthorized Unauthorized

swagger:response getNamespacedServiceContainerLogUnauthorized
*/
type GetNamespacedServiceContainerLogUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNamespacedServiceContainerLogUnauthorized creates GetNamespacedServiceContainerLogUnauthorized with default headers values
func NewGetNamespacedServiceContainerLogUnauthorized() *GetNamespacedServiceContainerLogUnauthorized {

	return &GetNamespacedServiceContainerLogUnauthorized{}
}

// WithPayload adds the payload to the get namespaced service container log unauthorized response
func (o *GetNamespacedServiceContainerLogUnauthorized) WithPayload(payload *models.Error) *GetNamespacedServiceContainerLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get namespaced service container log unauthorized response
func (o *GetNamespacedServiceContainerLogUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamespacedServiceContainerLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNamespacedServiceContainerLogNotFoundCode is the HTTP code returned for type GetNamespacedServiceContainerLogNotFound
const GetNamespacedServiceContainerLogNotFoundCode int = 404

/*GetNamespacedServiceContainerLogNotFound The service container cannot be found

swagger:response getNamespacedServiceContainerLogNotFound
*/
type GetNamespacedServiceContainerLogNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNamespacedServiceContainerLogNotFound creates GetNamespacedServiceContainerLogNotFound with default headers values
func NewGetNamespacedServiceContainerLogNotFound() *GetNamespacedServiceContainerLogNotFound {

	return &GetNamespacedServiceContainerLogNotFound{}
}

// WithPayload adds the payload to the get namespaced service container log not found response
func (o *GetNamespacedServiceContainerLogNotFound) WithPayload(payload *models.Error) *GetNamespacedServiceContainerLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get namespaced service container log not found response
func (o *GetNamespacedServiceContainerLogNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNamespacedServiceContainerLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
