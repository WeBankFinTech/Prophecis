// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetNamespacedServiceContainerLogHandlerFunc turns a function with the right signature into a get namespaced service container log handler
type GetNamespacedServiceContainerLogHandlerFunc func(GetNamespacedServiceContainerLogParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNamespacedServiceContainerLogHandlerFunc) Handle(params GetNamespacedServiceContainerLogParams) middleware.Responder {
	return fn(params)
}

// GetNamespacedServiceContainerLogHandler interface for that can handle valid get namespaced service container log params
type GetNamespacedServiceContainerLogHandler interface {
	Handle(GetNamespacedServiceContainerLogParams) middleware.Responder
}

// NewGetNamespacedServiceContainerLog creates a new http.Handler for the get namespaced service container log operation
func NewGetNamespacedServiceContainerLog(ctx *middleware.Context, handler GetNamespacedServiceContainerLogHandler) *GetNamespacedServiceContainerLog {
	return &GetNamespacedServiceContainerLog{Context: ctx, Handler: handler}
}

/*GetNamespacedServiceContainerLog swagger:route GET /mf/v1/service/{service_name}/namespace/{namespace}/container/{container_name}/log container getNamespacedServiceContainerLog

Get log of service'container in the given namespace

Get container of service log.

*/
type GetNamespacedServiceContainerLog struct {
	Context *middleware.Context
	Handler GetNamespacedServiceContainerLogHandler
}

func (o *GetNamespacedServiceContainerLog) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNamespacedServiceContainerLogParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
