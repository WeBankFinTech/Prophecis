// Code generated by go-swagger; DO NOT EDIT.

package model_result

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateResultHandlerFunc turns a function with the right signature into a create result handler
type CreateResultHandlerFunc func(CreateResultParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateResultHandlerFunc) Handle(params CreateResultParams) middleware.Responder {
	return fn(params)
}

// CreateResultHandler interface for that can handle valid create result params
type CreateResultHandler interface {
	Handle(CreateResultParams) middleware.Responder
}

// NewCreateResult creates a new http.Handler for the create result operation
func NewCreateResult(ctx *middleware.Context, handler CreateResultHandler) *CreateResult {
	return &CreateResult{Context: ctx, Handler: handler}
}

/*CreateResult swagger:route POST /mf/v1/result model_result createResult

create result

*/
type CreateResult struct {
	Context *middleware.Context
	Handler CreateResultHandler
}

func (o *CreateResult) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateResultParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
