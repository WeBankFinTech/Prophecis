// Code generated by go-swagger; DO NOT EDIT.

package model_result

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// GetResultByModelNameOKCode is the HTTP code returned for type GetResultByModelNameOK
const GetResultByModelNameOKCode int = 200

/*GetResultByModelNameOK OK

swagger:response getResultByModelNameOK
*/
type GetResultByModelNameOK struct {

	/*
	  In: Body
	*/
	Payload models.Results `json:"body,omitempty"`
}

// NewGetResultByModelNameOK creates GetResultByModelNameOK with default headers values
func NewGetResultByModelNameOK() *GetResultByModelNameOK {

	return &GetResultByModelNameOK{}
}

// WithPayload adds the payload to the get result by model name o k response
func (o *GetResultByModelNameOK) WithPayload(payload models.Results) *GetResultByModelNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get result by model name o k response
func (o *GetResultByModelNameOK) SetPayload(payload models.Results) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetResultByModelNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Results{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetResultByModelNameUnauthorizedCode is the HTTP code returned for type GetResultByModelNameUnauthorized
const GetResultByModelNameUnauthorizedCode int = 401

/*GetResultByModelNameUnauthorized Unauthorized

swagger:response getResultByModelNameUnauthorized
*/
type GetResultByModelNameUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetResultByModelNameUnauthorized creates GetResultByModelNameUnauthorized with default headers values
func NewGetResultByModelNameUnauthorized() *GetResultByModelNameUnauthorized {

	return &GetResultByModelNameUnauthorized{}
}

// WithPayload adds the payload to the get result by model name unauthorized response
func (o *GetResultByModelNameUnauthorized) WithPayload(payload *models.Error) *GetResultByModelNameUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get result by model name unauthorized response
func (o *GetResultByModelNameUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetResultByModelNameUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetResultByModelNameNotFoundCode is the HTTP code returned for type GetResultByModelNameNotFound
const GetResultByModelNameNotFoundCode int = 404

/*GetResultByModelNameNotFound Result get fail

swagger:response getResultByModelNameNotFound
*/
type GetResultByModelNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetResultByModelNameNotFound creates GetResultByModelNameNotFound with default headers values
func NewGetResultByModelNameNotFound() *GetResultByModelNameNotFound {

	return &GetResultByModelNameNotFound{}
}

// WithPayload adds the payload to the get result by model name not found response
func (o *GetResultByModelNameNotFound) WithPayload(payload *models.Error) *GetResultByModelNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get result by model name not found response
func (o *GetResultByModelNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetResultByModelNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
