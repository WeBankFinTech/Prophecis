// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// PushReportByReportIDOKCode is the HTTP code returned for type PushReportByReportIDOK
const PushReportByReportIDOKCode int = 200

/*PushReportByReportIDOK OK

swagger:response pushReportByReportIdOK
*/
type PushReportByReportIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewPushReportByReportIDOK creates PushReportByReportIDOK with default headers values
func NewPushReportByReportIDOK() *PushReportByReportIDOK {

	return &PushReportByReportIDOK{}
}

// WithPayload adds the payload to the push report by report Id o k response
func (o *PushReportByReportIDOK) WithPayload(payload *models.Event) *PushReportByReportIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the push report by report Id o k response
func (o *PushReportByReportIDOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PushReportByReportIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PushReportByReportIDUnauthorizedCode is the HTTP code returned for type PushReportByReportIDUnauthorized
const PushReportByReportIDUnauthorizedCode int = 401

/*PushReportByReportIDUnauthorized Unauthorized

swagger:response pushReportByReportIdUnauthorized
*/
type PushReportByReportIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPushReportByReportIDUnauthorized creates PushReportByReportIDUnauthorized with default headers values
func NewPushReportByReportIDUnauthorized() *PushReportByReportIDUnauthorized {

	return &PushReportByReportIDUnauthorized{}
}

// WithPayload adds the payload to the push report by report Id unauthorized response
func (o *PushReportByReportIDUnauthorized) WithPayload(payload *models.Error) *PushReportByReportIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the push report by report Id unauthorized response
func (o *PushReportByReportIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PushReportByReportIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PushReportByReportIDNotFoundCode is the HTTP code returned for type PushReportByReportIDNotFound
const PushReportByReportIDNotFoundCode int = 404

/*PushReportByReportIDNotFound Report push fail

swagger:response pushReportByReportIdNotFound
*/
type PushReportByReportIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPushReportByReportIDNotFound creates PushReportByReportIDNotFound with default headers values
func NewPushReportByReportIDNotFound() *PushReportByReportIDNotFound {

	return &PushReportByReportIDNotFound{}
}

// WithPayload adds the payload to the push report by report Id not found response
func (o *PushReportByReportIDNotFound) WithPayload(payload *models.Error) *PushReportByReportIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the push report by report Id not found response
func (o *PushReportByReportIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PushReportByReportIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
