// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPushEventByIDHandlerFunc turns a function with the right signature into a get push event by Id handler
type GetPushEventByIDHandlerFunc func(GetPushEventByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPushEventByIDHandlerFunc) Handle(params GetPushEventByIDParams) middleware.Responder {
	return fn(params)
}

// GetPushEventByIDHandler interface for that can handle valid get push event by Id params
type GetPushEventByIDHandler interface {
	Handle(GetPushEventByIDParams) middleware.Responder
}

// NewGetPushEventByID creates a new http.Handler for the get push event by Id operation
func NewGetPushEventByID(ctx *middleware.Context, handler GetPushEventByIDHandler) *GetPushEventByID {
	return &GetPushEventByID{Context: ctx, Handler: handler}
}

/*GetPushEventByID swagger:route GET /mf/v1/pushEvent/{eventId} report getPushEventById

get push event by eventId

get push event

*/
type GetPushEventByID struct {
	Context *middleware.Context
	Handler GetPushEventByIDHandler
}

func (o *GetPushEventByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPushEventByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
