// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PushReportByReportIDHandlerFunc turns a function with the right signature into a push report by report Id handler
type PushReportByReportIDHandlerFunc func(PushReportByReportIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PushReportByReportIDHandlerFunc) Handle(params PushReportByReportIDParams) middleware.Responder {
	return fn(params)
}

// PushReportByReportIDHandler interface for that can handle valid push report by report Id params
type PushReportByReportIDHandler interface {
	Handle(PushReportByReportIDParams) middleware.Responder
}

// NewPushReportByReportID creates a new http.Handler for the push report by report Id operation
func NewPushReportByReportID(ctx *middleware.Context, handler PushReportByReportIDHandler) *PushReportByReportID {
	return &PushReportByReportID{Context: ctx, Handler: handler}
}

/*PushReportByReportID swagger:route POST /mf/v1/report/push/{reportId} report pushReportByReportId

push report by report id

push report

*/
type PushReportByReportID struct {
	Context *middleware.Context
	Handler PushReportByReportIDHandler
}

func (o *PushReportByReportID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPushReportByReportIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
