// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListReportVersionsByReportIDHandlerFunc turns a function with the right signature into a list report versions by report Id handler
type ListReportVersionsByReportIDHandlerFunc func(ListReportVersionsByReportIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListReportVersionsByReportIDHandlerFunc) Handle(params ListReportVersionsByReportIDParams) middleware.Responder {
	return fn(params)
}

// ListReportVersionsByReportIDHandler interface for that can handle valid list report versions by report Id params
type ListReportVersionsByReportIDHandler interface {
	Handle(ListReportVersionsByReportIDParams) middleware.Responder
}

// NewListReportVersionsByReportID creates a new http.Handler for the list report versions by report Id operation
func NewListReportVersionsByReportID(ctx *middleware.Context, handler ListReportVersionsByReportIDHandler) *ListReportVersionsByReportID {
	return &ListReportVersionsByReportID{Context: ctx, Handler: handler}
}

/*ListReportVersionsByReportID swagger:route GET /mf/v1/reportversions/{reportId} report listReportVersionsByReportId

get all version of specified report

*/
type ListReportVersionsByReportID struct {
	Context *middleware.Context
	Handler ListReportVersionsByReportIDHandler
}

func (o *ListReportVersionsByReportID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListReportVersionsByReportIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
