// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	models "mlss-mf/pkg/models"
)

// DownloadReportByIDOKCode is the HTTP code returned for type DownloadReportByIDOK
const DownloadReportByIDOKCode int = 200

/*DownloadReportByIDOK OK

swagger:response downloadReportByIdOK
*/
type DownloadReportByIDOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewDownloadReportByIDOK creates DownloadReportByIDOK with default headers values
func NewDownloadReportByIDOK() *DownloadReportByIDOK {

	return &DownloadReportByIDOK{}
}

// WithPayload adds the payload to the download report by Id o k response
func (o *DownloadReportByIDOK) WithPayload(payload io.ReadCloser) *DownloadReportByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download report by Id o k response
func (o *DownloadReportByIDOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadReportByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DownloadReportByIDUnauthorizedCode is the HTTP code returned for type DownloadReportByIDUnauthorized
const DownloadReportByIDUnauthorizedCode int = 401

/*DownloadReportByIDUnauthorized Unauthorized

swagger:response downloadReportByIdUnauthorized
*/
type DownloadReportByIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDownloadReportByIDUnauthorized creates DownloadReportByIDUnauthorized with default headers values
func NewDownloadReportByIDUnauthorized() *DownloadReportByIDUnauthorized {

	return &DownloadReportByIDUnauthorized{}
}

// WithPayload adds the payload to the download report by Id unauthorized response
func (o *DownloadReportByIDUnauthorized) WithPayload(payload *models.Error) *DownloadReportByIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download report by Id unauthorized response
func (o *DownloadReportByIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadReportByIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DownloadReportByIDNotFoundCode is the HTTP code returned for type DownloadReportByIDNotFound
const DownloadReportByIDNotFoundCode int = 404

/*DownloadReportByIDNotFound report download fail

swagger:response downloadReportByIdNotFound
*/
type DownloadReportByIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDownloadReportByIDNotFound creates DownloadReportByIDNotFound with default headers values
func NewDownloadReportByIDNotFound() *DownloadReportByIDNotFound {

	return &DownloadReportByIDNotFound{}
}

// WithPayload adds the payload to the download report by Id not found response
func (o *DownloadReportByIDNotFound) WithPayload(payload *models.Error) *DownloadReportByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download report by Id not found response
func (o *DownloadReportByIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadReportByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
