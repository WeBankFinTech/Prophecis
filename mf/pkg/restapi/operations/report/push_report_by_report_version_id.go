// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PushReportByReportVersionIDHandlerFunc turns a function with the right signature into a push report by report version Id handler
type PushReportByReportVersionIDHandlerFunc func(PushReportByReportVersionIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PushReportByReportVersionIDHandlerFunc) Handle(params PushReportByReportVersionIDParams) middleware.Responder {
	return fn(params)
}

// PushReportByReportVersionIDHandler interface for that can handle valid push report by report version Id params
type PushReportByReportVersionIDHandler interface {
	Handle(PushReportByReportVersionIDParams) middleware.Responder
}

// NewPushReportByReportVersionID creates a new http.Handler for the push report by report version Id operation
func NewPushReportByReportVersionID(ctx *middleware.Context, handler PushReportByReportVersionIDHandler) *PushReportByReportVersionID {
	return &PushReportByReportVersionID{Context: ctx, Handler: handler}
}

/*PushReportByReportVersionID swagger:route POST /mf/v1/reportVersion/Push/{reportVersionId} report pushReportByReportVersionId

push report by report version id

push report by report version id

*/
type PushReportByReportVersionID struct {
	Context *middleware.Context
	Handler PushReportByReportVersionIDHandler
}

func (o *PushReportByReportVersionID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPushReportByReportVersionIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
