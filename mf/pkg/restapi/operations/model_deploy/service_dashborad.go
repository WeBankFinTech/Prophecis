// Code generated by go-swagger; DO NOT EDIT.

package model_deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ServiceDashboradHandlerFunc turns a function with the right signature into a service dashborad handler
type ServiceDashboradHandlerFunc func(ServiceDashboradParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceDashboradHandlerFunc) Handle(params ServiceDashboradParams) middleware.Responder {
	return fn(params)
}

// ServiceDashboradHandler interface for that can handle valid service dashborad params
type ServiceDashboradHandler interface {
	Handle(ServiceDashboradParams) middleware.Responder
}

// NewServiceDashborad creates a new http.Handler for the service dashborad operation
func NewServiceDashborad(ctx *middleware.Context, handler ServiceDashboradHandler) *ServiceDashborad {
	return &ServiceDashborad{Context: ctx, Handler: handler}
}

/*ServiceDashborad swagger:route GET /mf/v1/dashboard modelDeploy serviceDashborad

Get service's dashborad

Service Dashborad

*/
type ServiceDashborad struct {
	Context *middleware.Context
	Handler ServiceDashboradHandler
}

func (o *ServiceDashborad) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewServiceDashboradParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
