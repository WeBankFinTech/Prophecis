// Code generated by go-swagger; DO NOT EDIT.

package model_deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetNamespacedServiceRunHandlerFunc turns a function with the right signature into a get namespaced service run handler
type GetNamespacedServiceRunHandlerFunc func(GetNamespacedServiceRunParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNamespacedServiceRunHandlerFunc) Handle(params GetNamespacedServiceRunParams) middleware.Responder {
	return fn(params)
}

// GetNamespacedServiceRunHandler interface for that can handle valid get namespaced service run params
type GetNamespacedServiceRunHandler interface {
	Handle(GetNamespacedServiceRunParams) middleware.Responder
}

// NewGetNamespacedServiceRun creates a new http.Handler for the get namespaced service run operation
func NewGetNamespacedServiceRun(ctx *middleware.Context, handler GetNamespacedServiceRunHandler) *GetNamespacedServiceRun {
	return &GetNamespacedServiceRun{Context: ctx, Handler: handler}
}

/*GetNamespacedServiceRun swagger:route GET /mf/v1/serviceRun/{id} modelDeploy getNamespacedServiceRun

Run a Service CRD Object.

Run Service.

*/
type GetNamespacedServiceRun struct {
	Context *middleware.Context
	Handler GetNamespacedServiceRunHandler
}

func (o *GetNamespacedServiceRun) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNamespacedServiceRunParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
