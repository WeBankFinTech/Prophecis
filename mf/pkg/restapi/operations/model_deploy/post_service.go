// Code generated by go-swagger; DO NOT EDIT.

package model_deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostServiceHandlerFunc turns a function with the right signature into a post service handler
type PostServiceHandlerFunc func(PostServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostServiceHandlerFunc) Handle(params PostServiceParams) middleware.Responder {
	return fn(params)
}

// PostServiceHandler interface for that can handle valid post service params
type PostServiceHandler interface {
	Handle(PostServiceParams) middleware.Responder
}

// NewPostService creates a new http.Handler for the post service operation
func NewPostService(ctx *middleware.Context, handler PostServiceHandler) *PostService {
	return &PostService{Context: ctx, Handler: handler}
}

/*PostService swagger:route POST /mf/v1/service modelDeploy postService

Create a Service in the given Namesapce

Post Service.

*/
type PostService struct {
	Context *middleware.Context
	Handler PostServiceHandler
}

func (o *PostService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
