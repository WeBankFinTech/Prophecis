// Code generated by go-swagger; DO NOT EDIT.

package model_deploy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StopNamespacedServiceHandlerFunc turns a function with the right signature into a stop namespaced service handler
type StopNamespacedServiceHandlerFunc func(StopNamespacedServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StopNamespacedServiceHandlerFunc) Handle(params StopNamespacedServiceParams) middleware.Responder {
	return fn(params)
}

// StopNamespacedServiceHandler interface for that can handle valid stop namespaced service params
type StopNamespacedServiceHandler interface {
	Handle(StopNamespacedServiceParams) middleware.Responder
}

// NewStopNamespacedService creates a new http.Handler for the stop namespaced service operation
func NewStopNamespacedService(ctx *middleware.Context, handler StopNamespacedServiceHandler) *StopNamespacedService {
	return &StopNamespacedService{Context: ctx, Handler: handler}
}

/*StopNamespacedService swagger:route GET /mf/v1/serviceStop/{namespace}/{name}/{id} modelDeploy stopNamespacedService

Get the list of Services in the given Namespace

Get Services list.

*/
type StopNamespacedService struct {
	Context *middleware.Context
	Handler StopNamespacedServiceHandler
}

func (o *StopNamespacedService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStopNamespacedServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
